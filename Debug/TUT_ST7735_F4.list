
TUT_ST7735_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  080057b8  080057b8  000067b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005994  08005994  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005994  08005994  00006994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800599c  0800599c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800599c  0800599c  0000699c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059a0  080059a0  000069a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080059a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000068  08005a0c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08005a0c  00007324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dd8  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f75  00000000  00000000  0001ae70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0001dde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea1  00000000  00000000  0001f098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ebd  00000000  00000000  0001ff39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001897f  00000000  00000000  00023df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7540  00000000  00000000  0003c775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113cb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005620  00000000  00000000  00113cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00119318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080057a0 	.word	0x080057a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080057a0 	.word	0x080057a0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MPU9250_Init>:
#include <stdint.h>

extern I2C_HandleTypeDef hi2c1;

void MPU9250_Init()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af04      	add	r7, sp, #16
	uint8_t writeConfig = FS_GYRO_500;
 80005a6:	2308      	movs	r3, #8
 80005a8:	71bb      	strb	r3, [r7, #6]

	/* Verifying if the device is ready */
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADRESS << 1) + 0, 1, 100);
 80005aa:	2364      	movs	r3, #100	@ 0x64
 80005ac:	2201      	movs	r2, #1
 80005ae:	21d0      	movs	r1, #208	@ 0xd0
 80005b0:	482f      	ldr	r0, [pc, #188]	@ (8000670 <MPU9250_Init+0xd0>)
 80005b2:	f001 fe8d 	bl	80022d0 <HAL_I2C_IsDeviceReady>
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_OK)
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d103      	bne.n	80005c8 <MPU9250_Init+0x28>
	{
		printf("Device is ready to connect\n");
 80005c0:	482c      	ldr	r0, [pc, #176]	@ (8000674 <MPU9250_Init+0xd4>)
 80005c2:	f004 fa89 	bl	8004ad8 <puts>
 80005c6:	e002      	b.n	80005ce <MPU9250_Init+0x2e>
	}
	else
	{
		printf("Device is not ready to connect\n");
 80005c8:	482b      	ldr	r0, [pc, #172]	@ (8000678 <MPU9250_Init+0xd8>)
 80005ca:	f004 fa85 	bl	8004ad8 <puts>
	}

	/* Configurating Gyroscope */
	ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADRESS << 1) + 0, REG_CONFIG_GYRO, 1, &writeConfig, 1, 100);
 80005ce:	2364      	movs	r3, #100	@ 0x64
 80005d0:	9302      	str	r3, [sp, #8]
 80005d2:	2301      	movs	r3, #1
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	1dbb      	adds	r3, r7, #6
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	221b      	movs	r2, #27
 80005de:	21d0      	movs	r1, #208	@ 0xd0
 80005e0:	4823      	ldr	r0, [pc, #140]	@ (8000670 <MPU9250_Init+0xd0>)
 80005e2:	f001 fb49 	bl	8001c78 <HAL_I2C_Mem_Write>
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_OK)
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d103      	bne.n	80005f8 <MPU9250_Init+0x58>
	{
		printf("Gyroscope configured successfully\n");
 80005f0:	4822      	ldr	r0, [pc, #136]	@ (800067c <MPU9250_Init+0xdc>)
 80005f2:	f004 fa71 	bl	8004ad8 <puts>
 80005f6:	e002      	b.n	80005fe <MPU9250_Init+0x5e>
	}
	else
	{
		printf("Error while configuring gyroscope\n");
 80005f8:	4821      	ldr	r0, [pc, #132]	@ (8000680 <MPU9250_Init+0xe0>)
 80005fa:	f004 fa6d 	bl	8004ad8 <puts>
	}

	/* Configurating Accelerometer */
	writeConfig = FS_ACC_4G;
 80005fe:	2308      	movs	r3, #8
 8000600:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADRESS << 1) + 0, REG_CONFIG_ACC, 1, &writeConfig, 1, 100);
 8000602:	2364      	movs	r3, #100	@ 0x64
 8000604:	9302      	str	r3, [sp, #8]
 8000606:	2301      	movs	r3, #1
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	1dbb      	adds	r3, r7, #6
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2301      	movs	r3, #1
 8000610:	221c      	movs	r2, #28
 8000612:	21d0      	movs	r1, #208	@ 0xd0
 8000614:	4816      	ldr	r0, [pc, #88]	@ (8000670 <MPU9250_Init+0xd0>)
 8000616:	f001 fb2f 	bl	8001c78 <HAL_I2C_Mem_Write>
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_OK)
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d103      	bne.n	800062c <MPU9250_Init+0x8c>
	{
		printf("Accelerometer configured successfully\n");
 8000624:	4817      	ldr	r0, [pc, #92]	@ (8000684 <MPU9250_Init+0xe4>)
 8000626:	f004 fa57 	bl	8004ad8 <puts>
 800062a:	e002      	b.n	8000632 <MPU9250_Init+0x92>
	}
	else
	{
		printf("Error while configuring accelerometer\n");
 800062c:	4816      	ldr	r0, [pc, #88]	@ (8000688 <MPU9250_Init+0xe8>)
 800062e:	f004 fa53 	bl	8004ad8 <puts>
	}
	/* Exiting from sleep mode */
	writeConfig = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADRESS << 1) + 0, REG_PWR_CTRL, 1, &writeConfig, 1, 100);
 8000636:	2364      	movs	r3, #100	@ 0x64
 8000638:	9302      	str	r3, [sp, #8]
 800063a:	2301      	movs	r3, #1
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	1dbb      	adds	r3, r7, #6
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	226b      	movs	r2, #107	@ 0x6b
 8000646:	21d0      	movs	r1, #208	@ 0xd0
 8000648:	4809      	ldr	r0, [pc, #36]	@ (8000670 <MPU9250_Init+0xd0>)
 800064a:	f001 fb15 	bl	8001c78 <HAL_I2C_Mem_Write>
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_OK)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d103      	bne.n	8000660 <MPU9250_Init+0xc0>
	{
		printf("Sleep mode disabled\n");
 8000658:	480c      	ldr	r0, [pc, #48]	@ (800068c <MPU9250_Init+0xec>)
 800065a:	f004 fa3d 	bl	8004ad8 <puts>
	}
	else
	{
		printf("Error while exiting from sleep mode\n");
	}
}
 800065e:	e002      	b.n	8000666 <MPU9250_Init+0xc6>
		printf("Error while exiting from sleep mode\n");
 8000660:	480b      	ldr	r0, [pc, #44]	@ (8000690 <MPU9250_Init+0xf0>)
 8000662:	f004 fa39 	bl	8004ad8 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000090 	.word	0x20000090
 8000674:	080057b8 	.word	0x080057b8
 8000678:	080057d4 	.word	0x080057d4
 800067c:	080057f4 	.word	0x080057f4
 8000680:	08005818 	.word	0x08005818
 8000684:	0800583c 	.word	0x0800583c
 8000688:	08005864 	.word	0x08005864
 800068c:	0800588c 	.word	0x0800588c
 8000690:	080058a0 	.word	0x080058a0

08000694 <MPU9250_ReadX>:

float MPU9250_ReadX()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af04      	add	r7, sp, #16
	uint8_t data[2];
	int16_t xAcc;
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADRESS << 1) + 1, REG_DATA_X, 1, data, 2, 100);
 800069a:	2364      	movs	r3, #100	@ 0x64
 800069c:	9302      	str	r3, [sp, #8]
 800069e:	2302      	movs	r3, #2
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2301      	movs	r3, #1
 80006a8:	223b      	movs	r2, #59	@ 0x3b
 80006aa:	21d1      	movs	r1, #209	@ 0xd1
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <MPU9250_ReadX+0x44>)
 80006ae:	f001 fbdd 	bl	8001e6c <HAL_I2C_Mem_Read>
	xAcc = ((int16_t)data[0] << 8) + data[1];
 80006b2:	793b      	ldrb	r3, [r7, #4]
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	797a      	ldrb	r2, [r7, #5]
 80006ba:	4413      	add	r3, r2
 80006bc:	b29b      	uxth	r3, r3
 80006be:	80fb      	strh	r3, [r7, #6]

	return xAcc;
 80006c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c4:	ee07 3a90 	vmov	s15, r3
 80006c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80006cc:	eeb0 0a67 	vmov.f32	s0, s15
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000090 	.word	0x20000090

080006dc <MPU9250_ReadY>:

float MPU9250_ReadY()
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af04      	add	r7, sp, #16
	uint8_t data[2];
	int16_t yAcc;
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADRESS << 1) + 1, REG_DATA_Y, 1, data, 2, 100);
 80006e2:	2364      	movs	r3, #100	@ 0x64
 80006e4:	9302      	str	r3, [sp, #8]
 80006e6:	2302      	movs	r3, #2
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2301      	movs	r3, #1
 80006f0:	223d      	movs	r2, #61	@ 0x3d
 80006f2:	21d1      	movs	r1, #209	@ 0xd1
 80006f4:	480a      	ldr	r0, [pc, #40]	@ (8000720 <MPU9250_ReadY+0x44>)
 80006f6:	f001 fbb9 	bl	8001e6c <HAL_I2C_Mem_Read>
	yAcc = ((int16_t)data[0] << 8) + data[1];
 80006fa:	793b      	ldrb	r3, [r7, #4]
 80006fc:	021b      	lsls	r3, r3, #8
 80006fe:	b29b      	uxth	r3, r3
 8000700:	797a      	ldrb	r2, [r7, #5]
 8000702:	4413      	add	r3, r2
 8000704:	b29b      	uxth	r3, r3
 8000706:	80fb      	strh	r3, [r7, #6]

	return yAcc;
 8000708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800070c:	ee07 3a90 	vmov	s15, r3
 8000710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000714:	eeb0 0a67 	vmov.f32	s0, s15
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000090 	.word	0x20000090

08000724 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2140      	movs	r1, #64	@ 0x40
 800072c:	4802      	ldr	r0, [pc, #8]	@ (8000738 <ST7735_Select+0x14>)
 800072e:	f001 f92b 	bl	8001988 <HAL_GPIO_WritePin>
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40020400 	.word	0x40020400

0800073c <ST7735_Unselect>:

void ST7735_Unselect()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2140      	movs	r1, #64	@ 0x40
 8000744:	4802      	ldr	r0, [pc, #8]	@ (8000750 <ST7735_Unselect+0x14>)
 8000746:	f001 f91f 	bl	8001988 <HAL_GPIO_WritePin>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40020400 	.word	0x40020400

08000754 <ST7735_Reset>:

void ST7735_Reset()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2180      	movs	r1, #128	@ 0x80
 800075c:	4806      	ldr	r0, [pc, #24]	@ (8000778 <ST7735_Reset+0x24>)
 800075e:	f001 f913 	bl	8001988 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000762:	2005      	movs	r0, #5
 8000764:	f000 fe46 	bl	80013f4 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2180      	movs	r1, #128	@ 0x80
 800076c:	4802      	ldr	r0, [pc, #8]	@ (8000778 <ST7735_Reset+0x24>)
 800076e:	f001 f90b 	bl	8001988 <HAL_GPIO_WritePin>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40020800 	.word	0x40020800

0800077c <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800078c:	4806      	ldr	r0, [pc, #24]	@ (80007a8 <ST7735_WriteCommand+0x2c>)
 800078e:	f001 f8fb 	bl	8001988 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000792:	1df9      	adds	r1, r7, #7
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
 8000798:	2201      	movs	r2, #1
 800079a:	4804      	ldr	r0, [pc, #16]	@ (80007ac <ST7735_WriteCommand+0x30>)
 800079c:	f003 f8eb 	bl	8003976 <HAL_SPI_Transmit>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40020000 	.word	0x40020000
 80007ac:	200000e8 	.word	0x200000e8

080007b0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c0:	4807      	ldr	r0, [pc, #28]	@ (80007e0 <ST7735_WriteData+0x30>)
 80007c2:	f001 f8e1 	bl	8001988 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <ST7735_WriteData+0x34>)
 80007d2:	f003 f8d0 	bl	8003976 <HAL_SPI_Transmit>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40020000 	.word	0x40020000
 80007e4:	200000e8 	.word	0x200000e8

080007e8 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	607a      	str	r2, [r7, #4]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80007fa:	e034      	b.n	8000866 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000806:	7afb      	ldrb	r3, [r7, #11]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ffb7 	bl	800077c <ST7735_WriteCommand>

        numArgs = *addr++;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000818:	7abb      	ldrb	r3, [r7, #10]
 800081a:	b29b      	uxth	r3, r3
 800081c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000820:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000822:	7abb      	ldrb	r3, [r7, #10]
 8000824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000828:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800082a:	7abb      	ldrb	r3, [r7, #10]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d008      	beq.n	8000842 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000830:	7abb      	ldrb	r3, [r7, #10]
 8000832:	4619      	mov	r1, r3
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ffbb 	bl	80007b0 <ST7735_WriteData>
            addr += numArgs;
 800083a:	7abb      	ldrb	r3, [r7, #10]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4413      	add	r3, r2
 8000840:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000842:	89bb      	ldrh	r3, [r7, #12]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00e      	beq.n	8000866 <DisplayInit+0x7e>
            ms = *addr++;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000852:	89bb      	ldrh	r3, [r7, #12]
 8000854:	2bff      	cmp	r3, #255	@ 0xff
 8000856:	d102      	bne.n	800085e <DisplayInit+0x76>
 8000858:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800085c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800085e:	89bb      	ldrh	r3, [r7, #12]
 8000860:	4618      	mov	r0, r3
 8000862:	f000 fdc7 	bl	80013f4 <HAL_Delay>
    while(numCommands--) {
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	1e5a      	subs	r2, r3, #1
 800086a:	73fa      	strb	r2, [r7, #15]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1c5      	bne.n	80007fc <DisplayInit+0x14>
        }
    }
}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <ST7735_Init>:
    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
}

void ST7735_Init(uint8_t rotation)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000886:	f7ff ff4d 	bl	8000724 <ST7735_Select>
    ST7735_Reset();
 800088a:	f7ff ff63 	bl	8000754 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800088e:	480c      	ldr	r0, [pc, #48]	@ (80008c0 <ST7735_Init+0x44>)
 8000890:	f7ff ffaa 	bl	80007e8 <DisplayInit>
    DisplayInit(init_cmds2);
 8000894:	480b      	ldr	r0, [pc, #44]	@ (80008c4 <ST7735_Init+0x48>)
 8000896:	f7ff ffa7 	bl	80007e8 <DisplayInit>
    DisplayInit(init_cmds3);
 800089a:	480b      	ldr	r0, [pc, #44]	@ (80008c8 <ST7735_Init+0x4c>)
 800089c:	f7ff ffa4 	bl	80007e8 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <ST7735_Init+0x50>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 80008a6:	4b0a      	ldr	r3, [pc, #40]	@ (80008d0 <ST7735_Init+0x54>)
 80008a8:	2203      	movs	r2, #3
 80008aa:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f810 	bl	80008d4 <ST7735_SetRotation>
    ST7735_Unselect();
 80008b4:	f7ff ff42 	bl	800073c <ST7735_Unselect>

}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	080058d4 	.word	0x080058d4
 80008c4:	0800590c 	.word	0x0800590c
 80008c8:	0800591c 	.word	0x0800591c
 80008cc:	20000089 	.word	0x20000089
 80008d0:	2000008a 	.word	0x2000008a

080008d4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	f003 0303 	and.w	r3, r3, #3
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b33      	ldr	r3, [pc, #204]	@ (80009b8 <ST7735_SetRotation+0xe4>)
 80008ec:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80008ee:	4b32      	ldr	r3, [pc, #200]	@ (80009b8 <ST7735_SetRotation+0xe4>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d84e      	bhi.n	8000994 <ST7735_SetRotation+0xc0>
 80008f6:	a201      	add	r2, pc, #4	@ (adr r2, 80008fc <ST7735_SetRotation+0x28>)
 80008f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fc:	0800090d 	.word	0x0800090d
 8000900:	0800092f 	.word	0x0800092f
 8000904:	08000951 	.word	0x08000951
 8000908:	08000973 	.word	0x08000973
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 800090c:	23c0      	movs	r3, #192	@ 0xc0
 800090e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000910:	4b2a      	ldr	r3, [pc, #168]	@ (80009bc <ST7735_SetRotation+0xe8>)
 8000912:	2280      	movs	r2, #128	@ 0x80
 8000914:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000916:	4b2a      	ldr	r3, [pc, #168]	@ (80009c0 <ST7735_SetRotation+0xec>)
 8000918:	2280      	movs	r2, #128	@ 0x80
 800091a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800091c:	4b29      	ldr	r3, [pc, #164]	@ (80009c4 <ST7735_SetRotation+0xf0>)
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	4b29      	ldr	r3, [pc, #164]	@ (80009c8 <ST7735_SetRotation+0xf4>)
 8000922:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000924:	4b29      	ldr	r3, [pc, #164]	@ (80009cc <ST7735_SetRotation+0xf8>)
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	4b29      	ldr	r3, [pc, #164]	@ (80009d0 <ST7735_SetRotation+0xfc>)
 800092a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800092c:	e032      	b.n	8000994 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800092e:	23a0      	movs	r3, #160	@ 0xa0
 8000930:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000932:	4b23      	ldr	r3, [pc, #140]	@ (80009c0 <ST7735_SetRotation+0xec>)
 8000934:	2280      	movs	r2, #128	@ 0x80
 8000936:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000938:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <ST7735_SetRotation+0xe8>)
 800093a:	2280      	movs	r2, #128	@ 0x80
 800093c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800093e:	4b21      	ldr	r3, [pc, #132]	@ (80009c4 <ST7735_SetRotation+0xf0>)
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	4b23      	ldr	r3, [pc, #140]	@ (80009d0 <ST7735_SetRotation+0xfc>)
 8000944:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000946:	4b21      	ldr	r3, [pc, #132]	@ (80009cc <ST7735_SetRotation+0xf8>)
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <ST7735_SetRotation+0xf4>)
 800094c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800094e:	e021      	b.n	8000994 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000950:	2300      	movs	r3, #0
 8000952:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000954:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <ST7735_SetRotation+0xe8>)
 8000956:	2280      	movs	r2, #128	@ 0x80
 8000958:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800095a:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <ST7735_SetRotation+0xec>)
 800095c:	2280      	movs	r2, #128	@ 0x80
 800095e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000960:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <ST7735_SetRotation+0xf0>)
 8000962:	781a      	ldrb	r2, [r3, #0]
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <ST7735_SetRotation+0xf4>)
 8000966:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000968:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <ST7735_SetRotation+0xf8>)
 800096a:	781a      	ldrb	r2, [r3, #0]
 800096c:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <ST7735_SetRotation+0xfc>)
 800096e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000970:	e010      	b.n	8000994 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000972:	2360      	movs	r3, #96	@ 0x60
 8000974:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000976:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <ST7735_SetRotation+0xec>)
 8000978:	2280      	movs	r2, #128	@ 0x80
 800097a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <ST7735_SetRotation+0xe8>)
 800097e:	2280      	movs	r2, #128	@ 0x80
 8000980:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <ST7735_SetRotation+0xf0>)
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <ST7735_SetRotation+0xfc>)
 8000988:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <ST7735_SetRotation+0xf8>)
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <ST7735_SetRotation+0xf4>)
 8000990:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000992:	bf00      	nop
  }
  ST7735_Select();
 8000994:	f7ff fec6 	bl	8000724 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000998:	2036      	movs	r0, #54	@ 0x36
 800099a:	f7ff feef 	bl	800077c <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800099e:	f107 030f 	add.w	r3, r7, #15
 80009a2:	2101      	movs	r1, #1
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff03 	bl	80007b0 <ST7735_WriteData>
  ST7735_Unselect();
 80009aa:	f7ff fec7 	bl	800073c <ST7735_Unselect>
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000088 	.word	0x20000088
 80009bc:	20000086 	.word	0x20000086
 80009c0:	20000084 	.word	0x20000084
 80009c4:	20000089 	.word	0x20000089
 80009c8:	2000008b 	.word	0x2000008b
 80009cc:	2000008a 	.word	0x2000008a
 80009d0:	2000008c 	.word	0x2000008c

080009d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	@ 0x28
 80009d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b3a      	ldr	r3, [pc, #232]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a39      	ldr	r2, [pc, #228]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b37      	ldr	r3, [pc, #220]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b33      	ldr	r3, [pc, #204]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a32      	ldr	r2, [pc, #200]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b30      	ldr	r3, [pc, #192]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a24      	ldr	r2, [pc, #144]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ledU_Pin|ledR_Pin|ledD_Pin|ledL_Pin
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	218f      	movs	r1, #143	@ 0x8f
 8000a5e:	481f      	ldr	r0, [pc, #124]	@ (8000adc <MX_GPIO_Init+0x108>)
 8000a60:	f000 ff92 	bl	8001988 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a6a:	481d      	ldr	r0, [pc, #116]	@ (8000ae0 <MX_GPIO_Init+0x10c>)
 8000a6c:	f000 ff8c 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2140      	movs	r1, #64	@ 0x40
 8000a74:	481b      	ldr	r0, [pc, #108]	@ (8000ae4 <MX_GPIO_Init+0x110>)
 8000a76:	f000 ff87 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ledU_Pin ledR_Pin ledD_Pin ledL_Pin
                           PC7 */
  GPIO_InitStruct.Pin = ledU_Pin|ledR_Pin|ledD_Pin|ledL_Pin
 8000a7a:	238f      	movs	r3, #143	@ 0x8f
 8000a7c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4812      	ldr	r0, [pc, #72]	@ (8000adc <MX_GPIO_Init+0x108>)
 8000a92:	f000 fde5 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <MX_GPIO_Init+0x10c>)
 8000ab0:	f000 fdd6 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ab4:	2340      	movs	r3, #64	@ 0x40
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	@ (8000ae4 <MX_GPIO_Init+0x110>)
 8000acc:	f000 fdc8 	bl	8001660 <HAL_GPIO_Init>

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	@ 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020800 	.word	0x40020800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000aee:	4a13      	ldr	r2, [pc, #76]	@ (8000b3c <MX_I2C1_Init+0x54>)
 8000af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000af4:	4a12      	ldr	r2, [pc, #72]	@ (8000b40 <MX_I2C1_Init+0x58>)
 8000af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000b06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b12:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b18:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000b26:	f000 ff63 	bl	80019f0 <HAL_I2C_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b30:	f000 f97c 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000090 	.word	0x20000090
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	000186a0 	.word	0x000186a0

08000b44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a19      	ldr	r2, [pc, #100]	@ (8000bc8 <HAL_I2C_MspInit+0x84>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d12c      	bne.n	8000bc0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <HAL_I2C_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a17      	ldr	r2, [pc, #92]	@ (8000bcc <HAL_I2C_MspInit+0x88>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <HAL_I2C_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b88:	2312      	movs	r3, #18
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b94:	2304      	movs	r3, #4
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <HAL_I2C_MspInit+0x8c>)
 8000ba0:	f000 fd5e 	bl	8001660 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_I2C_MspInit+0x88>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <HAL_I2C_MspInit+0x88>)
 8000bae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <HAL_I2C_MspInit+0x88>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	@ 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40005400 	.word	0x40005400
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020400 	.word	0x40020400

08000bd4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bdc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000be0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d013      	beq.n	8000c14 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000bec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000bf0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000bf4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d00b      	beq.n	8000c14 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000bfc:	e000      	b.n	8000c00 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000bfe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c00:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0f9      	beq.n	8000bfe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c0a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c14:	687b      	ldr	r3, [r7, #4]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c28:	f000 fb72 	bl	8001310 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c2c:	f000 f874 	bl	8000d18 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c30:	f7ff fed0 	bl	80009d4 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000c34:	f000 f902 	bl	8000e3c <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8000c38:	f000 face 	bl	80011d8 <MX_USART2_UART_Init>
	MX_TIM10_Init();
 8000c3c:	f000 fa80 	bl	8001140 <MX_TIM10_Init>
	MX_I2C1_Init();
 8000c40:	f7ff ff52 	bl	8000ae8 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim10);
 8000c44:	482e      	ldr	r0, [pc, #184]	@ (8000d00 <main+0xdc>)
 8000c46:	f003 f907 	bl	8003e58 <HAL_TIM_Base_Start_IT>
	MPU9250_Init();
 8000c4a:	f7ff fca9 	bl	80005a0 <MPU9250_Init>
	ST7735_Init(0);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fe14 	bl	800087c <ST7735_Init>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		ST7735_SetRotation(0);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f7ff fe3d 	bl	80008d4 <ST7735_SetRotation>
		//testAll();
		x = MPU9250_ReadX();
 8000c5a:	f7ff fd1b 	bl	8000694 <MPU9250_ReadX>
 8000c5e:	eef0 7a40 	vmov.f32	s15, s0
 8000c62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c66:	ee17 3a90 	vmov	r3, s15
 8000c6a:	b21a      	sxth	r2, r3
 8000c6c:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <main+0xe0>)
 8000c6e:	801a      	strh	r2, [r3, #0]
		y = MPU9250_ReadY();
 8000c70:	f7ff fd34 	bl	80006dc <MPU9250_ReadY>
 8000c74:	eef0 7a40 	vmov.f32	s15, s0
 8000c78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c7c:	ee17 3a90 	vmov	r3, s15
 8000c80:	b21a      	sxth	r2, r3
 8000c82:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <main+0xe4>)
 8000c84:	801a      	strh	r2, [r3, #0]

		printf("X: %d Y: %d\n", x, y);
 8000c86:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <main+0xe0>)
 8000c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <main+0xe4>)
 8000c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c94:	461a      	mov	r2, r3
 8000c96:	481d      	ldr	r0, [pc, #116]	@ (8000d0c <main+0xe8>)
 8000c98:	f003 feb6 	bl	8004a08 <iprintf>

		if(x >= 5000)
 8000c9c:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <main+0xe0>)
 8000c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca2:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	dd04      	ble.n	8000cb4 <main+0x90>
		{
			HAL_GPIO_TogglePin(ledD_GPIO_Port, ledD_Pin);
 8000caa:	2104      	movs	r1, #4
 8000cac:	4818      	ldr	r0, [pc, #96]	@ (8000d10 <main+0xec>)
 8000cae:	f000 fe84 	bl	80019ba <HAL_GPIO_TogglePin>
 8000cb2:	e020      	b.n	8000cf6 <main+0xd2>
		}
		else if(x <= -5000)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <main+0xe0>)
 8000cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cba:	4a16      	ldr	r2, [pc, #88]	@ (8000d14 <main+0xf0>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	da04      	bge.n	8000cca <main+0xa6>
		{
			HAL_GPIO_TogglePin(ledU_GPIO_Port, ledU_Pin);
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4813      	ldr	r0, [pc, #76]	@ (8000d10 <main+0xec>)
 8000cc4:	f000 fe79 	bl	80019ba <HAL_GPIO_TogglePin>
 8000cc8:	e015      	b.n	8000cf6 <main+0xd2>
		}
		else if(y <= -5000)
 8000cca:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <main+0xe4>)
 8000ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd0:	4a10      	ldr	r2, [pc, #64]	@ (8000d14 <main+0xf0>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	da04      	bge.n	8000ce0 <main+0xbc>
		{
			HAL_GPIO_TogglePin(ledL_GPIO_Port, ledL_Pin);
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	480d      	ldr	r0, [pc, #52]	@ (8000d10 <main+0xec>)
 8000cda:	f000 fe6e 	bl	80019ba <HAL_GPIO_TogglePin>
 8000cde:	e00a      	b.n	8000cf6 <main+0xd2>
		}
		else if(y >= 5000)
 8000ce0:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <main+0xe4>)
 8000ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce6:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000cea:	4293      	cmp	r3, r2
 8000cec:	dd03      	ble.n	8000cf6 <main+0xd2>
		{
			HAL_GPIO_TogglePin(ledR_GPIO_Port, ledR_Pin);
 8000cee:	2102      	movs	r1, #2
 8000cf0:	4807      	ldr	r0, [pc, #28]	@ (8000d10 <main+0xec>)
 8000cf2:	f000 fe62 	bl	80019ba <HAL_GPIO_TogglePin>
		}

		HAL_Delay(500);
 8000cf6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cfa:	f000 fb7b 	bl	80013f4 <HAL_Delay>
		ST7735_SetRotation(0);
 8000cfe:	e7a9      	b.n	8000c54 <main+0x30>
 8000d00:	20000144 	.word	0x20000144
 8000d04:	200000e4 	.word	0x200000e4
 8000d08:	200000e6 	.word	0x200000e6
 8000d0c:	080058c4 	.word	0x080058c4
 8000d10:	40020800 	.word	0x40020800
 8000d14:	ffffec79 	.word	0xffffec79

08000d18 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b094      	sub	sp, #80	@ 0x50
 8000d1c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	2234      	movs	r2, #52	@ 0x34
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f003 ffb6 	bl	8004c98 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	4b2a      	ldr	r3, [pc, #168]	@ (8000dec <SystemClock_Config+0xd4>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d44:	4a29      	ldr	r2, [pc, #164]	@ (8000dec <SystemClock_Config+0xd4>)
 8000d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4c:	4b27      	ldr	r3, [pc, #156]	@ (8000dec <SystemClock_Config+0xd4>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d58:	2300      	movs	r3, #0
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	4b24      	ldr	r3, [pc, #144]	@ (8000df0 <SystemClock_Config+0xd8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d64:	4a22      	ldr	r2, [pc, #136]	@ (8000df0 <SystemClock_Config+0xd8>)
 8000d66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <SystemClock_Config+0xd8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d80:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d82:	2302      	movs	r3, #2
 8000d84:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d86:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 84;
 8000d90:	2354      	movs	r3, #84	@ 0x54
 8000d92:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 fabf 	bl	8003328 <HAL_RCC_OscConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000db0:	f000 f83c 	bl	8000e2c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db4:	230f      	movs	r3, #15
 8000db6:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db8:	2302      	movs	r3, #2
 8000dba:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dca:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	2102      	movs	r1, #2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f001 ff5e 	bl	8002c94 <HAL_RCC_ClockConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000dde:	f000 f825 	bl	8000e2c <Error_Handler>
	}
}
 8000de2:	bf00      	nop
 8000de4:	3750      	adds	r7, #80	@ 0x50
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40007000 	.word	0x40007000

08000df4 <_write>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);

int _write(int file, char *ptr, int len)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	e009      	b.n	8000e1a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1c5a      	adds	r2, r3, #1
 8000e0a:	60ba      	str	r2, [r7, #8]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fee0 	bl	8000bd4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	3301      	adds	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	dbf1      	blt.n	8000e06 <_write+0x12>
	}
	return len;
 8000e22:	687b      	ldr	r3, [r7, #4]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e40:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <MX_SPI1_Init+0x68>)
 8000e42:	4a19      	ldr	r2, [pc, #100]	@ (8000ea8 <MX_SPI1_Init+0x6c>)
 8000e44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e46:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <MX_SPI1_Init+0x68>)
 8000e48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000e4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <MX_SPI1_Init+0x68>)
 8000e50:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e54:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e56:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <MX_SPI1_Init+0x68>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <MX_SPI1_Init+0x68>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e62:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <MX_SPI1_Init+0x68>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <MX_SPI1_Init+0x68>)
 8000e6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e6e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <MX_SPI1_Init+0x68>)
 8000e72:	2210      	movs	r2, #16
 8000e74:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <MX_SPI1_Init+0x68>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <MX_SPI1_Init+0x68>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e82:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <MX_SPI1_Init+0x68>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <MX_SPI1_Init+0x68>)
 8000e8a:	220a      	movs	r2, #10
 8000e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <MX_SPI1_Init+0x68>)
 8000e90:	f002 fce8 	bl	8003864 <HAL_SPI_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000e9a:	f7ff ffc7 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200000e8 	.word	0x200000e8
 8000ea8:	40013000 	.word	0x40013000

08000eac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	@ 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a19      	ldr	r2, [pc, #100]	@ (8000f30 <HAL_SPI_MspInit+0x84>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d12b      	bne.n	8000f26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b18      	ldr	r3, [pc, #96]	@ (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	4a17      	ldr	r2, [pc, #92]	@ (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ed8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a10      	ldr	r2, [pc, #64]	@ (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <HAL_SPI_MspInit+0x88>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f06:	23a0      	movs	r3, #160	@ 0xa0
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f12:	2303      	movs	r3, #3
 8000f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f16:	2305      	movs	r3, #5
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <HAL_SPI_MspInit+0x8c>)
 8000f22:	f000 fb9d 	bl	8001660 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f26:	bf00      	nop
 8000f28:	3728      	adds	r7, #40	@ 0x28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40013000 	.word	0x40013000
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000

08000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <HAL_MspInit+0x4c>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f88 <HAL_MspInit+0x4c>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f52:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <HAL_MspInit+0x4c>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <HAL_MspInit+0x4c>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	4a08      	ldr	r2, [pc, #32]	@ (8000f88 <HAL_MspInit+0x4c>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_MspInit+0x4c>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	bf00      	nop
 8000fa0:	e7fd      	b.n	8000f9e <HardFault_Handler+0x4>

08000fa2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa6:	bf00      	nop
 8000fa8:	e7fd      	b.n	8000fa6 <MemManage_Handler+0x4>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fae:	bf00      	nop
 8000fb0:	e7fd      	b.n	8000fae <BusFault_Handler+0x4>

08000fb2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb6:	bf00      	nop
 8000fb8:	e7fd      	b.n	8000fb6 <UsageFault_Handler+0x4>

08000fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 f9e4 	bl	80013b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000ff4:	4802      	ldr	r0, [pc, #8]	@ (8001000 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ff6:	f002 ff9f 	bl	8003f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000144 	.word	0x20000144

08001004 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	e00a      	b.n	800102c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001016:	f3af 8000 	nop.w
 800101a:	4601      	mov	r1, r0
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	60ba      	str	r2, [r7, #8]
 8001022:	b2ca      	uxtb	r2, r1
 8001024:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	429a      	cmp	r2, r3
 8001032:	dbf0      	blt.n	8001016 <_read+0x12>
	}

return len;
 8001034:	687b      	ldr	r3, [r7, #4]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <_close>:
	}
	return len;
}

int _close(int file)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
	return -1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001066:	605a      	str	r2, [r3, #4]
	return 0;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_isatty>:

int _isatty(int file)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
	return 1;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
	return 0;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b0:	4a14      	ldr	r2, [pc, #80]	@ (8001104 <_sbrk+0x5c>)
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <_sbrk+0x60>)
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010bc:	4b13      	ldr	r3, [pc, #76]	@ (800110c <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c4:	4b11      	ldr	r3, [pc, #68]	@ (800110c <_sbrk+0x64>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	@ (8001110 <_sbrk+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d207      	bcs.n	80010e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d8:	f003 fe2c 	bl	8004d34 <__errno>
 80010dc:	4603      	mov	r3, r0
 80010de:	220c      	movs	r2, #12
 80010e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	e009      	b.n	80010fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e8:	4b08      	ldr	r3, [pc, #32]	@ (800110c <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a05      	ldr	r2, [pc, #20]	@ (800110c <_sbrk+0x64>)
 80010f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20020000 	.word	0x20020000
 8001108:	00000400 	.word	0x00000400
 800110c:	20000140 	.word	0x20000140
 8001110:	20000328 	.word	0x20000328

08001114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <SystemInit+0x28>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111e:	4a07      	ldr	r2, [pc, #28]	@ (800113c <SystemInit+0x28>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <SystemInit+0x28>)
 800112a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800112e:	609a      	str	r2, [r3, #8]
#endif
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <MX_TIM10_Init+0x40>)
 8001146:	4a0f      	ldr	r2, [pc, #60]	@ (8001184 <MX_TIM10_Init+0x44>)
 8001148:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8399;
 800114a:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <MX_TIM10_Init+0x40>)
 800114c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001150:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <MX_TIM10_Init+0x40>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_TIM10_Init+0x40>)
 800115a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800115e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <MX_TIM10_Init+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_TIM10_Init+0x40>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_TIM10_Init+0x40>)
 800116e:	f002 fe23 	bl	8003db8 <HAL_TIM_Base_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001178:	f7ff fe58 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000144 	.word	0x20000144
 8001184:	40014400 	.word	0x40014400

08001188 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0e      	ldr	r2, [pc, #56]	@ (80011d0 <HAL_TIM_Base_MspInit+0x48>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d115      	bne.n	80011c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <HAL_TIM_Base_MspInit+0x4c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	4a0c      	ldr	r2, [pc, #48]	@ (80011d4 <HAL_TIM_Base_MspInit+0x4c>)
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011aa:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <HAL_TIM_Base_MspInit+0x4c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2019      	movs	r0, #25
 80011bc:	f000 fa19 	bl	80015f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011c0:	2019      	movs	r0, #25
 80011c2:	f000 fa32 	bl	800162a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40014400 	.word	0x40014400
 80011d4:	40023800 	.word	0x40023800

080011d8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011de:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <MX_USART2_UART_Init+0x50>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 8001210:	f003 f874 	bl	80042fc <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800121a:	f7ff fe07 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000018c 	.word	0x2000018c
 8001228:	40004400 	.word	0x40004400

0800122c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	@ 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a19      	ldr	r2, [pc, #100]	@ (80012b0 <HAL_UART_MspInit+0x84>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d12b      	bne.n	80012a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <HAL_UART_MspInit+0x88>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	4a17      	ldr	r2, [pc, #92]	@ (80012b4 <HAL_UART_MspInit+0x88>)
 8001258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800125c:	6413      	str	r3, [r2, #64]	@ 0x40
 800125e:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <HAL_UART_MspInit+0x88>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <HAL_UART_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a10      	ldr	r2, [pc, #64]	@ (80012b4 <HAL_UART_MspInit+0x88>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <HAL_UART_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001286:	230c      	movs	r3, #12
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001296:	2307      	movs	r3, #7
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <HAL_UART_MspInit+0x8c>)
 80012a2:	f000 f9dd 	bl	8001660 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	@ 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40004400 	.word	0x40004400
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000

080012bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012c2:	e003      	b.n	80012cc <LoopCopyDataInit>

080012c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012c4:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ca:	3104      	adds	r1, #4

080012cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012cc:	480b      	ldr	r0, [pc, #44]	@ (80012fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012d4:	d3f6      	bcc.n	80012c4 <CopyDataInit>
  ldr  r2, =_sbss
 80012d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012d8:	e002      	b.n	80012e0 <LoopFillZerobss>

080012da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012dc:	f842 3b04 	str.w	r3, [r2], #4

080012e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012e0:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012e4:	d3f9      	bcc.n	80012da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012e6:	f7ff ff15 	bl	8001114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ea:	f003 fd29 	bl	8004d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ee:	f7ff fc99 	bl	8000c24 <main>
  bx  lr    
 80012f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012f8:	080059a4 	.word	0x080059a4
  ldr  r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001300:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8001304:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8001308:	20000324 	.word	0x20000324

0800130c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC_IRQHandler>
	...

08001310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001314:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0d      	ldr	r2, [pc, #52]	@ (8001350 <HAL_Init+0x40>)
 800131a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800131e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001320:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <HAL_Init+0x40>)
 8001326:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800132a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <HAL_Init+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a07      	ldr	r2, [pc, #28]	@ (8001350 <HAL_Init+0x40>)
 8001332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001336:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001338:	2003      	movs	r0, #3
 800133a:	f000 f94f 	bl	80015dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133e:	2000      	movs	r0, #0
 8001340:	f000 f808 	bl	8001354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001344:	f7ff fdfa 	bl	8000f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023c00 	.word	0x40023c00

08001354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_InitTick+0x54>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_InitTick+0x58>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800136a:	fbb3 f3f1 	udiv	r3, r3, r1
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f967 	bl	8001646 <HAL_SYSTICK_Config>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e00e      	b.n	80013a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b0f      	cmp	r3, #15
 8001386:	d80a      	bhi.n	800139e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001388:	2200      	movs	r2, #0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f000 f92f 	bl	80015f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001394:	4a06      	ldr	r2, [pc, #24]	@ (80013b0 <HAL_InitTick+0x5c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e000      	b.n	80013a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000004 	.word	0x20000004

080013b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_IncTick+0x20>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_IncTick+0x24>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a04      	ldr	r2, [pc, #16]	@ (80013d8 <HAL_IncTick+0x24>)
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000008 	.word	0x20000008
 80013d8:	200001d4 	.word	0x200001d4

080013dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return uwTick;
 80013e0:	4b03      	ldr	r3, [pc, #12]	@ (80013f0 <HAL_GetTick+0x14>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	200001d4 	.word	0x200001d4

080013f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff ffee 	bl	80013dc <HAL_GetTick>
 8001400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140c:	d005      	beq.n	800141a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140e:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <HAL_Delay+0x44>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800141a:	bf00      	nop
 800141c:	f7ff ffde 	bl	80013dc <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	d8f7      	bhi.n	800141c <HAL_Delay+0x28>
  {
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000008 	.word	0x20000008

0800143c <__NVIC_SetPriorityGrouping>:
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001464:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800146c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146e:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	60d3      	str	r3, [r2, #12]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_GetPriorityGrouping>:
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001488:	4b04      	ldr	r3, [pc, #16]	@ (800149c <__NVIC_GetPriorityGrouping+0x18>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	0a1b      	lsrs	r3, r3, #8
 800148e:	f003 0307 	and.w	r3, r3, #7
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_EnableIRQ>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	db0b      	blt.n	80014ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	f003 021f 	and.w	r2, r3, #31
 80014b8:	4907      	ldr	r1, [pc, #28]	@ (80014d8 <__NVIC_EnableIRQ+0x38>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	2001      	movs	r0, #1
 80014c2:	fa00 f202 	lsl.w	r2, r0, r2
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	@ (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	@ (800152c <__NVIC_SetPriority+0x50>)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	@ 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	@ 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <SysTick_Config>:
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015a8:	d301      	bcc.n	80015ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00f      	b.n	80015ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <SysTick_Config+0x40>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b6:	210f      	movs	r1, #15
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f7ff ff8e 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <SysTick_Config+0x40>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c6:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <SysTick_Config+0x40>)
 80015c8:	2207      	movs	r2, #7
 80015ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	e000e010 	.word	0xe000e010

080015dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff29 	bl	800143c <__NVIC_SetPriorityGrouping>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001604:	f7ff ff3e 	bl	8001484 <__NVIC_GetPriorityGrouping>
 8001608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	6978      	ldr	r0, [r7, #20]
 8001610:	f7ff ff8e 	bl	8001530 <NVIC_EncodePriority>
 8001614:	4602      	mov	r2, r0
 8001616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff5d 	bl	80014dc <__NVIC_SetPriority>
}
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff31 	bl	80014a0 <__NVIC_EnableIRQ>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffa2 	bl	8001598 <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	@ 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	e165      	b.n	8001948 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800167c:	2201      	movs	r2, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	429a      	cmp	r2, r3
 8001696:	f040 8154 	bne.w	8001942 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d005      	beq.n	80016b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d130      	bne.n	8001714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	2203      	movs	r2, #3
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e8:	2201      	movs	r2, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f003 0201 	and.w	r2, r3, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b03      	cmp	r3, #3
 800171e:	d017      	beq.n	8001750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d123      	bne.n	80017a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	08da      	lsrs	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3208      	adds	r2, #8
 8001764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220f      	movs	r2, #15
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	08da      	lsrs	r2, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3208      	adds	r2, #8
 800179e:	69b9      	ldr	r1, [r7, #24]
 80017a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0203 	and.w	r2, r3, #3
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80ae 	beq.w	8001942 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001960 <HAL_GPIO_Init+0x300>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001960 <HAL_GPIO_Init+0x300>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001960 <HAL_GPIO_Init+0x300>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001802:	4a58      	ldr	r2, [pc, #352]	@ (8001964 <HAL_GPIO_Init+0x304>)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	220f      	movs	r2, #15
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4f      	ldr	r2, [pc, #316]	@ (8001968 <HAL_GPIO_Init+0x308>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d025      	beq.n	800187a <HAL_GPIO_Init+0x21a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4e      	ldr	r2, [pc, #312]	@ (800196c <HAL_GPIO_Init+0x30c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d01f      	beq.n	8001876 <HAL_GPIO_Init+0x216>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4d      	ldr	r2, [pc, #308]	@ (8001970 <HAL_GPIO_Init+0x310>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d019      	beq.n	8001872 <HAL_GPIO_Init+0x212>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4c      	ldr	r2, [pc, #304]	@ (8001974 <HAL_GPIO_Init+0x314>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d013      	beq.n	800186e <HAL_GPIO_Init+0x20e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4b      	ldr	r2, [pc, #300]	@ (8001978 <HAL_GPIO_Init+0x318>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00d      	beq.n	800186a <HAL_GPIO_Init+0x20a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4a      	ldr	r2, [pc, #296]	@ (800197c <HAL_GPIO_Init+0x31c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d007      	beq.n	8001866 <HAL_GPIO_Init+0x206>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a49      	ldr	r2, [pc, #292]	@ (8001980 <HAL_GPIO_Init+0x320>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d101      	bne.n	8001862 <HAL_GPIO_Init+0x202>
 800185e:	2306      	movs	r3, #6
 8001860:	e00c      	b.n	800187c <HAL_GPIO_Init+0x21c>
 8001862:	2307      	movs	r3, #7
 8001864:	e00a      	b.n	800187c <HAL_GPIO_Init+0x21c>
 8001866:	2305      	movs	r3, #5
 8001868:	e008      	b.n	800187c <HAL_GPIO_Init+0x21c>
 800186a:	2304      	movs	r3, #4
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x21c>
 800186e:	2303      	movs	r3, #3
 8001870:	e004      	b.n	800187c <HAL_GPIO_Init+0x21c>
 8001872:	2302      	movs	r3, #2
 8001874:	e002      	b.n	800187c <HAL_GPIO_Init+0x21c>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_GPIO_Init+0x21c>
 800187a:	2300      	movs	r3, #0
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	f002 0203 	and.w	r2, r2, #3
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	4093      	lsls	r3, r2
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800188c:	4935      	ldr	r1, [pc, #212]	@ (8001964 <HAL_GPIO_Init+0x304>)
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189a:	4b3a      	ldr	r3, [pc, #232]	@ (8001984 <HAL_GPIO_Init+0x324>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018be:	4a31      	ldr	r2, [pc, #196]	@ (8001984 <HAL_GPIO_Init+0x324>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001984 <HAL_GPIO_Init+0x324>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e8:	4a26      	ldr	r2, [pc, #152]	@ (8001984 <HAL_GPIO_Init+0x324>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ee:	4b25      	ldr	r3, [pc, #148]	@ (8001984 <HAL_GPIO_Init+0x324>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001912:	4a1c      	ldr	r2, [pc, #112]	@ (8001984 <HAL_GPIO_Init+0x324>)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001918:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <HAL_GPIO_Init+0x324>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800193c:	4a11      	ldr	r2, [pc, #68]	@ (8001984 <HAL_GPIO_Init+0x324>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3301      	adds	r3, #1
 8001946:	61fb      	str	r3, [r7, #28]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2b0f      	cmp	r3, #15
 800194c:	f67f ae96 	bls.w	800167c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3724      	adds	r7, #36	@ 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40013800 	.word	0x40013800
 8001968:	40020000 	.word	0x40020000
 800196c:	40020400 	.word	0x40020400
 8001970:	40020800 	.word	0x40020800
 8001974:	40020c00 	.word	0x40020c00
 8001978:	40021000 	.word	0x40021000
 800197c:	40021400 	.word	0x40021400
 8001980:	40021800 	.word	0x40021800
 8001984:	40013c00 	.word	0x40013c00

08001988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
 8001994:	4613      	mov	r3, r2
 8001996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001998:	787b      	ldrb	r3, [r7, #1]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019a4:	e003      	b.n	80019ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	041a      	lsls	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	619a      	str	r2, [r3, #24]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019cc:	887a      	ldrh	r2, [r7, #2]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4013      	ands	r3, r2
 80019d2:	041a      	lsls	r2, r3, #16
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	400b      	ands	r3, r1
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	619a      	str	r2, [r3, #24]
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e12b      	b.n	8001c5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d106      	bne.n	8001a1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff f894 	bl	8000b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2224      	movs	r2, #36	@ 0x24
 8001a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a54:	f001 fa10 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 8001a58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4a81      	ldr	r2, [pc, #516]	@ (8001c64 <HAL_I2C_Init+0x274>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d807      	bhi.n	8001a74 <HAL_I2C_Init+0x84>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4a80      	ldr	r2, [pc, #512]	@ (8001c68 <HAL_I2C_Init+0x278>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	bf94      	ite	ls
 8001a6c:	2301      	movls	r3, #1
 8001a6e:	2300      	movhi	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	e006      	b.n	8001a82 <HAL_I2C_Init+0x92>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4a7d      	ldr	r2, [pc, #500]	@ (8001c6c <HAL_I2C_Init+0x27c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	bf94      	ite	ls
 8001a7c:	2301      	movls	r3, #1
 8001a7e:	2300      	movhi	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0e7      	b.n	8001c5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4a78      	ldr	r2, [pc, #480]	@ (8001c70 <HAL_I2C_Init+0x280>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0c9b      	lsrs	r3, r3, #18
 8001a94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a6a      	ldr	r2, [pc, #424]	@ (8001c64 <HAL_I2C_Init+0x274>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d802      	bhi.n	8001ac4 <HAL_I2C_Init+0xd4>
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	e009      	b.n	8001ad8 <HAL_I2C_Init+0xe8>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001aca:	fb02 f303 	mul.w	r3, r2, r3
 8001ace:	4a69      	ldr	r2, [pc, #420]	@ (8001c74 <HAL_I2C_Init+0x284>)
 8001ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad4:	099b      	lsrs	r3, r3, #6
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	430b      	orrs	r3, r1
 8001ade:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001aea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	495c      	ldr	r1, [pc, #368]	@ (8001c64 <HAL_I2C_Init+0x274>)
 8001af4:	428b      	cmp	r3, r1
 8001af6:	d819      	bhi.n	8001b2c <HAL_I2C_Init+0x13c>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1e59      	subs	r1, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b06:	1c59      	adds	r1, r3, #1
 8001b08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b0c:	400b      	ands	r3, r1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00a      	beq.n	8001b28 <HAL_I2C_Init+0x138>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1e59      	subs	r1, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b20:	3301      	adds	r3, #1
 8001b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b26:	e051      	b.n	8001bcc <HAL_I2C_Init+0x1dc>
 8001b28:	2304      	movs	r3, #4
 8001b2a:	e04f      	b.n	8001bcc <HAL_I2C_Init+0x1dc>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d111      	bne.n	8001b58 <HAL_I2C_Init+0x168>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1e58      	subs	r0, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	440b      	add	r3, r1
 8001b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf0c      	ite	eq
 8001b50:	2301      	moveq	r3, #1
 8001b52:	2300      	movne	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	e012      	b.n	8001b7e <HAL_I2C_Init+0x18e>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1e58      	subs	r0, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6859      	ldr	r1, [r3, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	0099      	lsls	r1, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b6e:	3301      	adds	r3, #1
 8001b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bf0c      	ite	eq
 8001b78:	2301      	moveq	r3, #1
 8001b7a:	2300      	movne	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_I2C_Init+0x196>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e022      	b.n	8001bcc <HAL_I2C_Init+0x1dc>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10e      	bne.n	8001bac <HAL_I2C_Init+0x1bc>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1e58      	subs	r0, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6859      	ldr	r1, [r3, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	440b      	add	r3, r1
 8001b9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001baa:	e00f      	b.n	8001bcc <HAL_I2C_Init+0x1dc>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1e58      	subs	r0, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6859      	ldr	r1, [r3, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	0099      	lsls	r1, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	6809      	ldr	r1, [r1, #0]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69da      	ldr	r2, [r3, #28]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001bfa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6911      	ldr	r1, [r2, #16]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68d2      	ldr	r2, [r2, #12]
 8001c06:	4311      	orrs	r1, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	000186a0 	.word	0x000186a0
 8001c68:	001e847f 	.word	0x001e847f
 8001c6c:	003d08ff 	.word	0x003d08ff
 8001c70:	431bde83 	.word	0x431bde83
 8001c74:	10624dd3 	.word	0x10624dd3

08001c78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	4608      	mov	r0, r1
 8001c82:	4611      	mov	r1, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	817b      	strh	r3, [r7, #10]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	813b      	strh	r3, [r7, #8]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c92:	f7ff fba3 	bl	80013dc <HAL_GetTick>
 8001c96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	f040 80d9 	bne.w	8001e58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2319      	movs	r3, #25
 8001cac:	2201      	movs	r2, #1
 8001cae:	496d      	ldr	r1, [pc, #436]	@ (8001e64 <HAL_I2C_Mem_Write+0x1ec>)
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 fdb9 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e0cc      	b.n	8001e5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_I2C_Mem_Write+0x56>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e0c5      	b.n	8001e5a <HAL_I2C_Mem_Write+0x1e2>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d007      	beq.n	8001cf4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2221      	movs	r2, #33	@ 0x21
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2240      	movs	r2, #64	@ 0x40
 8001d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6a3a      	ldr	r2, [r7, #32]
 8001d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4a4d      	ldr	r2, [pc, #308]	@ (8001e68 <HAL_I2C_Mem_Write+0x1f0>)
 8001d34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d36:	88f8      	ldrh	r0, [r7, #6]
 8001d38:	893a      	ldrh	r2, [r7, #8]
 8001d3a:	8979      	ldrh	r1, [r7, #10]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	4603      	mov	r3, r0
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 fbf0 	bl	800252c <I2C_RequestMemoryWrite>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d052      	beq.n	8001df8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e081      	b.n	8001e5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 fe7e 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00d      	beq.n	8001d82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d107      	bne.n	8001d7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e06b      	b.n	8001e5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d11b      	bne.n	8001df8 <HAL_I2C_Mem_Write+0x180>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d017      	beq.n	8001df8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1aa      	bne.n	8001d56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 fe71 	bl	8002aec <I2C_WaitOnBTFFlagUntilTimeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00d      	beq.n	8001e2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d107      	bne.n	8001e28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e016      	b.n	8001e5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e000      	b.n	8001e5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
  }
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	00100002 	.word	0x00100002
 8001e68:	ffff0000 	.word	0xffff0000

08001e6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	@ 0x30
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	4608      	mov	r0, r1
 8001e76:	4611      	mov	r1, r2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	817b      	strh	r3, [r7, #10]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	813b      	strh	r3, [r7, #8]
 8001e82:	4613      	mov	r3, r2
 8001e84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e86:	f7ff faa9 	bl	80013dc <HAL_GetTick>
 8001e8a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	f040 8214 	bne.w	80022c2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2319      	movs	r3, #25
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	497b      	ldr	r1, [pc, #492]	@ (8002090 <HAL_I2C_Mem_Read+0x224>)
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 fcbf 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e207      	b.n	80022c4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_I2C_Mem_Read+0x56>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e200      	b.n	80022c4 <HAL_I2C_Mem_Read+0x458>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d007      	beq.n	8001ee8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ef6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2222      	movs	r2, #34	@ 0x22
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2240      	movs	r2, #64	@ 0x40
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4a5b      	ldr	r2, [pc, #364]	@ (8002094 <HAL_I2C_Mem_Read+0x228>)
 8001f28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f2a:	88f8      	ldrh	r0, [r7, #6]
 8001f2c:	893a      	ldrh	r2, [r7, #8]
 8001f2e:	8979      	ldrh	r1, [r7, #10]
 8001f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	4603      	mov	r3, r0
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 fb8c 	bl	8002658 <I2C_RequestMemoryRead>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e1bc      	b.n	80022c4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d113      	bne.n	8001f7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	623b      	str	r3, [r7, #32]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	623b      	str	r3, [r7, #32]
 8001f66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e190      	b.n	800229c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d11b      	bne.n	8001fba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	e170      	b.n	800229c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d11b      	bne.n	8001ffa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fd0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fe0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	61bb      	str	r3, [r7, #24]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	e150      	b.n	800229c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002010:	e144      	b.n	800229c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002016:	2b03      	cmp	r3, #3
 8002018:	f200 80f1 	bhi.w	80021fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002020:	2b01      	cmp	r3, #1
 8002022:	d123      	bne.n	800206c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002026:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 fda7 	bl	8002b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e145      	b.n	80022c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002060:	b29b      	uxth	r3, r3
 8002062:	3b01      	subs	r3, #1
 8002064:	b29a      	uxth	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800206a:	e117      	b.n	800229c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002070:	2b02      	cmp	r3, #2
 8002072:	d14e      	bne.n	8002112 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800207a:	2200      	movs	r2, #0
 800207c:	4906      	ldr	r1, [pc, #24]	@ (8002098 <HAL_I2C_Mem_Read+0x22c>)
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 fbd2 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e11a      	b.n	80022c4 <HAL_I2C_Mem_Read+0x458>
 800208e:	bf00      	nop
 8002090:	00100002 	.word	0x00100002
 8002094:	ffff0000 	.word	0xffff0000
 8002098:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002110:	e0c4      	b.n	800229c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002118:	2200      	movs	r2, #0
 800211a:	496c      	ldr	r1, [pc, #432]	@ (80022cc <HAL_I2C_Mem_Read+0x460>)
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 fb83 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0cb      	b.n	80022c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800213a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002174:	2200      	movs	r2, #0
 8002176:	4955      	ldr	r1, [pc, #340]	@ (80022cc <HAL_I2C_Mem_Read+0x460>)
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 fb55 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e09d      	b.n	80022c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002196:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021fc:	e04e      	b.n	800229c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002200:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fcba 	bl	8002b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e058      	b.n	80022c4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b04      	cmp	r3, #4
 8002250:	d124      	bne.n	800229c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002256:	2b03      	cmp	r3, #3
 8002258:	d107      	bne.n	800226a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002268:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f47f aeb6 	bne.w	8002012 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80022c2:	2302      	movs	r3, #2
  }
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3728      	adds	r7, #40	@ 0x28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	00010004 	.word	0x00010004

080022d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08a      	sub	sp, #40	@ 0x28
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	460b      	mov	r3, r1
 80022de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff f87c 	bl	80013dc <HAL_GetTick>
 80022e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	f040 8111 	bne.w	800251a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2319      	movs	r3, #25
 80022fe:	2201      	movs	r2, #1
 8002300:	4988      	ldr	r1, [pc, #544]	@ (8002524 <HAL_I2C_IsDeviceReady+0x254>)
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fa90 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800230e:	2302      	movs	r3, #2
 8002310:	e104      	b.n	800251c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_I2C_IsDeviceReady+0x50>
 800231c:	2302      	movs	r3, #2
 800231e:	e0fd      	b.n	800251c <HAL_I2C_IsDeviceReady+0x24c>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b01      	cmp	r3, #1
 8002334:	d007      	beq.n	8002346 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0201 	orr.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002354:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2224      	movs	r2, #36	@ 0x24
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4a70      	ldr	r2, [pc, #448]	@ (8002528 <HAL_I2C_IsDeviceReady+0x258>)
 8002368:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002378:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2200      	movs	r2, #0
 8002382:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fa4e 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00d      	beq.n	80023ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023a0:	d103      	bne.n	80023aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023a8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e0b6      	b.n	800251c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023ae:	897b      	ldrh	r3, [r7, #10]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80023bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80023be:	f7ff f80d 	bl	80013dc <HAL_GetTick>
 80023c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	bf0c      	ite	eq
 80023d2:	2301      	moveq	r3, #1
 80023d4:	2300      	movne	r3, #0
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023e8:	bf0c      	ite	eq
 80023ea:	2301      	moveq	r3, #1
 80023ec:	2300      	movne	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023f2:	e025      	b.n	8002440 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023f4:	f7fe fff2 	bl	80013dc <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d302      	bcc.n	800240a <HAL_I2C_IsDeviceReady+0x13a>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d103      	bne.n	8002412 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	22a0      	movs	r2, #160	@ 0xa0
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b02      	cmp	r3, #2
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2ba0      	cmp	r3, #160	@ 0xa0
 800244a:	d005      	beq.n	8002458 <HAL_I2C_IsDeviceReady+0x188>
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d102      	bne.n	8002458 <HAL_I2C_IsDeviceReady+0x188>
 8002452:	7dbb      	ldrb	r3, [r7, #22]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0cd      	beq.n	80023f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b02      	cmp	r3, #2
 800246c:	d129      	bne.n	80024c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800247c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	2319      	movs	r3, #25
 800249a:	2201      	movs	r2, #1
 800249c:	4921      	ldr	r1, [pc, #132]	@ (8002524 <HAL_I2C_IsDeviceReady+0x254>)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f9c2 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e036      	b.n	800251c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e02c      	b.n	800251c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2319      	movs	r3, #25
 80024e2:	2201      	movs	r2, #1
 80024e4:	490f      	ldr	r1, [pc, #60]	@ (8002524 <HAL_I2C_IsDeviceReady+0x254>)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f99e 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e012      	b.n	800251c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	f4ff af32 	bcc.w	800236a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800251a:	2302      	movs	r3, #2
  }
}
 800251c:	4618      	mov	r0, r3
 800251e:	3720      	adds	r7, #32
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	00100002 	.word	0x00100002
 8002528:	ffff0000 	.word	0xffff0000

0800252c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	4608      	mov	r0, r1
 8002536:	4611      	mov	r1, r2
 8002538:	461a      	mov	r2, r3
 800253a:	4603      	mov	r3, r0
 800253c:	817b      	strh	r3, [r7, #10]
 800253e:	460b      	mov	r3, r1
 8002540:	813b      	strh	r3, [r7, #8]
 8002542:	4613      	mov	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002554:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	2200      	movs	r2, #0
 800255e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f960 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00d      	beq.n	800258a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800257c:	d103      	bne.n	8002586 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002584:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e05f      	b.n	800264a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800258a:	897b      	ldrh	r3, [r7, #10]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002598:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	6a3a      	ldr	r2, [r7, #32]
 800259e:	492d      	ldr	r1, [pc, #180]	@ (8002654 <I2C_RequestMemoryWrite+0x128>)
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f9bb 	bl	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e04c      	b.n	800264a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c8:	6a39      	ldr	r1, [r7, #32]
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fa46 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00d      	beq.n	80025f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d107      	bne.n	80025ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e02b      	b.n	800264a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d105      	bne.n	8002604 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025f8:	893b      	ldrh	r3, [r7, #8]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	611a      	str	r2, [r3, #16]
 8002602:	e021      	b.n	8002648 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002604:	893b      	ldrh	r3, [r7, #8]
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	b29b      	uxth	r3, r3
 800260a:	b2da      	uxtb	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002614:	6a39      	ldr	r1, [r7, #32]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fa20 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00d      	beq.n	800263e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	2b04      	cmp	r3, #4
 8002628:	d107      	bne.n	800263a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002638:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e005      	b.n	800264a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800263e:	893b      	ldrh	r3, [r7, #8]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	00010002 	.word	0x00010002

08002658 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	4608      	mov	r0, r1
 8002662:	4611      	mov	r1, r2
 8002664:	461a      	mov	r2, r3
 8002666:	4603      	mov	r3, r0
 8002668:	817b      	strh	r3, [r7, #10]
 800266a:	460b      	mov	r3, r1
 800266c:	813b      	strh	r3, [r7, #8]
 800266e:	4613      	mov	r3, r2
 8002670:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002680:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002690:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	2200      	movs	r2, #0
 800269a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f8c2 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00d      	beq.n	80026c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026b8:	d103      	bne.n	80026c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e0aa      	b.n	800281c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026c6:	897b      	ldrh	r3, [r7, #10]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	6a3a      	ldr	r2, [r7, #32]
 80026da:	4952      	ldr	r1, [pc, #328]	@ (8002824 <I2C_RequestMemoryRead+0x1cc>)
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f91d 	bl	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e097      	b.n	800281c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002704:	6a39      	ldr	r1, [r7, #32]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f9a8 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00d      	beq.n	800272e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	2b04      	cmp	r3, #4
 8002718:	d107      	bne.n	800272a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002728:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e076      	b.n	800281c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d105      	bne.n	8002740 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002734:	893b      	ldrh	r3, [r7, #8]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	611a      	str	r2, [r3, #16]
 800273e:	e021      	b.n	8002784 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002740:	893b      	ldrh	r3, [r7, #8]
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	b29b      	uxth	r3, r3
 8002746:	b2da      	uxtb	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800274e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002750:	6a39      	ldr	r1, [r7, #32]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f982 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00d      	beq.n	800277a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	2b04      	cmp	r3, #4
 8002764:	d107      	bne.n	8002776 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002774:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e050      	b.n	800281c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800277a:	893b      	ldrh	r3, [r7, #8]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002786:	6a39      	ldr	r1, [r7, #32]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f967 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00d      	beq.n	80027b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	2b04      	cmp	r3, #4
 800279a:	d107      	bne.n	80027ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e035      	b.n	800281c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f82b 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00d      	beq.n	80027f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027e6:	d103      	bne.n	80027f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e013      	b.n	800281c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027f4:	897b      	ldrh	r3, [r7, #10]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	6a3a      	ldr	r2, [r7, #32]
 8002808:	4906      	ldr	r1, [pc, #24]	@ (8002824 <I2C_RequestMemoryRead+0x1cc>)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f886 	bl	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	00010002 	.word	0x00010002

08002828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002838:	e048      	b.n	80028cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d044      	beq.n	80028cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002842:	f7fe fdcb 	bl	80013dc <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d302      	bcc.n	8002858 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d139      	bne.n	80028cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	0c1b      	lsrs	r3, r3, #16
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d10d      	bne.n	800287e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	43da      	mvns	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4013      	ands	r3, r2
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	e00c      	b.n	8002898 <I2C_WaitOnFlagUntilTimeout+0x70>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	43da      	mvns	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	4013      	ands	r3, r2
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	429a      	cmp	r2, r3
 800289c:	d116      	bne.n	80028cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b8:	f043 0220 	orr.w	r2, r3, #32
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e023      	b.n	8002914 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	0c1b      	lsrs	r3, r3, #16
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d10d      	bne.n	80028f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	43da      	mvns	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4013      	ands	r3, r2
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	e00c      	b.n	800290c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	43da      	mvns	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	4013      	ands	r3, r2
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf0c      	ite	eq
 8002904:	2301      	moveq	r3, #1
 8002906:	2300      	movne	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	429a      	cmp	r2, r3
 8002910:	d093      	beq.n	800283a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800292a:	e071      	b.n	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800293a:	d123      	bne.n	8002984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800294a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002954:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002970:	f043 0204 	orr.w	r2, r3, #4
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e067      	b.n	8002a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298a:	d041      	beq.n	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298c:	f7fe fd26 	bl	80013dc <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d302      	bcc.n	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d136      	bne.n	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d10c      	bne.n	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	43da      	mvns	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4013      	ands	r3, r2
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bf14      	ite	ne
 80029be:	2301      	movne	r3, #1
 80029c0:	2300      	moveq	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	e00b      	b.n	80029de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	43da      	mvns	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4013      	ands	r3, r2
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d016      	beq.n	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e021      	b.n	8002a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	0c1b      	lsrs	r3, r3, #16
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d10c      	bne.n	8002a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	43da      	mvns	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4013      	ands	r3, r2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf14      	ite	ne
 8002a2c:	2301      	movne	r3, #1
 8002a2e:	2300      	moveq	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e00b      	b.n	8002a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	bf14      	ite	ne
 8002a46:	2301      	movne	r3, #1
 8002a48:	2300      	moveq	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f47f af6d 	bne.w	800292c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a68:	e034      	b.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f8e3 	bl	8002c36 <I2C_IsAcknowledgeFailed>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e034      	b.n	8002ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d028      	beq.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a82:	f7fe fcab 	bl	80013dc <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d302      	bcc.n	8002a98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d11d      	bne.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa2:	2b80      	cmp	r3, #128	@ 0x80
 8002aa4:	d016      	beq.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	f043 0220 	orr.w	r2, r3, #32
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e007      	b.n	8002ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ade:	2b80      	cmp	r3, #128	@ 0x80
 8002ae0:	d1c3      	bne.n	8002a6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002af8:	e034      	b.n	8002b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f89b 	bl	8002c36 <I2C_IsAcknowledgeFailed>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e034      	b.n	8002b74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b10:	d028      	beq.n	8002b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b12:	f7fe fc63 	bl	80013dc <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d302      	bcc.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d11d      	bne.n	8002b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d016      	beq.n	8002b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	f043 0220 	orr.w	r2, r3, #32
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e007      	b.n	8002b74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d1c3      	bne.n	8002afa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b88:	e049      	b.n	8002c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d119      	bne.n	8002bcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0210 	mvn.w	r2, #16
 8002ba0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e030      	b.n	8002c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bcc:	f7fe fc06 	bl	80013dc <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d302      	bcc.n	8002be2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d11d      	bne.n	8002c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bec:	2b40      	cmp	r3, #64	@ 0x40
 8002bee:	d016      	beq.n	8002c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	f043 0220 	orr.w	r2, r3, #32
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e007      	b.n	8002c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c28:	2b40      	cmp	r3, #64	@ 0x40
 8002c2a:	d1ae      	bne.n	8002b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c4c:	d11b      	bne.n	8002c86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	f043 0204 	orr.w	r2, r3, #4
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0cc      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b68      	ldr	r3, [pc, #416]	@ (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d90c      	bls.n	8002cd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b65      	ldr	r3, [pc, #404]	@ (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b63      	ldr	r3, [pc, #396]	@ (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0b8      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d020      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce8:	4b59      	ldr	r3, [pc, #356]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a58      	ldr	r2, [pc, #352]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d00:	4b53      	ldr	r3, [pc, #332]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4a52      	ldr	r2, [pc, #328]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d0c:	4b50      	ldr	r3, [pc, #320]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	494d      	ldr	r1, [pc, #308]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d044      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	4b47      	ldr	r3, [pc, #284]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d119      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e07f      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d107      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d52:	4b3f      	ldr	r3, [pc, #252]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e06f      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d62:	4b3b      	ldr	r3, [pc, #236]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e067      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d72:	4b37      	ldr	r3, [pc, #220]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f023 0203 	bic.w	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4934      	ldr	r1, [pc, #208]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d84:	f7fe fb2a 	bl	80013dc <HAL_GetTick>
 8002d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8c:	f7fe fb26 	bl	80013dc <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e04f      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 020c 	and.w	r2, r3, #12
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d1eb      	bne.n	8002d8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002db4:	4b25      	ldr	r3, [pc, #148]	@ (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d20c      	bcs.n	8002ddc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b22      	ldr	r3, [pc, #136]	@ (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b20      	ldr	r3, [pc, #128]	@ (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e032      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de8:	4b19      	ldr	r3, [pc, #100]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4916      	ldr	r1, [pc, #88]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e06:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	490e      	ldr	r1, [pc, #56]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e1a:	f000 f855 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	4b0b      	ldr	r3, [pc, #44]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	490a      	ldr	r1, [pc, #40]	@ (8002e54 <HAL_RCC_ClockConfig+0x1c0>)
 8002e2c:	5ccb      	ldrb	r3, [r1, r3]
 8002e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e32:	4a09      	ldr	r2, [pc, #36]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e36:	4b09      	ldr	r3, [pc, #36]	@ (8002e5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe fa8a 	bl	8001354 <HAL_InitTick>

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023c00 	.word	0x40023c00
 8002e50:	40023800 	.word	0x40023800
 8002e54:	08005948 	.word	0x08005948
 8002e58:	20000000 	.word	0x20000000
 8002e5c:	20000004 	.word	0x20000004

08002e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000000 	.word	0x20000000

08002e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e7c:	f7ff fff0 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	0a9b      	lsrs	r3, r3, #10
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4903      	ldr	r1, [pc, #12]	@ (8002e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	08005958 	.word	0x08005958

08002ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ea4:	f7ff ffdc 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	0b5b      	lsrs	r3, r3, #13
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	4903      	ldr	r1, [pc, #12]	@ (8002ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb6:	5ccb      	ldrb	r3, [r1, r3]
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	08005958 	.word	0x08005958

08002ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ecc:	b0ae      	sub	sp, #184	@ 0xb8
 8002ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eee:	4bcb      	ldr	r3, [pc, #812]	@ (800321c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	f200 8206 	bhi.w	8003308 <HAL_RCC_GetSysClockFreq+0x440>
 8002efc:	a201      	add	r2, pc, #4	@ (adr r2, 8002f04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f02:	bf00      	nop
 8002f04:	08002f39 	.word	0x08002f39
 8002f08:	08003309 	.word	0x08003309
 8002f0c:	08003309 	.word	0x08003309
 8002f10:	08003309 	.word	0x08003309
 8002f14:	08002f41 	.word	0x08002f41
 8002f18:	08003309 	.word	0x08003309
 8002f1c:	08003309 	.word	0x08003309
 8002f20:	08003309 	.word	0x08003309
 8002f24:	08002f49 	.word	0x08002f49
 8002f28:	08003309 	.word	0x08003309
 8002f2c:	08003309 	.word	0x08003309
 8002f30:	08003309 	.word	0x08003309
 8002f34:	08003139 	.word	0x08003139
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f38:	4bb9      	ldr	r3, [pc, #740]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f3e:	e1e7      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f40:	4bb8      	ldr	r3, [pc, #736]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f46:	e1e3      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f48:	4bb4      	ldr	r3, [pc, #720]	@ (800321c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f54:	4bb1      	ldr	r3, [pc, #708]	@ (800321c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d071      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f60:	4bae      	ldr	r3, [pc, #696]	@ (800321c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	099b      	lsrs	r3, r3, #6
 8002f66:	2200      	movs	r2, #0
 8002f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f6c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f86:	4622      	mov	r2, r4
 8002f88:	462b      	mov	r3, r5
 8002f8a:	f04f 0000 	mov.w	r0, #0
 8002f8e:	f04f 0100 	mov.w	r1, #0
 8002f92:	0159      	lsls	r1, r3, #5
 8002f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f98:	0150      	lsls	r0, r2, #5
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	1a51      	subs	r1, r2, r1
 8002fa2:	6439      	str	r1, [r7, #64]	@ 0x40
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8002faa:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002fb8:	4649      	mov	r1, r9
 8002fba:	018b      	lsls	r3, r1, #6
 8002fbc:	4641      	mov	r1, r8
 8002fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fc2:	4641      	mov	r1, r8
 8002fc4:	018a      	lsls	r2, r1, #6
 8002fc6:	4641      	mov	r1, r8
 8002fc8:	1a51      	subs	r1, r2, r1
 8002fca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002fcc:	4649      	mov	r1, r9
 8002fce:	eb63 0301 	sbc.w	r3, r3, r1
 8002fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002fe0:	4649      	mov	r1, r9
 8002fe2:	00cb      	lsls	r3, r1, #3
 8002fe4:	4641      	mov	r1, r8
 8002fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fea:	4641      	mov	r1, r8
 8002fec:	00ca      	lsls	r2, r1, #3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4622      	mov	r2, r4
 8002ff6:	189b      	adds	r3, r3, r2
 8002ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ffa:	462b      	mov	r3, r5
 8002ffc:	460a      	mov	r2, r1
 8002ffe:	eb42 0303 	adc.w	r3, r2, r3
 8003002:	637b      	str	r3, [r7, #52]	@ 0x34
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003010:	4629      	mov	r1, r5
 8003012:	024b      	lsls	r3, r1, #9
 8003014:	4621      	mov	r1, r4
 8003016:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800301a:	4621      	mov	r1, r4
 800301c:	024a      	lsls	r2, r1, #9
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003026:	2200      	movs	r2, #0
 8003028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800302c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003030:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003034:	f7fd f93c 	bl	80002b0 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003042:	e067      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003044:	4b75      	ldr	r3, [pc, #468]	@ (800321c <HAL_RCC_GetSysClockFreq+0x354>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	099b      	lsrs	r3, r3, #6
 800304a:	2200      	movs	r2, #0
 800304c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003050:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003054:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800305e:	2300      	movs	r3, #0
 8003060:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003062:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003066:	4622      	mov	r2, r4
 8003068:	462b      	mov	r3, r5
 800306a:	f04f 0000 	mov.w	r0, #0
 800306e:	f04f 0100 	mov.w	r1, #0
 8003072:	0159      	lsls	r1, r3, #5
 8003074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003078:	0150      	lsls	r0, r2, #5
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4621      	mov	r1, r4
 8003080:	1a51      	subs	r1, r2, r1
 8003082:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003084:	4629      	mov	r1, r5
 8003086:	eb63 0301 	sbc.w	r3, r3, r1
 800308a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003098:	4649      	mov	r1, r9
 800309a:	018b      	lsls	r3, r1, #6
 800309c:	4641      	mov	r1, r8
 800309e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030a2:	4641      	mov	r1, r8
 80030a4:	018a      	lsls	r2, r1, #6
 80030a6:	4641      	mov	r1, r8
 80030a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80030ac:	4649      	mov	r1, r9
 80030ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030c6:	4692      	mov	sl, r2
 80030c8:	469b      	mov	fp, r3
 80030ca:	4623      	mov	r3, r4
 80030cc:	eb1a 0303 	adds.w	r3, sl, r3
 80030d0:	623b      	str	r3, [r7, #32]
 80030d2:	462b      	mov	r3, r5
 80030d4:	eb4b 0303 	adc.w	r3, fp, r3
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80030e6:	4629      	mov	r1, r5
 80030e8:	028b      	lsls	r3, r1, #10
 80030ea:	4621      	mov	r1, r4
 80030ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030f0:	4621      	mov	r1, r4
 80030f2:	028a      	lsls	r2, r1, #10
 80030f4:	4610      	mov	r0, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030fc:	2200      	movs	r2, #0
 80030fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8003100:	677a      	str	r2, [r7, #116]	@ 0x74
 8003102:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003106:	f7fd f8d3 	bl	80002b0 <__aeabi_uldivmod>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4613      	mov	r3, r2
 8003110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003114:	4b41      	ldr	r3, [pc, #260]	@ (800321c <HAL_RCC_GetSysClockFreq+0x354>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	3301      	adds	r3, #1
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800312a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003136:	e0eb      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003138:	4b38      	ldr	r3, [pc, #224]	@ (800321c <HAL_RCC_GetSysClockFreq+0x354>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003140:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003144:	4b35      	ldr	r3, [pc, #212]	@ (800321c <HAL_RCC_GetSysClockFreq+0x354>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d06b      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003150:	4b32      	ldr	r3, [pc, #200]	@ (800321c <HAL_RCC_GetSysClockFreq+0x354>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	099b      	lsrs	r3, r3, #6
 8003156:	2200      	movs	r2, #0
 8003158:	66bb      	str	r3, [r7, #104]	@ 0x68
 800315a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800315c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800315e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003162:	663b      	str	r3, [r7, #96]	@ 0x60
 8003164:	2300      	movs	r3, #0
 8003166:	667b      	str	r3, [r7, #100]	@ 0x64
 8003168:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800316c:	4622      	mov	r2, r4
 800316e:	462b      	mov	r3, r5
 8003170:	f04f 0000 	mov.w	r0, #0
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	0159      	lsls	r1, r3, #5
 800317a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800317e:	0150      	lsls	r0, r2, #5
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4621      	mov	r1, r4
 8003186:	1a51      	subs	r1, r2, r1
 8003188:	61b9      	str	r1, [r7, #24]
 800318a:	4629      	mov	r1, r5
 800318c:	eb63 0301 	sbc.w	r3, r3, r1
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800319e:	4659      	mov	r1, fp
 80031a0:	018b      	lsls	r3, r1, #6
 80031a2:	4651      	mov	r1, sl
 80031a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031a8:	4651      	mov	r1, sl
 80031aa:	018a      	lsls	r2, r1, #6
 80031ac:	4651      	mov	r1, sl
 80031ae:	ebb2 0801 	subs.w	r8, r2, r1
 80031b2:	4659      	mov	r1, fp
 80031b4:	eb63 0901 	sbc.w	r9, r3, r1
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031cc:	4690      	mov	r8, r2
 80031ce:	4699      	mov	r9, r3
 80031d0:	4623      	mov	r3, r4
 80031d2:	eb18 0303 	adds.w	r3, r8, r3
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	462b      	mov	r3, r5
 80031da:	eb49 0303 	adc.w	r3, r9, r3
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80031ec:	4629      	mov	r1, r5
 80031ee:	024b      	lsls	r3, r1, #9
 80031f0:	4621      	mov	r1, r4
 80031f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031f6:	4621      	mov	r1, r4
 80031f8:	024a      	lsls	r2, r1, #9
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003202:	2200      	movs	r2, #0
 8003204:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003206:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003208:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800320c:	f7fd f850 	bl	80002b0 <__aeabi_uldivmod>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4613      	mov	r3, r2
 8003216:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800321a:	e065      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x420>
 800321c:	40023800 	.word	0x40023800
 8003220:	00f42400 	.word	0x00f42400
 8003224:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003228:	4b3d      	ldr	r3, [pc, #244]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x458>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	2200      	movs	r2, #0
 8003230:	4618      	mov	r0, r3
 8003232:	4611      	mov	r1, r2
 8003234:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003238:	653b      	str	r3, [r7, #80]	@ 0x50
 800323a:	2300      	movs	r3, #0
 800323c:	657b      	str	r3, [r7, #84]	@ 0x54
 800323e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003242:	4642      	mov	r2, r8
 8003244:	464b      	mov	r3, r9
 8003246:	f04f 0000 	mov.w	r0, #0
 800324a:	f04f 0100 	mov.w	r1, #0
 800324e:	0159      	lsls	r1, r3, #5
 8003250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003254:	0150      	lsls	r0, r2, #5
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4641      	mov	r1, r8
 800325c:	1a51      	subs	r1, r2, r1
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	4649      	mov	r1, r9
 8003262:	eb63 0301 	sbc.w	r3, r3, r1
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003274:	4659      	mov	r1, fp
 8003276:	018b      	lsls	r3, r1, #6
 8003278:	4651      	mov	r1, sl
 800327a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800327e:	4651      	mov	r1, sl
 8003280:	018a      	lsls	r2, r1, #6
 8003282:	4651      	mov	r1, sl
 8003284:	1a54      	subs	r4, r2, r1
 8003286:	4659      	mov	r1, fp
 8003288:	eb63 0501 	sbc.w	r5, r3, r1
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	00eb      	lsls	r3, r5, #3
 8003296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800329a:	00e2      	lsls	r2, r4, #3
 800329c:	4614      	mov	r4, r2
 800329e:	461d      	mov	r5, r3
 80032a0:	4643      	mov	r3, r8
 80032a2:	18e3      	adds	r3, r4, r3
 80032a4:	603b      	str	r3, [r7, #0]
 80032a6:	464b      	mov	r3, r9
 80032a8:	eb45 0303 	adc.w	r3, r5, r3
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ba:	4629      	mov	r1, r5
 80032bc:	028b      	lsls	r3, r1, #10
 80032be:	4621      	mov	r1, r4
 80032c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032c4:	4621      	mov	r1, r4
 80032c6:	028a      	lsls	r2, r1, #10
 80032c8:	4610      	mov	r0, r2
 80032ca:	4619      	mov	r1, r3
 80032cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032d0:	2200      	movs	r2, #0
 80032d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032d4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80032d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032da:	f7fc ffe9 	bl	80002b0 <__aeabi_uldivmod>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4613      	mov	r3, r2
 80032e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80032e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x458>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	0f1b      	lsrs	r3, r3, #28
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80032f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003302:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003306:	e003      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003308:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x45c>)
 800330a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800330e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003310:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003314:	4618      	mov	r0, r3
 8003316:	37b8      	adds	r7, #184	@ 0xb8
 8003318:	46bd      	mov	sp, r7
 800331a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	00f42400 	.word	0x00f42400

08003328 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e28d      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 8083 	beq.w	800344e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003348:	4b94      	ldr	r3, [pc, #592]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b04      	cmp	r3, #4
 8003352:	d019      	beq.n	8003388 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003354:	4b91      	ldr	r3, [pc, #580]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 030c 	and.w	r3, r3, #12
        || \
 800335c:	2b08      	cmp	r3, #8
 800335e:	d106      	bne.n	800336e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003360:	4b8e      	ldr	r3, [pc, #568]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003368:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800336c:	d00c      	beq.n	8003388 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336e:	4b8b      	ldr	r3, [pc, #556]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d112      	bne.n	80033a0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337a:	4b88      	ldr	r3, [pc, #544]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003382:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003386:	d10b      	bne.n	80033a0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	4b84      	ldr	r3, [pc, #528]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d05b      	beq.n	800344c <HAL_RCC_OscConfig+0x124>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d157      	bne.n	800344c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e25a      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a8:	d106      	bne.n	80033b8 <HAL_RCC_OscConfig+0x90>
 80033aa:	4b7c      	ldr	r3, [pc, #496]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a7b      	ldr	r2, [pc, #492]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e01d      	b.n	80033f4 <HAL_RCC_OscConfig+0xcc>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0xb4>
 80033c2:	4b76      	ldr	r3, [pc, #472]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a75      	ldr	r2, [pc, #468]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 80033c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b73      	ldr	r3, [pc, #460]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a72      	ldr	r2, [pc, #456]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e00b      	b.n	80033f4 <HAL_RCC_OscConfig+0xcc>
 80033dc:	4b6f      	ldr	r3, [pc, #444]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a6e      	ldr	r2, [pc, #440]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b6c      	ldr	r3, [pc, #432]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a6b      	ldr	r2, [pc, #428]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 80033ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fd ffee 	bl	80013dc <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003404:	f7fd ffea 	bl	80013dc <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	@ 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e21f      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b61      	ldr	r3, [pc, #388]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0xdc>
 8003422:	e014      	b.n	800344e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fd ffda 	bl	80013dc <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800342c:	f7fd ffd6 	bl	80013dc <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	@ 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e20b      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343e:	4b57      	ldr	r3, [pc, #348]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x104>
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d06f      	beq.n	800353a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800345a:	4b50      	ldr	r3, [pc, #320]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b00      	cmp	r3, #0
 8003464:	d017      	beq.n	8003496 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003466:	4b4d      	ldr	r3, [pc, #308]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
        || \
 800346e:	2b08      	cmp	r3, #8
 8003470:	d105      	bne.n	800347e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003472:	4b4a      	ldr	r3, [pc, #296]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347e:	4b47      	ldr	r3, [pc, #284]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003486:	2b0c      	cmp	r3, #12
 8003488:	d11c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800348a:	4b44      	ldr	r3, [pc, #272]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d116      	bne.n	80034c4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003496:	4b41      	ldr	r3, [pc, #260]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_RCC_OscConfig+0x186>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d001      	beq.n	80034ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e1d3      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ae:	4b3b      	ldr	r3, [pc, #236]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4937      	ldr	r1, [pc, #220]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c2:	e03a      	b.n	800353a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d020      	beq.n	800350e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034cc:	4b34      	ldr	r3, [pc, #208]	@ (80035a0 <HAL_RCC_OscConfig+0x278>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d2:	f7fd ff83 	bl	80013dc <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034da:	f7fd ff7f 	bl	80013dc <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e1b4      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ec:	4b2b      	ldr	r3, [pc, #172]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f8:	4b28      	ldr	r3, [pc, #160]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4925      	ldr	r1, [pc, #148]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]
 800350c:	e015      	b.n	800353a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350e:	4b24      	ldr	r3, [pc, #144]	@ (80035a0 <HAL_RCC_OscConfig+0x278>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fd ff62 	bl	80013dc <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351c:	f7fd ff5e 	bl	80013dc <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e193      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352e:	4b1b      	ldr	r3, [pc, #108]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d036      	beq.n	80035b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d016      	beq.n	800357c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800354e:	4b15      	ldr	r3, [pc, #84]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003550:	2201      	movs	r2, #1
 8003552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fd ff42 	bl	80013dc <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355c:	f7fd ff3e 	bl	80013dc <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e173      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356e:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 8003570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0x234>
 800357a:	e01b      	b.n	80035b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357c:	4b09      	ldr	r3, [pc, #36]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003582:	f7fd ff2b 	bl	80013dc <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003588:	e00e      	b.n	80035a8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358a:	f7fd ff27 	bl	80013dc <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d907      	bls.n	80035a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e15c      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
 800359c:	40023800 	.word	0x40023800
 80035a0:	42470000 	.word	0x42470000
 80035a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a8:	4b8a      	ldr	r3, [pc, #552]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80035aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1ea      	bne.n	800358a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8097 	beq.w	80036f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c2:	2300      	movs	r3, #0
 80035c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c6:	4b83      	ldr	r3, [pc, #524]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10f      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	4b7f      	ldr	r3, [pc, #508]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	4a7e      	ldr	r2, [pc, #504]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80035dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035e2:	4b7c      	ldr	r3, [pc, #496]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ee:	2301      	movs	r3, #1
 80035f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f2:	4b79      	ldr	r3, [pc, #484]	@ (80037d8 <HAL_RCC_OscConfig+0x4b0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d118      	bne.n	8003630 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035fe:	4b76      	ldr	r3, [pc, #472]	@ (80037d8 <HAL_RCC_OscConfig+0x4b0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a75      	ldr	r2, [pc, #468]	@ (80037d8 <HAL_RCC_OscConfig+0x4b0>)
 8003604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360a:	f7fd fee7 	bl	80013dc <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003612:	f7fd fee3 	bl	80013dc <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e118      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003624:	4b6c      	ldr	r3, [pc, #432]	@ (80037d8 <HAL_RCC_OscConfig+0x4b0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d106      	bne.n	8003646 <HAL_RCC_OscConfig+0x31e>
 8003638:	4b66      	ldr	r3, [pc, #408]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363c:	4a65      	ldr	r2, [pc, #404]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6713      	str	r3, [r2, #112]	@ 0x70
 8003644:	e01c      	b.n	8003680 <HAL_RCC_OscConfig+0x358>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b05      	cmp	r3, #5
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0x340>
 800364e:	4b61      	ldr	r3, [pc, #388]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003652:	4a60      	ldr	r2, [pc, #384]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 8003654:	f043 0304 	orr.w	r3, r3, #4
 8003658:	6713      	str	r3, [r2, #112]	@ 0x70
 800365a:	4b5e      	ldr	r3, [pc, #376]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365e:	4a5d      	ldr	r2, [pc, #372]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	6713      	str	r3, [r2, #112]	@ 0x70
 8003666:	e00b      	b.n	8003680 <HAL_RCC_OscConfig+0x358>
 8003668:	4b5a      	ldr	r3, [pc, #360]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366c:	4a59      	ldr	r2, [pc, #356]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	6713      	str	r3, [r2, #112]	@ 0x70
 8003674:	4b57      	ldr	r3, [pc, #348]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003678:	4a56      	ldr	r2, [pc, #344]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 800367a:	f023 0304 	bic.w	r3, r3, #4
 800367e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d015      	beq.n	80036b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003688:	f7fd fea8 	bl	80013dc <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368e:	e00a      	b.n	80036a6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003690:	f7fd fea4 	bl	80013dc <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e0d7      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a6:	4b4b      	ldr	r3, [pc, #300]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0ee      	beq.n	8003690 <HAL_RCC_OscConfig+0x368>
 80036b2:	e014      	b.n	80036de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b4:	f7fd fe92 	bl	80013dc <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036bc:	f7fd fe8e 	bl	80013dc <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e0c1      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d2:	4b40      	ldr	r3, [pc, #256]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1ee      	bne.n	80036bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036de:	7dfb      	ldrb	r3, [r7, #23]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d105      	bne.n	80036f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e4:	4b3b      	ldr	r3, [pc, #236]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	4a3a      	ldr	r2, [pc, #232]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80036ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80ad 	beq.w	8003854 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036fa:	4b36      	ldr	r3, [pc, #216]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b08      	cmp	r3, #8
 8003704:	d060      	beq.n	80037c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d145      	bne.n	800379a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370e:	4b33      	ldr	r3, [pc, #204]	@ (80037dc <HAL_RCC_OscConfig+0x4b4>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fd fe62 	bl	80013dc <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371c:	f7fd fe5e 	bl	80013dc <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e093      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372e:	4b29      	ldr	r3, [pc, #164]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69da      	ldr	r2, [r3, #28]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	019b      	lsls	r3, r3, #6
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003750:	085b      	lsrs	r3, r3, #1
 8003752:	3b01      	subs	r3, #1
 8003754:	041b      	lsls	r3, r3, #16
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375c:	061b      	lsls	r3, r3, #24
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003764:	071b      	lsls	r3, r3, #28
 8003766:	491b      	ldr	r1, [pc, #108]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800376c:	4b1b      	ldr	r3, [pc, #108]	@ (80037dc <HAL_RCC_OscConfig+0x4b4>)
 800376e:	2201      	movs	r2, #1
 8003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003772:	f7fd fe33 	bl	80013dc <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377a:	f7fd fe2f 	bl	80013dc <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e064      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378c:	4b11      	ldr	r3, [pc, #68]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x452>
 8003798:	e05c      	b.n	8003854 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b10      	ldr	r3, [pc, #64]	@ (80037dc <HAL_RCC_OscConfig+0x4b4>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fd fe1c 	bl	80013dc <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a8:	f7fd fe18 	bl	80013dc <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e04d      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <HAL_RCC_OscConfig+0x4ac>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x480>
 80037c6:	e045      	b.n	8003854 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d107      	bne.n	80037e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e040      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40007000 	.word	0x40007000
 80037dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003860 <HAL_RCC_OscConfig+0x538>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d030      	beq.n	8003850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d129      	bne.n	8003850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d122      	bne.n	8003850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003810:	4013      	ands	r3, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003818:	4293      	cmp	r3, r2
 800381a:	d119      	bne.n	8003850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	3b01      	subs	r3, #1
 800382a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d10f      	bne.n	8003850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d107      	bne.n	8003850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800

08003864 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e07b      	b.n	800396e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387a:	2b00      	cmp	r3, #0
 800387c:	d108      	bne.n	8003890 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003886:	d009      	beq.n	800389c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	61da      	str	r2, [r3, #28]
 800388e:	e005      	b.n	800389c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fd faf8 	bl	8000eac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003920:	ea42 0103 	orr.w	r1, r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	0c1b      	lsrs	r3, r3, #16
 800393a:	f003 0104 	and.w	r1, r3, #4
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	f003 0210 	and.w	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800395c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b088      	sub	sp, #32
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	4613      	mov	r3, r2
 8003984:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003986:	f7fd fd29 	bl	80013dc <HAL_GetTick>
 800398a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800398c:	88fb      	ldrh	r3, [r7, #6]
 800398e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d001      	beq.n	80039a0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800399c:	2302      	movs	r3, #2
 800399e:	e12a      	b.n	8003bf6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_SPI_Transmit+0x36>
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e122      	b.n	8003bf6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_SPI_Transmit+0x48>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e11b      	b.n	8003bf6 <HAL_SPI_Transmit+0x280>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2203      	movs	r2, #3
 80039ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	88fa      	ldrh	r2, [r7, #6]
 80039de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	88fa      	ldrh	r2, [r7, #6]
 80039e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a0c:	d10f      	bne.n	8003a2e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a38:	2b40      	cmp	r3, #64	@ 0x40
 8003a3a:	d007      	beq.n	8003a4c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a54:	d152      	bne.n	8003afc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_SPI_Transmit+0xee>
 8003a5e:	8b7b      	ldrh	r3, [r7, #26]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d145      	bne.n	8003af0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a68:	881a      	ldrh	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a88:	e032      	b.n	8003af0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d112      	bne.n	8003abe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9c:	881a      	ldrh	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa8:	1c9a      	adds	r2, r3, #2
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003abc:	e018      	b.n	8003af0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003abe:	f7fd fc8d 	bl	80013dc <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d803      	bhi.n	8003ad6 <HAL_SPI_Transmit+0x160>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad4:	d102      	bne.n	8003adc <HAL_SPI_Transmit+0x166>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d109      	bne.n	8003af0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e082      	b.n	8003bf6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1c7      	bne.n	8003a8a <HAL_SPI_Transmit+0x114>
 8003afa:	e053      	b.n	8003ba4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_SPI_Transmit+0x194>
 8003b04:	8b7b      	ldrh	r3, [r7, #26]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d147      	bne.n	8003b9a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	330c      	adds	r3, #12
 8003b14:	7812      	ldrb	r2, [r2, #0]
 8003b16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b30:	e033      	b.n	8003b9a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d113      	bne.n	8003b68 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	7812      	ldrb	r2, [r2, #0]
 8003b4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b66:	e018      	b.n	8003b9a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b68:	f7fd fc38 	bl	80013dc <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d803      	bhi.n	8003b80 <HAL_SPI_Transmit+0x20a>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7e:	d102      	bne.n	8003b86 <HAL_SPI_Transmit+0x210>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e02d      	b.n	8003bf6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1c6      	bne.n	8003b32 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ba4:	69fa      	ldr	r2, [r7, #28]
 8003ba6:	6839      	ldr	r1, [r7, #0]
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f8b1 	bl	8003d10 <SPI_EndRxTxTransaction>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c10:	f7fd fbe4 	bl	80013dc <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c20:	f7fd fbdc 	bl	80013dc <HAL_GetTick>
 8003c24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c26:	4b39      	ldr	r3, [pc, #228]	@ (8003d0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	015b      	lsls	r3, r3, #5
 8003c2c:	0d1b      	lsrs	r3, r3, #20
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	fb02 f303 	mul.w	r3, r2, r3
 8003c34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c36:	e054      	b.n	8003ce2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3e:	d050      	beq.n	8003ce2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c40:	f7fd fbcc 	bl	80013dc <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d902      	bls.n	8003c56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d13d      	bne.n	8003cd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c6e:	d111      	bne.n	8003c94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c78:	d004      	beq.n	8003c84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c82:	d107      	bne.n	8003c94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c9c:	d10f      	bne.n	8003cbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e017      	b.n	8003d02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4013      	ands	r3, r2
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2301      	moveq	r3, #1
 8003cf4:	2300      	movne	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d19b      	bne.n	8003c38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000000 	.word	0x20000000

08003d10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2201      	movs	r2, #1
 8003d24:	2102      	movs	r1, #2
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff ff6a 	bl	8003c00 <SPI_WaitFlagStateUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d007      	beq.n	8003d42 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e032      	b.n	8003da8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d42:	4b1b      	ldr	r3, [pc, #108]	@ (8003db0 <SPI_EndRxTxTransaction+0xa0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1b      	ldr	r2, [pc, #108]	@ (8003db4 <SPI_EndRxTxTransaction+0xa4>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	0d5b      	lsrs	r3, r3, #21
 8003d4e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d52:	fb02 f303 	mul.w	r3, r2, r3
 8003d56:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d60:	d112      	bne.n	8003d88 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2180      	movs	r1, #128	@ 0x80
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f7ff ff47 	bl	8003c00 <SPI_WaitFlagStateUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d016      	beq.n	8003da6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7c:	f043 0220 	orr.w	r2, r3, #32
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e00f      	b.n	8003da8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9e:	2b80      	cmp	r3, #128	@ 0x80
 8003da0:	d0f2      	beq.n	8003d88 <SPI_EndRxTxTransaction+0x78>
 8003da2:	e000      	b.n	8003da6 <SPI_EndRxTxTransaction+0x96>
        break;
 8003da4:	bf00      	nop
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20000000 	.word	0x20000000
 8003db4:	165e9f81 	.word	0x165e9f81

08003db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e041      	b.n	8003e4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fd f9d2 	bl	8001188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f000 f9c0 	bl	800417c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d001      	beq.n	8003e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e04e      	b.n	8003f0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a23      	ldr	r2, [pc, #140]	@ (8003f1c <HAL_TIM_Base_Start_IT+0xc4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d022      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x80>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e9a:	d01d      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x80>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8003f20 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d018      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x80>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8003f24 <HAL_TIM_Base_Start_IT+0xcc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d013      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x80>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f28 <HAL_TIM_Base_Start_IT+0xd0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00e      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x80>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8003f2c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d009      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x80>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a19      	ldr	r2, [pc, #100]	@ (8003f30 <HAL_TIM_Base_Start_IT+0xd8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d004      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x80>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a18      	ldr	r2, [pc, #96]	@ (8003f34 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d111      	bne.n	8003efc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b06      	cmp	r3, #6
 8003ee8:	d010      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0201 	orr.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efa:	e007      	b.n	8003f0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800
 8003f28:	40000c00 	.word	0x40000c00
 8003f2c:	40010400 	.word	0x40010400
 8003f30:	40014000 	.word	0x40014000
 8003f34:	40001800 	.word	0x40001800

08003f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d020      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01b      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f06f 0202 	mvn.w	r2, #2
 8003f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8dc 	bl	8004140 <HAL_TIM_IC_CaptureCallback>
 8003f88:	e005      	b.n	8003f96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f8ce 	bl	800412c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f8df 	bl	8004154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d020      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01b      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0204 	mvn.w	r2, #4
 8003fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f8b6 	bl	8004140 <HAL_TIM_IC_CaptureCallback>
 8003fd4:	e005      	b.n	8003fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f8a8 	bl	800412c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f8b9 	bl	8004154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d020      	beq.n	8004034 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01b      	beq.n	8004034 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0208 	mvn.w	r2, #8
 8004004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2204      	movs	r2, #4
 800400a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f890 	bl	8004140 <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f882 	bl	800412c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f893 	bl	8004154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	2b00      	cmp	r3, #0
 800403c:	d020      	beq.n	8004080 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01b      	beq.n	8004080 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0210 	mvn.w	r2, #16
 8004050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2208      	movs	r2, #8
 8004056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f86a 	bl	8004140 <HAL_TIM_IC_CaptureCallback>
 800406c:	e005      	b.n	800407a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f85c 	bl	800412c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f86d 	bl	8004154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00c      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0201 	mvn.w	r2, #1
 800409c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f83a 	bl	8004118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00c      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f910 	bl	80042e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00c      	beq.n	80040ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f83e 	bl	8004168 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00c      	beq.n	8004110 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0220 	mvn.w	r2, #32
 8004108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f8e2 	bl	80042d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a46      	ldr	r2, [pc, #280]	@ (80042a8 <TIM_Base_SetConfig+0x12c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d013      	beq.n	80041bc <TIM_Base_SetConfig+0x40>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419a:	d00f      	beq.n	80041bc <TIM_Base_SetConfig+0x40>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a43      	ldr	r2, [pc, #268]	@ (80042ac <TIM_Base_SetConfig+0x130>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00b      	beq.n	80041bc <TIM_Base_SetConfig+0x40>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a42      	ldr	r2, [pc, #264]	@ (80042b0 <TIM_Base_SetConfig+0x134>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d007      	beq.n	80041bc <TIM_Base_SetConfig+0x40>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a41      	ldr	r2, [pc, #260]	@ (80042b4 <TIM_Base_SetConfig+0x138>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_Base_SetConfig+0x40>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a40      	ldr	r2, [pc, #256]	@ (80042b8 <TIM_Base_SetConfig+0x13c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d108      	bne.n	80041ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a35      	ldr	r2, [pc, #212]	@ (80042a8 <TIM_Base_SetConfig+0x12c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d02b      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041dc:	d027      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a32      	ldr	r2, [pc, #200]	@ (80042ac <TIM_Base_SetConfig+0x130>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d023      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a31      	ldr	r2, [pc, #196]	@ (80042b0 <TIM_Base_SetConfig+0x134>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d01f      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a30      	ldr	r2, [pc, #192]	@ (80042b4 <TIM_Base_SetConfig+0x138>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d01b      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a2f      	ldr	r2, [pc, #188]	@ (80042b8 <TIM_Base_SetConfig+0x13c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d017      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a2e      	ldr	r2, [pc, #184]	@ (80042bc <TIM_Base_SetConfig+0x140>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d013      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a2d      	ldr	r2, [pc, #180]	@ (80042c0 <TIM_Base_SetConfig+0x144>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00f      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a2c      	ldr	r2, [pc, #176]	@ (80042c4 <TIM_Base_SetConfig+0x148>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00b      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2b      	ldr	r2, [pc, #172]	@ (80042c8 <TIM_Base_SetConfig+0x14c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d007      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a2a      	ldr	r2, [pc, #168]	@ (80042cc <TIM_Base_SetConfig+0x150>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d003      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a29      	ldr	r2, [pc, #164]	@ (80042d0 <TIM_Base_SetConfig+0x154>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d108      	bne.n	8004240 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a10      	ldr	r2, [pc, #64]	@ (80042a8 <TIM_Base_SetConfig+0x12c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d003      	beq.n	8004274 <TIM_Base_SetConfig+0xf8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a12      	ldr	r2, [pc, #72]	@ (80042b8 <TIM_Base_SetConfig+0x13c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d103      	bne.n	800427c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b01      	cmp	r3, #1
 800428c:	d105      	bne.n	800429a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f023 0201 	bic.w	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	611a      	str	r2, [r3, #16]
  }
}
 800429a:	bf00      	nop
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40010000 	.word	0x40010000
 80042ac:	40000400 	.word	0x40000400
 80042b0:	40000800 	.word	0x40000800
 80042b4:	40000c00 	.word	0x40000c00
 80042b8:	40010400 	.word	0x40010400
 80042bc:	40014000 	.word	0x40014000
 80042c0:	40014400 	.word	0x40014400
 80042c4:	40014800 	.word	0x40014800
 80042c8:	40001800 	.word	0x40001800
 80042cc:	40001c00 	.word	0x40001c00
 80042d0:	40002000 	.word	0x40002000

080042d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e042      	b.n	8004394 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fc ff82 	bl	800122c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2224      	movs	r2, #36	@ 0x24
 800432c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800433e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f82b 	bl	800439c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004354:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695a      	ldr	r2, [r3, #20]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004364:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004374:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800439c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043a0:	b0c0      	sub	sp, #256	@ 0x100
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b8:	68d9      	ldr	r1, [r3, #12]
 80043ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	ea40 0301 	orr.w	r3, r0, r1
 80043c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	431a      	orrs	r2, r3
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80043f4:	f021 010c 	bic.w	r1, r1, #12
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004402:	430b      	orrs	r3, r1
 8004404:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004416:	6999      	ldr	r1, [r3, #24]
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	ea40 0301 	orr.w	r3, r0, r1
 8004422:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	4b8f      	ldr	r3, [pc, #572]	@ (8004668 <UART_SetConfig+0x2cc>)
 800442c:	429a      	cmp	r2, r3
 800442e:	d005      	beq.n	800443c <UART_SetConfig+0xa0>
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	4b8d      	ldr	r3, [pc, #564]	@ (800466c <UART_SetConfig+0x2d0>)
 8004438:	429a      	cmp	r2, r3
 800443a:	d104      	bne.n	8004446 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800443c:	f7fe fd30 	bl	8002ea0 <HAL_RCC_GetPCLK2Freq>
 8004440:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004444:	e003      	b.n	800444e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004446:	f7fe fd17 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 800444a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004458:	f040 810c 	bne.w	8004674 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800445c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004460:	2200      	movs	r2, #0
 8004462:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004466:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800446a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800446e:	4622      	mov	r2, r4
 8004470:	462b      	mov	r3, r5
 8004472:	1891      	adds	r1, r2, r2
 8004474:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004476:	415b      	adcs	r3, r3
 8004478:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800447a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800447e:	4621      	mov	r1, r4
 8004480:	eb12 0801 	adds.w	r8, r2, r1
 8004484:	4629      	mov	r1, r5
 8004486:	eb43 0901 	adc.w	r9, r3, r1
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800449a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800449e:	4690      	mov	r8, r2
 80044a0:	4699      	mov	r9, r3
 80044a2:	4623      	mov	r3, r4
 80044a4:	eb18 0303 	adds.w	r3, r8, r3
 80044a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044ac:	462b      	mov	r3, r5
 80044ae:	eb49 0303 	adc.w	r3, r9, r3
 80044b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044ca:	460b      	mov	r3, r1
 80044cc:	18db      	adds	r3, r3, r3
 80044ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80044d0:	4613      	mov	r3, r2
 80044d2:	eb42 0303 	adc.w	r3, r2, r3
 80044d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80044d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80044dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80044e0:	f7fb fee6 	bl	80002b0 <__aeabi_uldivmod>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4b61      	ldr	r3, [pc, #388]	@ (8004670 <UART_SetConfig+0x2d4>)
 80044ea:	fba3 2302 	umull	r2, r3, r3, r2
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	011c      	lsls	r4, r3, #4
 80044f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004500:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004504:	4642      	mov	r2, r8
 8004506:	464b      	mov	r3, r9
 8004508:	1891      	adds	r1, r2, r2
 800450a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800450c:	415b      	adcs	r3, r3
 800450e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004510:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004514:	4641      	mov	r1, r8
 8004516:	eb12 0a01 	adds.w	sl, r2, r1
 800451a:	4649      	mov	r1, r9
 800451c:	eb43 0b01 	adc.w	fp, r3, r1
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800452c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004530:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004534:	4692      	mov	sl, r2
 8004536:	469b      	mov	fp, r3
 8004538:	4643      	mov	r3, r8
 800453a:	eb1a 0303 	adds.w	r3, sl, r3
 800453e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004542:	464b      	mov	r3, r9
 8004544:	eb4b 0303 	adc.w	r3, fp, r3
 8004548:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004558:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800455c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004560:	460b      	mov	r3, r1
 8004562:	18db      	adds	r3, r3, r3
 8004564:	643b      	str	r3, [r7, #64]	@ 0x40
 8004566:	4613      	mov	r3, r2
 8004568:	eb42 0303 	adc.w	r3, r2, r3
 800456c:	647b      	str	r3, [r7, #68]	@ 0x44
 800456e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004572:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004576:	f7fb fe9b 	bl	80002b0 <__aeabi_uldivmod>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4611      	mov	r1, r2
 8004580:	4b3b      	ldr	r3, [pc, #236]	@ (8004670 <UART_SetConfig+0x2d4>)
 8004582:	fba3 2301 	umull	r2, r3, r3, r1
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	2264      	movs	r2, #100	@ 0x64
 800458a:	fb02 f303 	mul.w	r3, r2, r3
 800458e:	1acb      	subs	r3, r1, r3
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004596:	4b36      	ldr	r3, [pc, #216]	@ (8004670 <UART_SetConfig+0x2d4>)
 8004598:	fba3 2302 	umull	r2, r3, r3, r2
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045a4:	441c      	add	r4, r3
 80045a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045aa:	2200      	movs	r2, #0
 80045ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045b8:	4642      	mov	r2, r8
 80045ba:	464b      	mov	r3, r9
 80045bc:	1891      	adds	r1, r2, r2
 80045be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045c0:	415b      	adcs	r3, r3
 80045c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045c8:	4641      	mov	r1, r8
 80045ca:	1851      	adds	r1, r2, r1
 80045cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80045ce:	4649      	mov	r1, r9
 80045d0:	414b      	adcs	r3, r1
 80045d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80045e0:	4659      	mov	r1, fp
 80045e2:	00cb      	lsls	r3, r1, #3
 80045e4:	4651      	mov	r1, sl
 80045e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ea:	4651      	mov	r1, sl
 80045ec:	00ca      	lsls	r2, r1, #3
 80045ee:	4610      	mov	r0, r2
 80045f0:	4619      	mov	r1, r3
 80045f2:	4603      	mov	r3, r0
 80045f4:	4642      	mov	r2, r8
 80045f6:	189b      	adds	r3, r3, r2
 80045f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045fc:	464b      	mov	r3, r9
 80045fe:	460a      	mov	r2, r1
 8004600:	eb42 0303 	adc.w	r3, r2, r3
 8004604:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004614:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004618:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800461c:	460b      	mov	r3, r1
 800461e:	18db      	adds	r3, r3, r3
 8004620:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004622:	4613      	mov	r3, r2
 8004624:	eb42 0303 	adc.w	r3, r2, r3
 8004628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800462a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800462e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004632:	f7fb fe3d 	bl	80002b0 <__aeabi_uldivmod>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <UART_SetConfig+0x2d4>)
 800463c:	fba3 1302 	umull	r1, r3, r3, r2
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	2164      	movs	r1, #100	@ 0x64
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	3332      	adds	r3, #50	@ 0x32
 800464e:	4a08      	ldr	r2, [pc, #32]	@ (8004670 <UART_SetConfig+0x2d4>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	f003 0207 	and.w	r2, r3, #7
 800465a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4422      	add	r2, r4
 8004662:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004664:	e106      	b.n	8004874 <UART_SetConfig+0x4d8>
 8004666:	bf00      	nop
 8004668:	40011000 	.word	0x40011000
 800466c:	40011400 	.word	0x40011400
 8004670:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004678:	2200      	movs	r2, #0
 800467a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800467e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004682:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004686:	4642      	mov	r2, r8
 8004688:	464b      	mov	r3, r9
 800468a:	1891      	adds	r1, r2, r2
 800468c:	6239      	str	r1, [r7, #32]
 800468e:	415b      	adcs	r3, r3
 8004690:	627b      	str	r3, [r7, #36]	@ 0x24
 8004692:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004696:	4641      	mov	r1, r8
 8004698:	1854      	adds	r4, r2, r1
 800469a:	4649      	mov	r1, r9
 800469c:	eb43 0501 	adc.w	r5, r3, r1
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	00eb      	lsls	r3, r5, #3
 80046aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ae:	00e2      	lsls	r2, r4, #3
 80046b0:	4614      	mov	r4, r2
 80046b2:	461d      	mov	r5, r3
 80046b4:	4643      	mov	r3, r8
 80046b6:	18e3      	adds	r3, r4, r3
 80046b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046bc:	464b      	mov	r3, r9
 80046be:	eb45 0303 	adc.w	r3, r5, r3
 80046c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046e2:	4629      	mov	r1, r5
 80046e4:	008b      	lsls	r3, r1, #2
 80046e6:	4621      	mov	r1, r4
 80046e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ec:	4621      	mov	r1, r4
 80046ee:	008a      	lsls	r2, r1, #2
 80046f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80046f4:	f7fb fddc 	bl	80002b0 <__aeabi_uldivmod>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4b60      	ldr	r3, [pc, #384]	@ (8004880 <UART_SetConfig+0x4e4>)
 80046fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	011c      	lsls	r4, r3, #4
 8004706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800470a:	2200      	movs	r2, #0
 800470c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004710:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004714:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004718:	4642      	mov	r2, r8
 800471a:	464b      	mov	r3, r9
 800471c:	1891      	adds	r1, r2, r2
 800471e:	61b9      	str	r1, [r7, #24]
 8004720:	415b      	adcs	r3, r3
 8004722:	61fb      	str	r3, [r7, #28]
 8004724:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004728:	4641      	mov	r1, r8
 800472a:	1851      	adds	r1, r2, r1
 800472c:	6139      	str	r1, [r7, #16]
 800472e:	4649      	mov	r1, r9
 8004730:	414b      	adcs	r3, r1
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004740:	4659      	mov	r1, fp
 8004742:	00cb      	lsls	r3, r1, #3
 8004744:	4651      	mov	r1, sl
 8004746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800474a:	4651      	mov	r1, sl
 800474c:	00ca      	lsls	r2, r1, #3
 800474e:	4610      	mov	r0, r2
 8004750:	4619      	mov	r1, r3
 8004752:	4603      	mov	r3, r0
 8004754:	4642      	mov	r2, r8
 8004756:	189b      	adds	r3, r3, r2
 8004758:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800475c:	464b      	mov	r3, r9
 800475e:	460a      	mov	r2, r1
 8004760:	eb42 0303 	adc.w	r3, r2, r3
 8004764:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004772:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004780:	4649      	mov	r1, r9
 8004782:	008b      	lsls	r3, r1, #2
 8004784:	4641      	mov	r1, r8
 8004786:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800478a:	4641      	mov	r1, r8
 800478c:	008a      	lsls	r2, r1, #2
 800478e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004792:	f7fb fd8d 	bl	80002b0 <__aeabi_uldivmod>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	4611      	mov	r1, r2
 800479c:	4b38      	ldr	r3, [pc, #224]	@ (8004880 <UART_SetConfig+0x4e4>)
 800479e:	fba3 2301 	umull	r2, r3, r3, r1
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	2264      	movs	r2, #100	@ 0x64
 80047a6:	fb02 f303 	mul.w	r3, r2, r3
 80047aa:	1acb      	subs	r3, r1, r3
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	3332      	adds	r3, #50	@ 0x32
 80047b0:	4a33      	ldr	r2, [pc, #204]	@ (8004880 <UART_SetConfig+0x4e4>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047bc:	441c      	add	r4, r3
 80047be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047c2:	2200      	movs	r2, #0
 80047c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80047c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80047c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047cc:	4642      	mov	r2, r8
 80047ce:	464b      	mov	r3, r9
 80047d0:	1891      	adds	r1, r2, r2
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	415b      	adcs	r3, r3
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047dc:	4641      	mov	r1, r8
 80047de:	1851      	adds	r1, r2, r1
 80047e0:	6039      	str	r1, [r7, #0]
 80047e2:	4649      	mov	r1, r9
 80047e4:	414b      	adcs	r3, r1
 80047e6:	607b      	str	r3, [r7, #4]
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047f4:	4659      	mov	r1, fp
 80047f6:	00cb      	lsls	r3, r1, #3
 80047f8:	4651      	mov	r1, sl
 80047fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047fe:	4651      	mov	r1, sl
 8004800:	00ca      	lsls	r2, r1, #3
 8004802:	4610      	mov	r0, r2
 8004804:	4619      	mov	r1, r3
 8004806:	4603      	mov	r3, r0
 8004808:	4642      	mov	r2, r8
 800480a:	189b      	adds	r3, r3, r2
 800480c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800480e:	464b      	mov	r3, r9
 8004810:	460a      	mov	r2, r1
 8004812:	eb42 0303 	adc.w	r3, r2, r3
 8004816:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	663b      	str	r3, [r7, #96]	@ 0x60
 8004822:	667a      	str	r2, [r7, #100]	@ 0x64
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004830:	4649      	mov	r1, r9
 8004832:	008b      	lsls	r3, r1, #2
 8004834:	4641      	mov	r1, r8
 8004836:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800483a:	4641      	mov	r1, r8
 800483c:	008a      	lsls	r2, r1, #2
 800483e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004842:	f7fb fd35 	bl	80002b0 <__aeabi_uldivmod>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4b0d      	ldr	r3, [pc, #52]	@ (8004880 <UART_SetConfig+0x4e4>)
 800484c:	fba3 1302 	umull	r1, r3, r3, r2
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	2164      	movs	r1, #100	@ 0x64
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	3332      	adds	r3, #50	@ 0x32
 800485e:	4a08      	ldr	r2, [pc, #32]	@ (8004880 <UART_SetConfig+0x4e4>)
 8004860:	fba2 2303 	umull	r2, r3, r2, r3
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	f003 020f 	and.w	r2, r3, #15
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4422      	add	r2, r4
 8004872:	609a      	str	r2, [r3, #8]
}
 8004874:	bf00      	nop
 8004876:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800487a:	46bd      	mov	sp, r7
 800487c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004880:	51eb851f 	.word	0x51eb851f

08004884 <std>:
 8004884:	2300      	movs	r3, #0
 8004886:	b510      	push	{r4, lr}
 8004888:	4604      	mov	r4, r0
 800488a:	e9c0 3300 	strd	r3, r3, [r0]
 800488e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004892:	6083      	str	r3, [r0, #8]
 8004894:	8181      	strh	r1, [r0, #12]
 8004896:	6643      	str	r3, [r0, #100]	@ 0x64
 8004898:	81c2      	strh	r2, [r0, #14]
 800489a:	6183      	str	r3, [r0, #24]
 800489c:	4619      	mov	r1, r3
 800489e:	2208      	movs	r2, #8
 80048a0:	305c      	adds	r0, #92	@ 0x5c
 80048a2:	f000 f9f9 	bl	8004c98 <memset>
 80048a6:	4b0d      	ldr	r3, [pc, #52]	@ (80048dc <std+0x58>)
 80048a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80048aa:	4b0d      	ldr	r3, [pc, #52]	@ (80048e0 <std+0x5c>)
 80048ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048ae:	4b0d      	ldr	r3, [pc, #52]	@ (80048e4 <std+0x60>)
 80048b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048b2:	4b0d      	ldr	r3, [pc, #52]	@ (80048e8 <std+0x64>)
 80048b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80048b6:	4b0d      	ldr	r3, [pc, #52]	@ (80048ec <std+0x68>)
 80048b8:	6224      	str	r4, [r4, #32]
 80048ba:	429c      	cmp	r4, r3
 80048bc:	d006      	beq.n	80048cc <std+0x48>
 80048be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048c2:	4294      	cmp	r4, r2
 80048c4:	d002      	beq.n	80048cc <std+0x48>
 80048c6:	33d0      	adds	r3, #208	@ 0xd0
 80048c8:	429c      	cmp	r4, r3
 80048ca:	d105      	bne.n	80048d8 <std+0x54>
 80048cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d4:	f000 ba58 	b.w	8004d88 <__retarget_lock_init_recursive>
 80048d8:	bd10      	pop	{r4, pc}
 80048da:	bf00      	nop
 80048dc:	08004ae9 	.word	0x08004ae9
 80048e0:	08004b0b 	.word	0x08004b0b
 80048e4:	08004b43 	.word	0x08004b43
 80048e8:	08004b67 	.word	0x08004b67
 80048ec:	200001d8 	.word	0x200001d8

080048f0 <stdio_exit_handler>:
 80048f0:	4a02      	ldr	r2, [pc, #8]	@ (80048fc <stdio_exit_handler+0xc>)
 80048f2:	4903      	ldr	r1, [pc, #12]	@ (8004900 <stdio_exit_handler+0x10>)
 80048f4:	4803      	ldr	r0, [pc, #12]	@ (8004904 <stdio_exit_handler+0x14>)
 80048f6:	f000 b869 	b.w	80049cc <_fwalk_sglue>
 80048fa:	bf00      	nop
 80048fc:	2000000c 	.word	0x2000000c
 8004900:	08005629 	.word	0x08005629
 8004904:	2000001c 	.word	0x2000001c

08004908 <cleanup_stdio>:
 8004908:	6841      	ldr	r1, [r0, #4]
 800490a:	4b0c      	ldr	r3, [pc, #48]	@ (800493c <cleanup_stdio+0x34>)
 800490c:	4299      	cmp	r1, r3
 800490e:	b510      	push	{r4, lr}
 8004910:	4604      	mov	r4, r0
 8004912:	d001      	beq.n	8004918 <cleanup_stdio+0x10>
 8004914:	f000 fe88 	bl	8005628 <_fflush_r>
 8004918:	68a1      	ldr	r1, [r4, #8]
 800491a:	4b09      	ldr	r3, [pc, #36]	@ (8004940 <cleanup_stdio+0x38>)
 800491c:	4299      	cmp	r1, r3
 800491e:	d002      	beq.n	8004926 <cleanup_stdio+0x1e>
 8004920:	4620      	mov	r0, r4
 8004922:	f000 fe81 	bl	8005628 <_fflush_r>
 8004926:	68e1      	ldr	r1, [r4, #12]
 8004928:	4b06      	ldr	r3, [pc, #24]	@ (8004944 <cleanup_stdio+0x3c>)
 800492a:	4299      	cmp	r1, r3
 800492c:	d004      	beq.n	8004938 <cleanup_stdio+0x30>
 800492e:	4620      	mov	r0, r4
 8004930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004934:	f000 be78 	b.w	8005628 <_fflush_r>
 8004938:	bd10      	pop	{r4, pc}
 800493a:	bf00      	nop
 800493c:	200001d8 	.word	0x200001d8
 8004940:	20000240 	.word	0x20000240
 8004944:	200002a8 	.word	0x200002a8

08004948 <global_stdio_init.part.0>:
 8004948:	b510      	push	{r4, lr}
 800494a:	4b0b      	ldr	r3, [pc, #44]	@ (8004978 <global_stdio_init.part.0+0x30>)
 800494c:	4c0b      	ldr	r4, [pc, #44]	@ (800497c <global_stdio_init.part.0+0x34>)
 800494e:	4a0c      	ldr	r2, [pc, #48]	@ (8004980 <global_stdio_init.part.0+0x38>)
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	4620      	mov	r0, r4
 8004954:	2200      	movs	r2, #0
 8004956:	2104      	movs	r1, #4
 8004958:	f7ff ff94 	bl	8004884 <std>
 800495c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004960:	2201      	movs	r2, #1
 8004962:	2109      	movs	r1, #9
 8004964:	f7ff ff8e 	bl	8004884 <std>
 8004968:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800496c:	2202      	movs	r2, #2
 800496e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004972:	2112      	movs	r1, #18
 8004974:	f7ff bf86 	b.w	8004884 <std>
 8004978:	20000310 	.word	0x20000310
 800497c:	200001d8 	.word	0x200001d8
 8004980:	080048f1 	.word	0x080048f1

08004984 <__sfp_lock_acquire>:
 8004984:	4801      	ldr	r0, [pc, #4]	@ (800498c <__sfp_lock_acquire+0x8>)
 8004986:	f000 ba00 	b.w	8004d8a <__retarget_lock_acquire_recursive>
 800498a:	bf00      	nop
 800498c:	20000319 	.word	0x20000319

08004990 <__sfp_lock_release>:
 8004990:	4801      	ldr	r0, [pc, #4]	@ (8004998 <__sfp_lock_release+0x8>)
 8004992:	f000 b9fb 	b.w	8004d8c <__retarget_lock_release_recursive>
 8004996:	bf00      	nop
 8004998:	20000319 	.word	0x20000319

0800499c <__sinit>:
 800499c:	b510      	push	{r4, lr}
 800499e:	4604      	mov	r4, r0
 80049a0:	f7ff fff0 	bl	8004984 <__sfp_lock_acquire>
 80049a4:	6a23      	ldr	r3, [r4, #32]
 80049a6:	b11b      	cbz	r3, 80049b0 <__sinit+0x14>
 80049a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ac:	f7ff bff0 	b.w	8004990 <__sfp_lock_release>
 80049b0:	4b04      	ldr	r3, [pc, #16]	@ (80049c4 <__sinit+0x28>)
 80049b2:	6223      	str	r3, [r4, #32]
 80049b4:	4b04      	ldr	r3, [pc, #16]	@ (80049c8 <__sinit+0x2c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1f5      	bne.n	80049a8 <__sinit+0xc>
 80049bc:	f7ff ffc4 	bl	8004948 <global_stdio_init.part.0>
 80049c0:	e7f2      	b.n	80049a8 <__sinit+0xc>
 80049c2:	bf00      	nop
 80049c4:	08004909 	.word	0x08004909
 80049c8:	20000310 	.word	0x20000310

080049cc <_fwalk_sglue>:
 80049cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049d0:	4607      	mov	r7, r0
 80049d2:	4688      	mov	r8, r1
 80049d4:	4614      	mov	r4, r2
 80049d6:	2600      	movs	r6, #0
 80049d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049dc:	f1b9 0901 	subs.w	r9, r9, #1
 80049e0:	d505      	bpl.n	80049ee <_fwalk_sglue+0x22>
 80049e2:	6824      	ldr	r4, [r4, #0]
 80049e4:	2c00      	cmp	r4, #0
 80049e6:	d1f7      	bne.n	80049d8 <_fwalk_sglue+0xc>
 80049e8:	4630      	mov	r0, r6
 80049ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ee:	89ab      	ldrh	r3, [r5, #12]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d907      	bls.n	8004a04 <_fwalk_sglue+0x38>
 80049f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049f8:	3301      	adds	r3, #1
 80049fa:	d003      	beq.n	8004a04 <_fwalk_sglue+0x38>
 80049fc:	4629      	mov	r1, r5
 80049fe:	4638      	mov	r0, r7
 8004a00:	47c0      	blx	r8
 8004a02:	4306      	orrs	r6, r0
 8004a04:	3568      	adds	r5, #104	@ 0x68
 8004a06:	e7e9      	b.n	80049dc <_fwalk_sglue+0x10>

08004a08 <iprintf>:
 8004a08:	b40f      	push	{r0, r1, r2, r3}
 8004a0a:	b507      	push	{r0, r1, r2, lr}
 8004a0c:	4906      	ldr	r1, [pc, #24]	@ (8004a28 <iprintf+0x20>)
 8004a0e:	ab04      	add	r3, sp, #16
 8004a10:	6808      	ldr	r0, [r1, #0]
 8004a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a16:	6881      	ldr	r1, [r0, #8]
 8004a18:	9301      	str	r3, [sp, #4]
 8004a1a:	f000 fadb 	bl	8004fd4 <_vfiprintf_r>
 8004a1e:	b003      	add	sp, #12
 8004a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a24:	b004      	add	sp, #16
 8004a26:	4770      	bx	lr
 8004a28:	20000018 	.word	0x20000018

08004a2c <_puts_r>:
 8004a2c:	6a03      	ldr	r3, [r0, #32]
 8004a2e:	b570      	push	{r4, r5, r6, lr}
 8004a30:	6884      	ldr	r4, [r0, #8]
 8004a32:	4605      	mov	r5, r0
 8004a34:	460e      	mov	r6, r1
 8004a36:	b90b      	cbnz	r3, 8004a3c <_puts_r+0x10>
 8004a38:	f7ff ffb0 	bl	800499c <__sinit>
 8004a3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a3e:	07db      	lsls	r3, r3, #31
 8004a40:	d405      	bmi.n	8004a4e <_puts_r+0x22>
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	0598      	lsls	r0, r3, #22
 8004a46:	d402      	bmi.n	8004a4e <_puts_r+0x22>
 8004a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a4a:	f000 f99e 	bl	8004d8a <__retarget_lock_acquire_recursive>
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	0719      	lsls	r1, r3, #28
 8004a52:	d502      	bpl.n	8004a5a <_puts_r+0x2e>
 8004a54:	6923      	ldr	r3, [r4, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d135      	bne.n	8004ac6 <_puts_r+0x9a>
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f000 f8c5 	bl	8004bec <__swsetup_r>
 8004a62:	b380      	cbz	r0, 8004ac6 <_puts_r+0x9a>
 8004a64:	f04f 35ff 	mov.w	r5, #4294967295
 8004a68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a6a:	07da      	lsls	r2, r3, #31
 8004a6c:	d405      	bmi.n	8004a7a <_puts_r+0x4e>
 8004a6e:	89a3      	ldrh	r3, [r4, #12]
 8004a70:	059b      	lsls	r3, r3, #22
 8004a72:	d402      	bmi.n	8004a7a <_puts_r+0x4e>
 8004a74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a76:	f000 f989 	bl	8004d8c <__retarget_lock_release_recursive>
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	bd70      	pop	{r4, r5, r6, pc}
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	da04      	bge.n	8004a8c <_puts_r+0x60>
 8004a82:	69a2      	ldr	r2, [r4, #24]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	dc17      	bgt.n	8004ab8 <_puts_r+0x8c>
 8004a88:	290a      	cmp	r1, #10
 8004a8a:	d015      	beq.n	8004ab8 <_puts_r+0x8c>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	6022      	str	r2, [r4, #0]
 8004a92:	7019      	strb	r1, [r3, #0]
 8004a94:	68a3      	ldr	r3, [r4, #8]
 8004a96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	60a3      	str	r3, [r4, #8]
 8004a9e:	2900      	cmp	r1, #0
 8004aa0:	d1ed      	bne.n	8004a7e <_puts_r+0x52>
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	da11      	bge.n	8004aca <_puts_r+0x9e>
 8004aa6:	4622      	mov	r2, r4
 8004aa8:	210a      	movs	r1, #10
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 f85f 	bl	8004b6e <__swbuf_r>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d0d7      	beq.n	8004a64 <_puts_r+0x38>
 8004ab4:	250a      	movs	r5, #10
 8004ab6:	e7d7      	b.n	8004a68 <_puts_r+0x3c>
 8004ab8:	4622      	mov	r2, r4
 8004aba:	4628      	mov	r0, r5
 8004abc:	f000 f857 	bl	8004b6e <__swbuf_r>
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d1e7      	bne.n	8004a94 <_puts_r+0x68>
 8004ac4:	e7ce      	b.n	8004a64 <_puts_r+0x38>
 8004ac6:	3e01      	subs	r6, #1
 8004ac8:	e7e4      	b.n	8004a94 <_puts_r+0x68>
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	6022      	str	r2, [r4, #0]
 8004ad0:	220a      	movs	r2, #10
 8004ad2:	701a      	strb	r2, [r3, #0]
 8004ad4:	e7ee      	b.n	8004ab4 <_puts_r+0x88>
	...

08004ad8 <puts>:
 8004ad8:	4b02      	ldr	r3, [pc, #8]	@ (8004ae4 <puts+0xc>)
 8004ada:	4601      	mov	r1, r0
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	f7ff bfa5 	b.w	8004a2c <_puts_r>
 8004ae2:	bf00      	nop
 8004ae4:	20000018 	.word	0x20000018

08004ae8 <__sread>:
 8004ae8:	b510      	push	{r4, lr}
 8004aea:	460c      	mov	r4, r1
 8004aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af0:	f000 f8fc 	bl	8004cec <_read_r>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	bfab      	itete	ge
 8004af8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004afa:	89a3      	ldrhlt	r3, [r4, #12]
 8004afc:	181b      	addge	r3, r3, r0
 8004afe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b02:	bfac      	ite	ge
 8004b04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b06:	81a3      	strhlt	r3, [r4, #12]
 8004b08:	bd10      	pop	{r4, pc}

08004b0a <__swrite>:
 8004b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b0e:	461f      	mov	r7, r3
 8004b10:	898b      	ldrh	r3, [r1, #12]
 8004b12:	05db      	lsls	r3, r3, #23
 8004b14:	4605      	mov	r5, r0
 8004b16:	460c      	mov	r4, r1
 8004b18:	4616      	mov	r6, r2
 8004b1a:	d505      	bpl.n	8004b28 <__swrite+0x1e>
 8004b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b20:	2302      	movs	r3, #2
 8004b22:	2200      	movs	r2, #0
 8004b24:	f000 f8d0 	bl	8004cc8 <_lseek_r>
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b32:	81a3      	strh	r3, [r4, #12]
 8004b34:	4632      	mov	r2, r6
 8004b36:	463b      	mov	r3, r7
 8004b38:	4628      	mov	r0, r5
 8004b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3e:	f000 b8e7 	b.w	8004d10 <_write_r>

08004b42 <__sseek>:
 8004b42:	b510      	push	{r4, lr}
 8004b44:	460c      	mov	r4, r1
 8004b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b4a:	f000 f8bd 	bl	8004cc8 <_lseek_r>
 8004b4e:	1c43      	adds	r3, r0, #1
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	bf15      	itete	ne
 8004b54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b5e:	81a3      	strheq	r3, [r4, #12]
 8004b60:	bf18      	it	ne
 8004b62:	81a3      	strhne	r3, [r4, #12]
 8004b64:	bd10      	pop	{r4, pc}

08004b66 <__sclose>:
 8004b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6a:	f000 b89d 	b.w	8004ca8 <_close_r>

08004b6e <__swbuf_r>:
 8004b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b70:	460e      	mov	r6, r1
 8004b72:	4614      	mov	r4, r2
 8004b74:	4605      	mov	r5, r0
 8004b76:	b118      	cbz	r0, 8004b80 <__swbuf_r+0x12>
 8004b78:	6a03      	ldr	r3, [r0, #32]
 8004b7a:	b90b      	cbnz	r3, 8004b80 <__swbuf_r+0x12>
 8004b7c:	f7ff ff0e 	bl	800499c <__sinit>
 8004b80:	69a3      	ldr	r3, [r4, #24]
 8004b82:	60a3      	str	r3, [r4, #8]
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	071a      	lsls	r2, r3, #28
 8004b88:	d501      	bpl.n	8004b8e <__swbuf_r+0x20>
 8004b8a:	6923      	ldr	r3, [r4, #16]
 8004b8c:	b943      	cbnz	r3, 8004ba0 <__swbuf_r+0x32>
 8004b8e:	4621      	mov	r1, r4
 8004b90:	4628      	mov	r0, r5
 8004b92:	f000 f82b 	bl	8004bec <__swsetup_r>
 8004b96:	b118      	cbz	r0, 8004ba0 <__swbuf_r+0x32>
 8004b98:	f04f 37ff 	mov.w	r7, #4294967295
 8004b9c:	4638      	mov	r0, r7
 8004b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	6922      	ldr	r2, [r4, #16]
 8004ba4:	1a98      	subs	r0, r3, r2
 8004ba6:	6963      	ldr	r3, [r4, #20]
 8004ba8:	b2f6      	uxtb	r6, r6
 8004baa:	4283      	cmp	r3, r0
 8004bac:	4637      	mov	r7, r6
 8004bae:	dc05      	bgt.n	8004bbc <__swbuf_r+0x4e>
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 fd38 	bl	8005628 <_fflush_r>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d1ed      	bne.n	8004b98 <__swbuf_r+0x2a>
 8004bbc:	68a3      	ldr	r3, [r4, #8]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	60a3      	str	r3, [r4, #8]
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	6022      	str	r2, [r4, #0]
 8004bc8:	701e      	strb	r6, [r3, #0]
 8004bca:	6962      	ldr	r2, [r4, #20]
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d004      	beq.n	8004bdc <__swbuf_r+0x6e>
 8004bd2:	89a3      	ldrh	r3, [r4, #12]
 8004bd4:	07db      	lsls	r3, r3, #31
 8004bd6:	d5e1      	bpl.n	8004b9c <__swbuf_r+0x2e>
 8004bd8:	2e0a      	cmp	r6, #10
 8004bda:	d1df      	bne.n	8004b9c <__swbuf_r+0x2e>
 8004bdc:	4621      	mov	r1, r4
 8004bde:	4628      	mov	r0, r5
 8004be0:	f000 fd22 	bl	8005628 <_fflush_r>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d0d9      	beq.n	8004b9c <__swbuf_r+0x2e>
 8004be8:	e7d6      	b.n	8004b98 <__swbuf_r+0x2a>
	...

08004bec <__swsetup_r>:
 8004bec:	b538      	push	{r3, r4, r5, lr}
 8004bee:	4b29      	ldr	r3, [pc, #164]	@ (8004c94 <__swsetup_r+0xa8>)
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	b118      	cbz	r0, 8004c00 <__swsetup_r+0x14>
 8004bf8:	6a03      	ldr	r3, [r0, #32]
 8004bfa:	b90b      	cbnz	r3, 8004c00 <__swsetup_r+0x14>
 8004bfc:	f7ff fece 	bl	800499c <__sinit>
 8004c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c04:	0719      	lsls	r1, r3, #28
 8004c06:	d422      	bmi.n	8004c4e <__swsetup_r+0x62>
 8004c08:	06da      	lsls	r2, r3, #27
 8004c0a:	d407      	bmi.n	8004c1c <__swsetup_r+0x30>
 8004c0c:	2209      	movs	r2, #9
 8004c0e:	602a      	str	r2, [r5, #0]
 8004c10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c14:	81a3      	strh	r3, [r4, #12]
 8004c16:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1a:	e033      	b.n	8004c84 <__swsetup_r+0x98>
 8004c1c:	0758      	lsls	r0, r3, #29
 8004c1e:	d512      	bpl.n	8004c46 <__swsetup_r+0x5a>
 8004c20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c22:	b141      	cbz	r1, 8004c36 <__swsetup_r+0x4a>
 8004c24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c28:	4299      	cmp	r1, r3
 8004c2a:	d002      	beq.n	8004c32 <__swsetup_r+0x46>
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	f000 f8af 	bl	8004d90 <_free_r>
 8004c32:	2300      	movs	r3, #0
 8004c34:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c36:	89a3      	ldrh	r3, [r4, #12]
 8004c38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c3c:	81a3      	strh	r3, [r4, #12]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6063      	str	r3, [r4, #4]
 8004c42:	6923      	ldr	r3, [r4, #16]
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	f043 0308 	orr.w	r3, r3, #8
 8004c4c:	81a3      	strh	r3, [r4, #12]
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	b94b      	cbnz	r3, 8004c66 <__swsetup_r+0x7a>
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c5c:	d003      	beq.n	8004c66 <__swsetup_r+0x7a>
 8004c5e:	4621      	mov	r1, r4
 8004c60:	4628      	mov	r0, r5
 8004c62:	f000 fd2f 	bl	80056c4 <__smakebuf_r>
 8004c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c6a:	f013 0201 	ands.w	r2, r3, #1
 8004c6e:	d00a      	beq.n	8004c86 <__swsetup_r+0x9a>
 8004c70:	2200      	movs	r2, #0
 8004c72:	60a2      	str	r2, [r4, #8]
 8004c74:	6962      	ldr	r2, [r4, #20]
 8004c76:	4252      	negs	r2, r2
 8004c78:	61a2      	str	r2, [r4, #24]
 8004c7a:	6922      	ldr	r2, [r4, #16]
 8004c7c:	b942      	cbnz	r2, 8004c90 <__swsetup_r+0xa4>
 8004c7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c82:	d1c5      	bne.n	8004c10 <__swsetup_r+0x24>
 8004c84:	bd38      	pop	{r3, r4, r5, pc}
 8004c86:	0799      	lsls	r1, r3, #30
 8004c88:	bf58      	it	pl
 8004c8a:	6962      	ldrpl	r2, [r4, #20]
 8004c8c:	60a2      	str	r2, [r4, #8]
 8004c8e:	e7f4      	b.n	8004c7a <__swsetup_r+0x8e>
 8004c90:	2000      	movs	r0, #0
 8004c92:	e7f7      	b.n	8004c84 <__swsetup_r+0x98>
 8004c94:	20000018 	.word	0x20000018

08004c98 <memset>:
 8004c98:	4402      	add	r2, r0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d100      	bne.n	8004ca2 <memset+0xa>
 8004ca0:	4770      	bx	lr
 8004ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ca6:	e7f9      	b.n	8004c9c <memset+0x4>

08004ca8 <_close_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4d06      	ldr	r5, [pc, #24]	@ (8004cc4 <_close_r+0x1c>)
 8004cac:	2300      	movs	r3, #0
 8004cae:	4604      	mov	r4, r0
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	602b      	str	r3, [r5, #0]
 8004cb4:	f7fc f9c3 	bl	800103e <_close>
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	d102      	bne.n	8004cc2 <_close_r+0x1a>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	b103      	cbz	r3, 8004cc2 <_close_r+0x1a>
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	bd38      	pop	{r3, r4, r5, pc}
 8004cc4:	20000314 	.word	0x20000314

08004cc8 <_lseek_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4d07      	ldr	r5, [pc, #28]	@ (8004ce8 <_lseek_r+0x20>)
 8004ccc:	4604      	mov	r4, r0
 8004cce:	4608      	mov	r0, r1
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	602a      	str	r2, [r5, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f7fc f9d8 	bl	800108c <_lseek>
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	d102      	bne.n	8004ce6 <_lseek_r+0x1e>
 8004ce0:	682b      	ldr	r3, [r5, #0]
 8004ce2:	b103      	cbz	r3, 8004ce6 <_lseek_r+0x1e>
 8004ce4:	6023      	str	r3, [r4, #0]
 8004ce6:	bd38      	pop	{r3, r4, r5, pc}
 8004ce8:	20000314 	.word	0x20000314

08004cec <_read_r>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	4d07      	ldr	r5, [pc, #28]	@ (8004d0c <_read_r+0x20>)
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	4608      	mov	r0, r1
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	602a      	str	r2, [r5, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f7fc f982 	bl	8001004 <_read>
 8004d00:	1c43      	adds	r3, r0, #1
 8004d02:	d102      	bne.n	8004d0a <_read_r+0x1e>
 8004d04:	682b      	ldr	r3, [r5, #0]
 8004d06:	b103      	cbz	r3, 8004d0a <_read_r+0x1e>
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	bd38      	pop	{r3, r4, r5, pc}
 8004d0c:	20000314 	.word	0x20000314

08004d10 <_write_r>:
 8004d10:	b538      	push	{r3, r4, r5, lr}
 8004d12:	4d07      	ldr	r5, [pc, #28]	@ (8004d30 <_write_r+0x20>)
 8004d14:	4604      	mov	r4, r0
 8004d16:	4608      	mov	r0, r1
 8004d18:	4611      	mov	r1, r2
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	602a      	str	r2, [r5, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f7fc f868 	bl	8000df4 <_write>
 8004d24:	1c43      	adds	r3, r0, #1
 8004d26:	d102      	bne.n	8004d2e <_write_r+0x1e>
 8004d28:	682b      	ldr	r3, [r5, #0]
 8004d2a:	b103      	cbz	r3, 8004d2e <_write_r+0x1e>
 8004d2c:	6023      	str	r3, [r4, #0]
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
 8004d30:	20000314 	.word	0x20000314

08004d34 <__errno>:
 8004d34:	4b01      	ldr	r3, [pc, #4]	@ (8004d3c <__errno+0x8>)
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	20000018 	.word	0x20000018

08004d40 <__libc_init_array>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	4d0d      	ldr	r5, [pc, #52]	@ (8004d78 <__libc_init_array+0x38>)
 8004d44:	4c0d      	ldr	r4, [pc, #52]	@ (8004d7c <__libc_init_array+0x3c>)
 8004d46:	1b64      	subs	r4, r4, r5
 8004d48:	10a4      	asrs	r4, r4, #2
 8004d4a:	2600      	movs	r6, #0
 8004d4c:	42a6      	cmp	r6, r4
 8004d4e:	d109      	bne.n	8004d64 <__libc_init_array+0x24>
 8004d50:	4d0b      	ldr	r5, [pc, #44]	@ (8004d80 <__libc_init_array+0x40>)
 8004d52:	4c0c      	ldr	r4, [pc, #48]	@ (8004d84 <__libc_init_array+0x44>)
 8004d54:	f000 fd24 	bl	80057a0 <_init>
 8004d58:	1b64      	subs	r4, r4, r5
 8004d5a:	10a4      	asrs	r4, r4, #2
 8004d5c:	2600      	movs	r6, #0
 8004d5e:	42a6      	cmp	r6, r4
 8004d60:	d105      	bne.n	8004d6e <__libc_init_array+0x2e>
 8004d62:	bd70      	pop	{r4, r5, r6, pc}
 8004d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d68:	4798      	blx	r3
 8004d6a:	3601      	adds	r6, #1
 8004d6c:	e7ee      	b.n	8004d4c <__libc_init_array+0xc>
 8004d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d72:	4798      	blx	r3
 8004d74:	3601      	adds	r6, #1
 8004d76:	e7f2      	b.n	8004d5e <__libc_init_array+0x1e>
 8004d78:	0800599c 	.word	0x0800599c
 8004d7c:	0800599c 	.word	0x0800599c
 8004d80:	0800599c 	.word	0x0800599c
 8004d84:	080059a0 	.word	0x080059a0

08004d88 <__retarget_lock_init_recursive>:
 8004d88:	4770      	bx	lr

08004d8a <__retarget_lock_acquire_recursive>:
 8004d8a:	4770      	bx	lr

08004d8c <__retarget_lock_release_recursive>:
 8004d8c:	4770      	bx	lr
	...

08004d90 <_free_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	4605      	mov	r5, r0
 8004d94:	2900      	cmp	r1, #0
 8004d96:	d041      	beq.n	8004e1c <_free_r+0x8c>
 8004d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d9c:	1f0c      	subs	r4, r1, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bfb8      	it	lt
 8004da2:	18e4      	addlt	r4, r4, r3
 8004da4:	f000 f8e0 	bl	8004f68 <__malloc_lock>
 8004da8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e20 <_free_r+0x90>)
 8004daa:	6813      	ldr	r3, [r2, #0]
 8004dac:	b933      	cbnz	r3, 8004dbc <_free_r+0x2c>
 8004dae:	6063      	str	r3, [r4, #4]
 8004db0:	6014      	str	r4, [r2, #0]
 8004db2:	4628      	mov	r0, r5
 8004db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004db8:	f000 b8dc 	b.w	8004f74 <__malloc_unlock>
 8004dbc:	42a3      	cmp	r3, r4
 8004dbe:	d908      	bls.n	8004dd2 <_free_r+0x42>
 8004dc0:	6820      	ldr	r0, [r4, #0]
 8004dc2:	1821      	adds	r1, r4, r0
 8004dc4:	428b      	cmp	r3, r1
 8004dc6:	bf01      	itttt	eq
 8004dc8:	6819      	ldreq	r1, [r3, #0]
 8004dca:	685b      	ldreq	r3, [r3, #4]
 8004dcc:	1809      	addeq	r1, r1, r0
 8004dce:	6021      	streq	r1, [r4, #0]
 8004dd0:	e7ed      	b.n	8004dae <_free_r+0x1e>
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	b10b      	cbz	r3, 8004ddc <_free_r+0x4c>
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	d9fa      	bls.n	8004dd2 <_free_r+0x42>
 8004ddc:	6811      	ldr	r1, [r2, #0]
 8004dde:	1850      	adds	r0, r2, r1
 8004de0:	42a0      	cmp	r0, r4
 8004de2:	d10b      	bne.n	8004dfc <_free_r+0x6c>
 8004de4:	6820      	ldr	r0, [r4, #0]
 8004de6:	4401      	add	r1, r0
 8004de8:	1850      	adds	r0, r2, r1
 8004dea:	4283      	cmp	r3, r0
 8004dec:	6011      	str	r1, [r2, #0]
 8004dee:	d1e0      	bne.n	8004db2 <_free_r+0x22>
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	6053      	str	r3, [r2, #4]
 8004df6:	4408      	add	r0, r1
 8004df8:	6010      	str	r0, [r2, #0]
 8004dfa:	e7da      	b.n	8004db2 <_free_r+0x22>
 8004dfc:	d902      	bls.n	8004e04 <_free_r+0x74>
 8004dfe:	230c      	movs	r3, #12
 8004e00:	602b      	str	r3, [r5, #0]
 8004e02:	e7d6      	b.n	8004db2 <_free_r+0x22>
 8004e04:	6820      	ldr	r0, [r4, #0]
 8004e06:	1821      	adds	r1, r4, r0
 8004e08:	428b      	cmp	r3, r1
 8004e0a:	bf04      	itt	eq
 8004e0c:	6819      	ldreq	r1, [r3, #0]
 8004e0e:	685b      	ldreq	r3, [r3, #4]
 8004e10:	6063      	str	r3, [r4, #4]
 8004e12:	bf04      	itt	eq
 8004e14:	1809      	addeq	r1, r1, r0
 8004e16:	6021      	streq	r1, [r4, #0]
 8004e18:	6054      	str	r4, [r2, #4]
 8004e1a:	e7ca      	b.n	8004db2 <_free_r+0x22>
 8004e1c:	bd38      	pop	{r3, r4, r5, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000320 	.word	0x20000320

08004e24 <sbrk_aligned>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	4e0f      	ldr	r6, [pc, #60]	@ (8004e64 <sbrk_aligned+0x40>)
 8004e28:	460c      	mov	r4, r1
 8004e2a:	6831      	ldr	r1, [r6, #0]
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	b911      	cbnz	r1, 8004e36 <sbrk_aligned+0x12>
 8004e30:	f000 fca6 	bl	8005780 <_sbrk_r>
 8004e34:	6030      	str	r0, [r6, #0]
 8004e36:	4621      	mov	r1, r4
 8004e38:	4628      	mov	r0, r5
 8004e3a:	f000 fca1 	bl	8005780 <_sbrk_r>
 8004e3e:	1c43      	adds	r3, r0, #1
 8004e40:	d103      	bne.n	8004e4a <sbrk_aligned+0x26>
 8004e42:	f04f 34ff 	mov.w	r4, #4294967295
 8004e46:	4620      	mov	r0, r4
 8004e48:	bd70      	pop	{r4, r5, r6, pc}
 8004e4a:	1cc4      	adds	r4, r0, #3
 8004e4c:	f024 0403 	bic.w	r4, r4, #3
 8004e50:	42a0      	cmp	r0, r4
 8004e52:	d0f8      	beq.n	8004e46 <sbrk_aligned+0x22>
 8004e54:	1a21      	subs	r1, r4, r0
 8004e56:	4628      	mov	r0, r5
 8004e58:	f000 fc92 	bl	8005780 <_sbrk_r>
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d1f2      	bne.n	8004e46 <sbrk_aligned+0x22>
 8004e60:	e7ef      	b.n	8004e42 <sbrk_aligned+0x1e>
 8004e62:	bf00      	nop
 8004e64:	2000031c 	.word	0x2000031c

08004e68 <_malloc_r>:
 8004e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e6c:	1ccd      	adds	r5, r1, #3
 8004e6e:	f025 0503 	bic.w	r5, r5, #3
 8004e72:	3508      	adds	r5, #8
 8004e74:	2d0c      	cmp	r5, #12
 8004e76:	bf38      	it	cc
 8004e78:	250c      	movcc	r5, #12
 8004e7a:	2d00      	cmp	r5, #0
 8004e7c:	4606      	mov	r6, r0
 8004e7e:	db01      	blt.n	8004e84 <_malloc_r+0x1c>
 8004e80:	42a9      	cmp	r1, r5
 8004e82:	d904      	bls.n	8004e8e <_malloc_r+0x26>
 8004e84:	230c      	movs	r3, #12
 8004e86:	6033      	str	r3, [r6, #0]
 8004e88:	2000      	movs	r0, #0
 8004e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f64 <_malloc_r+0xfc>
 8004e92:	f000 f869 	bl	8004f68 <__malloc_lock>
 8004e96:	f8d8 3000 	ldr.w	r3, [r8]
 8004e9a:	461c      	mov	r4, r3
 8004e9c:	bb44      	cbnz	r4, 8004ef0 <_malloc_r+0x88>
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	f7ff ffbf 	bl	8004e24 <sbrk_aligned>
 8004ea6:	1c43      	adds	r3, r0, #1
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	d158      	bne.n	8004f5e <_malloc_r+0xf6>
 8004eac:	f8d8 4000 	ldr.w	r4, [r8]
 8004eb0:	4627      	mov	r7, r4
 8004eb2:	2f00      	cmp	r7, #0
 8004eb4:	d143      	bne.n	8004f3e <_malloc_r+0xd6>
 8004eb6:	2c00      	cmp	r4, #0
 8004eb8:	d04b      	beq.n	8004f52 <_malloc_r+0xea>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	4639      	mov	r1, r7
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	eb04 0903 	add.w	r9, r4, r3
 8004ec4:	f000 fc5c 	bl	8005780 <_sbrk_r>
 8004ec8:	4581      	cmp	r9, r0
 8004eca:	d142      	bne.n	8004f52 <_malloc_r+0xea>
 8004ecc:	6821      	ldr	r1, [r4, #0]
 8004ece:	1a6d      	subs	r5, r5, r1
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	f7ff ffa6 	bl	8004e24 <sbrk_aligned>
 8004ed8:	3001      	adds	r0, #1
 8004eda:	d03a      	beq.n	8004f52 <_malloc_r+0xea>
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	442b      	add	r3, r5
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	bb62      	cbnz	r2, 8004f44 <_malloc_r+0xdc>
 8004eea:	f8c8 7000 	str.w	r7, [r8]
 8004eee:	e00f      	b.n	8004f10 <_malloc_r+0xa8>
 8004ef0:	6822      	ldr	r2, [r4, #0]
 8004ef2:	1b52      	subs	r2, r2, r5
 8004ef4:	d420      	bmi.n	8004f38 <_malloc_r+0xd0>
 8004ef6:	2a0b      	cmp	r2, #11
 8004ef8:	d917      	bls.n	8004f2a <_malloc_r+0xc2>
 8004efa:	1961      	adds	r1, r4, r5
 8004efc:	42a3      	cmp	r3, r4
 8004efe:	6025      	str	r5, [r4, #0]
 8004f00:	bf18      	it	ne
 8004f02:	6059      	strne	r1, [r3, #4]
 8004f04:	6863      	ldr	r3, [r4, #4]
 8004f06:	bf08      	it	eq
 8004f08:	f8c8 1000 	streq.w	r1, [r8]
 8004f0c:	5162      	str	r2, [r4, r5]
 8004f0e:	604b      	str	r3, [r1, #4]
 8004f10:	4630      	mov	r0, r6
 8004f12:	f000 f82f 	bl	8004f74 <__malloc_unlock>
 8004f16:	f104 000b 	add.w	r0, r4, #11
 8004f1a:	1d23      	adds	r3, r4, #4
 8004f1c:	f020 0007 	bic.w	r0, r0, #7
 8004f20:	1ac2      	subs	r2, r0, r3
 8004f22:	bf1c      	itt	ne
 8004f24:	1a1b      	subne	r3, r3, r0
 8004f26:	50a3      	strne	r3, [r4, r2]
 8004f28:	e7af      	b.n	8004e8a <_malloc_r+0x22>
 8004f2a:	6862      	ldr	r2, [r4, #4]
 8004f2c:	42a3      	cmp	r3, r4
 8004f2e:	bf0c      	ite	eq
 8004f30:	f8c8 2000 	streq.w	r2, [r8]
 8004f34:	605a      	strne	r2, [r3, #4]
 8004f36:	e7eb      	b.n	8004f10 <_malloc_r+0xa8>
 8004f38:	4623      	mov	r3, r4
 8004f3a:	6864      	ldr	r4, [r4, #4]
 8004f3c:	e7ae      	b.n	8004e9c <_malloc_r+0x34>
 8004f3e:	463c      	mov	r4, r7
 8004f40:	687f      	ldr	r7, [r7, #4]
 8004f42:	e7b6      	b.n	8004eb2 <_malloc_r+0x4a>
 8004f44:	461a      	mov	r2, r3
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	42a3      	cmp	r3, r4
 8004f4a:	d1fb      	bne.n	8004f44 <_malloc_r+0xdc>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	6053      	str	r3, [r2, #4]
 8004f50:	e7de      	b.n	8004f10 <_malloc_r+0xa8>
 8004f52:	230c      	movs	r3, #12
 8004f54:	6033      	str	r3, [r6, #0]
 8004f56:	4630      	mov	r0, r6
 8004f58:	f000 f80c 	bl	8004f74 <__malloc_unlock>
 8004f5c:	e794      	b.n	8004e88 <_malloc_r+0x20>
 8004f5e:	6005      	str	r5, [r0, #0]
 8004f60:	e7d6      	b.n	8004f10 <_malloc_r+0xa8>
 8004f62:	bf00      	nop
 8004f64:	20000320 	.word	0x20000320

08004f68 <__malloc_lock>:
 8004f68:	4801      	ldr	r0, [pc, #4]	@ (8004f70 <__malloc_lock+0x8>)
 8004f6a:	f7ff bf0e 	b.w	8004d8a <__retarget_lock_acquire_recursive>
 8004f6e:	bf00      	nop
 8004f70:	20000318 	.word	0x20000318

08004f74 <__malloc_unlock>:
 8004f74:	4801      	ldr	r0, [pc, #4]	@ (8004f7c <__malloc_unlock+0x8>)
 8004f76:	f7ff bf09 	b.w	8004d8c <__retarget_lock_release_recursive>
 8004f7a:	bf00      	nop
 8004f7c:	20000318 	.word	0x20000318

08004f80 <__sfputc_r>:
 8004f80:	6893      	ldr	r3, [r2, #8]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	b410      	push	{r4}
 8004f88:	6093      	str	r3, [r2, #8]
 8004f8a:	da08      	bge.n	8004f9e <__sfputc_r+0x1e>
 8004f8c:	6994      	ldr	r4, [r2, #24]
 8004f8e:	42a3      	cmp	r3, r4
 8004f90:	db01      	blt.n	8004f96 <__sfputc_r+0x16>
 8004f92:	290a      	cmp	r1, #10
 8004f94:	d103      	bne.n	8004f9e <__sfputc_r+0x1e>
 8004f96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f9a:	f7ff bde8 	b.w	8004b6e <__swbuf_r>
 8004f9e:	6813      	ldr	r3, [r2, #0]
 8004fa0:	1c58      	adds	r0, r3, #1
 8004fa2:	6010      	str	r0, [r2, #0]
 8004fa4:	7019      	strb	r1, [r3, #0]
 8004fa6:	4608      	mov	r0, r1
 8004fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <__sfputs_r>:
 8004fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb0:	4606      	mov	r6, r0
 8004fb2:	460f      	mov	r7, r1
 8004fb4:	4614      	mov	r4, r2
 8004fb6:	18d5      	adds	r5, r2, r3
 8004fb8:	42ac      	cmp	r4, r5
 8004fba:	d101      	bne.n	8004fc0 <__sfputs_r+0x12>
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	e007      	b.n	8004fd0 <__sfputs_r+0x22>
 8004fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fc4:	463a      	mov	r2, r7
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f7ff ffda 	bl	8004f80 <__sfputc_r>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d1f3      	bne.n	8004fb8 <__sfputs_r+0xa>
 8004fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fd4 <_vfiprintf_r>:
 8004fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd8:	460d      	mov	r5, r1
 8004fda:	b09d      	sub	sp, #116	@ 0x74
 8004fdc:	4614      	mov	r4, r2
 8004fde:	4698      	mov	r8, r3
 8004fe0:	4606      	mov	r6, r0
 8004fe2:	b118      	cbz	r0, 8004fec <_vfiprintf_r+0x18>
 8004fe4:	6a03      	ldr	r3, [r0, #32]
 8004fe6:	b90b      	cbnz	r3, 8004fec <_vfiprintf_r+0x18>
 8004fe8:	f7ff fcd8 	bl	800499c <__sinit>
 8004fec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fee:	07d9      	lsls	r1, r3, #31
 8004ff0:	d405      	bmi.n	8004ffe <_vfiprintf_r+0x2a>
 8004ff2:	89ab      	ldrh	r3, [r5, #12]
 8004ff4:	059a      	lsls	r2, r3, #22
 8004ff6:	d402      	bmi.n	8004ffe <_vfiprintf_r+0x2a>
 8004ff8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ffa:	f7ff fec6 	bl	8004d8a <__retarget_lock_acquire_recursive>
 8004ffe:	89ab      	ldrh	r3, [r5, #12]
 8005000:	071b      	lsls	r3, r3, #28
 8005002:	d501      	bpl.n	8005008 <_vfiprintf_r+0x34>
 8005004:	692b      	ldr	r3, [r5, #16]
 8005006:	b99b      	cbnz	r3, 8005030 <_vfiprintf_r+0x5c>
 8005008:	4629      	mov	r1, r5
 800500a:	4630      	mov	r0, r6
 800500c:	f7ff fdee 	bl	8004bec <__swsetup_r>
 8005010:	b170      	cbz	r0, 8005030 <_vfiprintf_r+0x5c>
 8005012:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005014:	07dc      	lsls	r4, r3, #31
 8005016:	d504      	bpl.n	8005022 <_vfiprintf_r+0x4e>
 8005018:	f04f 30ff 	mov.w	r0, #4294967295
 800501c:	b01d      	add	sp, #116	@ 0x74
 800501e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005022:	89ab      	ldrh	r3, [r5, #12]
 8005024:	0598      	lsls	r0, r3, #22
 8005026:	d4f7      	bmi.n	8005018 <_vfiprintf_r+0x44>
 8005028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800502a:	f7ff feaf 	bl	8004d8c <__retarget_lock_release_recursive>
 800502e:	e7f3      	b.n	8005018 <_vfiprintf_r+0x44>
 8005030:	2300      	movs	r3, #0
 8005032:	9309      	str	r3, [sp, #36]	@ 0x24
 8005034:	2320      	movs	r3, #32
 8005036:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800503a:	f8cd 800c 	str.w	r8, [sp, #12]
 800503e:	2330      	movs	r3, #48	@ 0x30
 8005040:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80051f0 <_vfiprintf_r+0x21c>
 8005044:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005048:	f04f 0901 	mov.w	r9, #1
 800504c:	4623      	mov	r3, r4
 800504e:	469a      	mov	sl, r3
 8005050:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005054:	b10a      	cbz	r2, 800505a <_vfiprintf_r+0x86>
 8005056:	2a25      	cmp	r2, #37	@ 0x25
 8005058:	d1f9      	bne.n	800504e <_vfiprintf_r+0x7a>
 800505a:	ebba 0b04 	subs.w	fp, sl, r4
 800505e:	d00b      	beq.n	8005078 <_vfiprintf_r+0xa4>
 8005060:	465b      	mov	r3, fp
 8005062:	4622      	mov	r2, r4
 8005064:	4629      	mov	r1, r5
 8005066:	4630      	mov	r0, r6
 8005068:	f7ff ffa1 	bl	8004fae <__sfputs_r>
 800506c:	3001      	adds	r0, #1
 800506e:	f000 80a7 	beq.w	80051c0 <_vfiprintf_r+0x1ec>
 8005072:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005074:	445a      	add	r2, fp
 8005076:	9209      	str	r2, [sp, #36]	@ 0x24
 8005078:	f89a 3000 	ldrb.w	r3, [sl]
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 809f 	beq.w	80051c0 <_vfiprintf_r+0x1ec>
 8005082:	2300      	movs	r3, #0
 8005084:	f04f 32ff 	mov.w	r2, #4294967295
 8005088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800508c:	f10a 0a01 	add.w	sl, sl, #1
 8005090:	9304      	str	r3, [sp, #16]
 8005092:	9307      	str	r3, [sp, #28]
 8005094:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005098:	931a      	str	r3, [sp, #104]	@ 0x68
 800509a:	4654      	mov	r4, sl
 800509c:	2205      	movs	r2, #5
 800509e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a2:	4853      	ldr	r0, [pc, #332]	@ (80051f0 <_vfiprintf_r+0x21c>)
 80050a4:	f7fb f8b4 	bl	8000210 <memchr>
 80050a8:	9a04      	ldr	r2, [sp, #16]
 80050aa:	b9d8      	cbnz	r0, 80050e4 <_vfiprintf_r+0x110>
 80050ac:	06d1      	lsls	r1, r2, #27
 80050ae:	bf44      	itt	mi
 80050b0:	2320      	movmi	r3, #32
 80050b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050b6:	0713      	lsls	r3, r2, #28
 80050b8:	bf44      	itt	mi
 80050ba:	232b      	movmi	r3, #43	@ 0x2b
 80050bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050c0:	f89a 3000 	ldrb.w	r3, [sl]
 80050c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80050c6:	d015      	beq.n	80050f4 <_vfiprintf_r+0x120>
 80050c8:	9a07      	ldr	r2, [sp, #28]
 80050ca:	4654      	mov	r4, sl
 80050cc:	2000      	movs	r0, #0
 80050ce:	f04f 0c0a 	mov.w	ip, #10
 80050d2:	4621      	mov	r1, r4
 80050d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050d8:	3b30      	subs	r3, #48	@ 0x30
 80050da:	2b09      	cmp	r3, #9
 80050dc:	d94b      	bls.n	8005176 <_vfiprintf_r+0x1a2>
 80050de:	b1b0      	cbz	r0, 800510e <_vfiprintf_r+0x13a>
 80050e0:	9207      	str	r2, [sp, #28]
 80050e2:	e014      	b.n	800510e <_vfiprintf_r+0x13a>
 80050e4:	eba0 0308 	sub.w	r3, r0, r8
 80050e8:	fa09 f303 	lsl.w	r3, r9, r3
 80050ec:	4313      	orrs	r3, r2
 80050ee:	9304      	str	r3, [sp, #16]
 80050f0:	46a2      	mov	sl, r4
 80050f2:	e7d2      	b.n	800509a <_vfiprintf_r+0xc6>
 80050f4:	9b03      	ldr	r3, [sp, #12]
 80050f6:	1d19      	adds	r1, r3, #4
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	9103      	str	r1, [sp, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	bfbb      	ittet	lt
 8005100:	425b      	neglt	r3, r3
 8005102:	f042 0202 	orrlt.w	r2, r2, #2
 8005106:	9307      	strge	r3, [sp, #28]
 8005108:	9307      	strlt	r3, [sp, #28]
 800510a:	bfb8      	it	lt
 800510c:	9204      	strlt	r2, [sp, #16]
 800510e:	7823      	ldrb	r3, [r4, #0]
 8005110:	2b2e      	cmp	r3, #46	@ 0x2e
 8005112:	d10a      	bne.n	800512a <_vfiprintf_r+0x156>
 8005114:	7863      	ldrb	r3, [r4, #1]
 8005116:	2b2a      	cmp	r3, #42	@ 0x2a
 8005118:	d132      	bne.n	8005180 <_vfiprintf_r+0x1ac>
 800511a:	9b03      	ldr	r3, [sp, #12]
 800511c:	1d1a      	adds	r2, r3, #4
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	9203      	str	r2, [sp, #12]
 8005122:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005126:	3402      	adds	r4, #2
 8005128:	9305      	str	r3, [sp, #20]
 800512a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005200 <_vfiprintf_r+0x22c>
 800512e:	7821      	ldrb	r1, [r4, #0]
 8005130:	2203      	movs	r2, #3
 8005132:	4650      	mov	r0, sl
 8005134:	f7fb f86c 	bl	8000210 <memchr>
 8005138:	b138      	cbz	r0, 800514a <_vfiprintf_r+0x176>
 800513a:	9b04      	ldr	r3, [sp, #16]
 800513c:	eba0 000a 	sub.w	r0, r0, sl
 8005140:	2240      	movs	r2, #64	@ 0x40
 8005142:	4082      	lsls	r2, r0
 8005144:	4313      	orrs	r3, r2
 8005146:	3401      	adds	r4, #1
 8005148:	9304      	str	r3, [sp, #16]
 800514a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800514e:	4829      	ldr	r0, [pc, #164]	@ (80051f4 <_vfiprintf_r+0x220>)
 8005150:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005154:	2206      	movs	r2, #6
 8005156:	f7fb f85b 	bl	8000210 <memchr>
 800515a:	2800      	cmp	r0, #0
 800515c:	d03f      	beq.n	80051de <_vfiprintf_r+0x20a>
 800515e:	4b26      	ldr	r3, [pc, #152]	@ (80051f8 <_vfiprintf_r+0x224>)
 8005160:	bb1b      	cbnz	r3, 80051aa <_vfiprintf_r+0x1d6>
 8005162:	9b03      	ldr	r3, [sp, #12]
 8005164:	3307      	adds	r3, #7
 8005166:	f023 0307 	bic.w	r3, r3, #7
 800516a:	3308      	adds	r3, #8
 800516c:	9303      	str	r3, [sp, #12]
 800516e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005170:	443b      	add	r3, r7
 8005172:	9309      	str	r3, [sp, #36]	@ 0x24
 8005174:	e76a      	b.n	800504c <_vfiprintf_r+0x78>
 8005176:	fb0c 3202 	mla	r2, ip, r2, r3
 800517a:	460c      	mov	r4, r1
 800517c:	2001      	movs	r0, #1
 800517e:	e7a8      	b.n	80050d2 <_vfiprintf_r+0xfe>
 8005180:	2300      	movs	r3, #0
 8005182:	3401      	adds	r4, #1
 8005184:	9305      	str	r3, [sp, #20]
 8005186:	4619      	mov	r1, r3
 8005188:	f04f 0c0a 	mov.w	ip, #10
 800518c:	4620      	mov	r0, r4
 800518e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005192:	3a30      	subs	r2, #48	@ 0x30
 8005194:	2a09      	cmp	r2, #9
 8005196:	d903      	bls.n	80051a0 <_vfiprintf_r+0x1cc>
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0c6      	beq.n	800512a <_vfiprintf_r+0x156>
 800519c:	9105      	str	r1, [sp, #20]
 800519e:	e7c4      	b.n	800512a <_vfiprintf_r+0x156>
 80051a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80051a4:	4604      	mov	r4, r0
 80051a6:	2301      	movs	r3, #1
 80051a8:	e7f0      	b.n	800518c <_vfiprintf_r+0x1b8>
 80051aa:	ab03      	add	r3, sp, #12
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	462a      	mov	r2, r5
 80051b0:	4b12      	ldr	r3, [pc, #72]	@ (80051fc <_vfiprintf_r+0x228>)
 80051b2:	a904      	add	r1, sp, #16
 80051b4:	4630      	mov	r0, r6
 80051b6:	f3af 8000 	nop.w
 80051ba:	4607      	mov	r7, r0
 80051bc:	1c78      	adds	r0, r7, #1
 80051be:	d1d6      	bne.n	800516e <_vfiprintf_r+0x19a>
 80051c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051c2:	07d9      	lsls	r1, r3, #31
 80051c4:	d405      	bmi.n	80051d2 <_vfiprintf_r+0x1fe>
 80051c6:	89ab      	ldrh	r3, [r5, #12]
 80051c8:	059a      	lsls	r2, r3, #22
 80051ca:	d402      	bmi.n	80051d2 <_vfiprintf_r+0x1fe>
 80051cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051ce:	f7ff fddd 	bl	8004d8c <__retarget_lock_release_recursive>
 80051d2:	89ab      	ldrh	r3, [r5, #12]
 80051d4:	065b      	lsls	r3, r3, #25
 80051d6:	f53f af1f 	bmi.w	8005018 <_vfiprintf_r+0x44>
 80051da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051dc:	e71e      	b.n	800501c <_vfiprintf_r+0x48>
 80051de:	ab03      	add	r3, sp, #12
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	462a      	mov	r2, r5
 80051e4:	4b05      	ldr	r3, [pc, #20]	@ (80051fc <_vfiprintf_r+0x228>)
 80051e6:	a904      	add	r1, sp, #16
 80051e8:	4630      	mov	r0, r6
 80051ea:	f000 f879 	bl	80052e0 <_printf_i>
 80051ee:	e7e4      	b.n	80051ba <_vfiprintf_r+0x1e6>
 80051f0:	08005960 	.word	0x08005960
 80051f4:	0800596a 	.word	0x0800596a
 80051f8:	00000000 	.word	0x00000000
 80051fc:	08004faf 	.word	0x08004faf
 8005200:	08005966 	.word	0x08005966

08005204 <_printf_common>:
 8005204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005208:	4616      	mov	r6, r2
 800520a:	4698      	mov	r8, r3
 800520c:	688a      	ldr	r2, [r1, #8]
 800520e:	690b      	ldr	r3, [r1, #16]
 8005210:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005214:	4293      	cmp	r3, r2
 8005216:	bfb8      	it	lt
 8005218:	4613      	movlt	r3, r2
 800521a:	6033      	str	r3, [r6, #0]
 800521c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005220:	4607      	mov	r7, r0
 8005222:	460c      	mov	r4, r1
 8005224:	b10a      	cbz	r2, 800522a <_printf_common+0x26>
 8005226:	3301      	adds	r3, #1
 8005228:	6033      	str	r3, [r6, #0]
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	0699      	lsls	r1, r3, #26
 800522e:	bf42      	ittt	mi
 8005230:	6833      	ldrmi	r3, [r6, #0]
 8005232:	3302      	addmi	r3, #2
 8005234:	6033      	strmi	r3, [r6, #0]
 8005236:	6825      	ldr	r5, [r4, #0]
 8005238:	f015 0506 	ands.w	r5, r5, #6
 800523c:	d106      	bne.n	800524c <_printf_common+0x48>
 800523e:	f104 0a19 	add.w	sl, r4, #25
 8005242:	68e3      	ldr	r3, [r4, #12]
 8005244:	6832      	ldr	r2, [r6, #0]
 8005246:	1a9b      	subs	r3, r3, r2
 8005248:	42ab      	cmp	r3, r5
 800524a:	dc26      	bgt.n	800529a <_printf_common+0x96>
 800524c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005250:	6822      	ldr	r2, [r4, #0]
 8005252:	3b00      	subs	r3, #0
 8005254:	bf18      	it	ne
 8005256:	2301      	movne	r3, #1
 8005258:	0692      	lsls	r2, r2, #26
 800525a:	d42b      	bmi.n	80052b4 <_printf_common+0xb0>
 800525c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005260:	4641      	mov	r1, r8
 8005262:	4638      	mov	r0, r7
 8005264:	47c8      	blx	r9
 8005266:	3001      	adds	r0, #1
 8005268:	d01e      	beq.n	80052a8 <_printf_common+0xa4>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	6922      	ldr	r2, [r4, #16]
 800526e:	f003 0306 	and.w	r3, r3, #6
 8005272:	2b04      	cmp	r3, #4
 8005274:	bf02      	ittt	eq
 8005276:	68e5      	ldreq	r5, [r4, #12]
 8005278:	6833      	ldreq	r3, [r6, #0]
 800527a:	1aed      	subeq	r5, r5, r3
 800527c:	68a3      	ldr	r3, [r4, #8]
 800527e:	bf0c      	ite	eq
 8005280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005284:	2500      	movne	r5, #0
 8005286:	4293      	cmp	r3, r2
 8005288:	bfc4      	itt	gt
 800528a:	1a9b      	subgt	r3, r3, r2
 800528c:	18ed      	addgt	r5, r5, r3
 800528e:	2600      	movs	r6, #0
 8005290:	341a      	adds	r4, #26
 8005292:	42b5      	cmp	r5, r6
 8005294:	d11a      	bne.n	80052cc <_printf_common+0xc8>
 8005296:	2000      	movs	r0, #0
 8005298:	e008      	b.n	80052ac <_printf_common+0xa8>
 800529a:	2301      	movs	r3, #1
 800529c:	4652      	mov	r2, sl
 800529e:	4641      	mov	r1, r8
 80052a0:	4638      	mov	r0, r7
 80052a2:	47c8      	blx	r9
 80052a4:	3001      	adds	r0, #1
 80052a6:	d103      	bne.n	80052b0 <_printf_common+0xac>
 80052a8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b0:	3501      	adds	r5, #1
 80052b2:	e7c6      	b.n	8005242 <_printf_common+0x3e>
 80052b4:	18e1      	adds	r1, r4, r3
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	2030      	movs	r0, #48	@ 0x30
 80052ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052be:	4422      	add	r2, r4
 80052c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052c8:	3302      	adds	r3, #2
 80052ca:	e7c7      	b.n	800525c <_printf_common+0x58>
 80052cc:	2301      	movs	r3, #1
 80052ce:	4622      	mov	r2, r4
 80052d0:	4641      	mov	r1, r8
 80052d2:	4638      	mov	r0, r7
 80052d4:	47c8      	blx	r9
 80052d6:	3001      	adds	r0, #1
 80052d8:	d0e6      	beq.n	80052a8 <_printf_common+0xa4>
 80052da:	3601      	adds	r6, #1
 80052dc:	e7d9      	b.n	8005292 <_printf_common+0x8e>
	...

080052e0 <_printf_i>:
 80052e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052e4:	7e0f      	ldrb	r7, [r1, #24]
 80052e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052e8:	2f78      	cmp	r7, #120	@ 0x78
 80052ea:	4691      	mov	r9, r2
 80052ec:	4680      	mov	r8, r0
 80052ee:	460c      	mov	r4, r1
 80052f0:	469a      	mov	sl, r3
 80052f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052f6:	d807      	bhi.n	8005308 <_printf_i+0x28>
 80052f8:	2f62      	cmp	r7, #98	@ 0x62
 80052fa:	d80a      	bhi.n	8005312 <_printf_i+0x32>
 80052fc:	2f00      	cmp	r7, #0
 80052fe:	f000 80d2 	beq.w	80054a6 <_printf_i+0x1c6>
 8005302:	2f58      	cmp	r7, #88	@ 0x58
 8005304:	f000 80b9 	beq.w	800547a <_printf_i+0x19a>
 8005308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800530c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005310:	e03a      	b.n	8005388 <_printf_i+0xa8>
 8005312:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005316:	2b15      	cmp	r3, #21
 8005318:	d8f6      	bhi.n	8005308 <_printf_i+0x28>
 800531a:	a101      	add	r1, pc, #4	@ (adr r1, 8005320 <_printf_i+0x40>)
 800531c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005320:	08005379 	.word	0x08005379
 8005324:	0800538d 	.word	0x0800538d
 8005328:	08005309 	.word	0x08005309
 800532c:	08005309 	.word	0x08005309
 8005330:	08005309 	.word	0x08005309
 8005334:	08005309 	.word	0x08005309
 8005338:	0800538d 	.word	0x0800538d
 800533c:	08005309 	.word	0x08005309
 8005340:	08005309 	.word	0x08005309
 8005344:	08005309 	.word	0x08005309
 8005348:	08005309 	.word	0x08005309
 800534c:	0800548d 	.word	0x0800548d
 8005350:	080053b7 	.word	0x080053b7
 8005354:	08005447 	.word	0x08005447
 8005358:	08005309 	.word	0x08005309
 800535c:	08005309 	.word	0x08005309
 8005360:	080054af 	.word	0x080054af
 8005364:	08005309 	.word	0x08005309
 8005368:	080053b7 	.word	0x080053b7
 800536c:	08005309 	.word	0x08005309
 8005370:	08005309 	.word	0x08005309
 8005374:	0800544f 	.word	0x0800544f
 8005378:	6833      	ldr	r3, [r6, #0]
 800537a:	1d1a      	adds	r2, r3, #4
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6032      	str	r2, [r6, #0]
 8005380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005384:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005388:	2301      	movs	r3, #1
 800538a:	e09d      	b.n	80054c8 <_printf_i+0x1e8>
 800538c:	6833      	ldr	r3, [r6, #0]
 800538e:	6820      	ldr	r0, [r4, #0]
 8005390:	1d19      	adds	r1, r3, #4
 8005392:	6031      	str	r1, [r6, #0]
 8005394:	0606      	lsls	r6, r0, #24
 8005396:	d501      	bpl.n	800539c <_printf_i+0xbc>
 8005398:	681d      	ldr	r5, [r3, #0]
 800539a:	e003      	b.n	80053a4 <_printf_i+0xc4>
 800539c:	0645      	lsls	r5, r0, #25
 800539e:	d5fb      	bpl.n	8005398 <_printf_i+0xb8>
 80053a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053a4:	2d00      	cmp	r5, #0
 80053a6:	da03      	bge.n	80053b0 <_printf_i+0xd0>
 80053a8:	232d      	movs	r3, #45	@ 0x2d
 80053aa:	426d      	negs	r5, r5
 80053ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053b0:	4859      	ldr	r0, [pc, #356]	@ (8005518 <_printf_i+0x238>)
 80053b2:	230a      	movs	r3, #10
 80053b4:	e011      	b.n	80053da <_printf_i+0xfa>
 80053b6:	6821      	ldr	r1, [r4, #0]
 80053b8:	6833      	ldr	r3, [r6, #0]
 80053ba:	0608      	lsls	r0, r1, #24
 80053bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80053c0:	d402      	bmi.n	80053c8 <_printf_i+0xe8>
 80053c2:	0649      	lsls	r1, r1, #25
 80053c4:	bf48      	it	mi
 80053c6:	b2ad      	uxthmi	r5, r5
 80053c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80053ca:	4853      	ldr	r0, [pc, #332]	@ (8005518 <_printf_i+0x238>)
 80053cc:	6033      	str	r3, [r6, #0]
 80053ce:	bf14      	ite	ne
 80053d0:	230a      	movne	r3, #10
 80053d2:	2308      	moveq	r3, #8
 80053d4:	2100      	movs	r1, #0
 80053d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053da:	6866      	ldr	r6, [r4, #4]
 80053dc:	60a6      	str	r6, [r4, #8]
 80053de:	2e00      	cmp	r6, #0
 80053e0:	bfa2      	ittt	ge
 80053e2:	6821      	ldrge	r1, [r4, #0]
 80053e4:	f021 0104 	bicge.w	r1, r1, #4
 80053e8:	6021      	strge	r1, [r4, #0]
 80053ea:	b90d      	cbnz	r5, 80053f0 <_printf_i+0x110>
 80053ec:	2e00      	cmp	r6, #0
 80053ee:	d04b      	beq.n	8005488 <_printf_i+0x1a8>
 80053f0:	4616      	mov	r6, r2
 80053f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80053f6:	fb03 5711 	mls	r7, r3, r1, r5
 80053fa:	5dc7      	ldrb	r7, [r0, r7]
 80053fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005400:	462f      	mov	r7, r5
 8005402:	42bb      	cmp	r3, r7
 8005404:	460d      	mov	r5, r1
 8005406:	d9f4      	bls.n	80053f2 <_printf_i+0x112>
 8005408:	2b08      	cmp	r3, #8
 800540a:	d10b      	bne.n	8005424 <_printf_i+0x144>
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	07df      	lsls	r7, r3, #31
 8005410:	d508      	bpl.n	8005424 <_printf_i+0x144>
 8005412:	6923      	ldr	r3, [r4, #16]
 8005414:	6861      	ldr	r1, [r4, #4]
 8005416:	4299      	cmp	r1, r3
 8005418:	bfde      	ittt	le
 800541a:	2330      	movle	r3, #48	@ 0x30
 800541c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005420:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005424:	1b92      	subs	r2, r2, r6
 8005426:	6122      	str	r2, [r4, #16]
 8005428:	f8cd a000 	str.w	sl, [sp]
 800542c:	464b      	mov	r3, r9
 800542e:	aa03      	add	r2, sp, #12
 8005430:	4621      	mov	r1, r4
 8005432:	4640      	mov	r0, r8
 8005434:	f7ff fee6 	bl	8005204 <_printf_common>
 8005438:	3001      	adds	r0, #1
 800543a:	d14a      	bne.n	80054d2 <_printf_i+0x1f2>
 800543c:	f04f 30ff 	mov.w	r0, #4294967295
 8005440:	b004      	add	sp, #16
 8005442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	f043 0320 	orr.w	r3, r3, #32
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	4833      	ldr	r0, [pc, #204]	@ (800551c <_printf_i+0x23c>)
 8005450:	2778      	movs	r7, #120	@ 0x78
 8005452:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	6831      	ldr	r1, [r6, #0]
 800545a:	061f      	lsls	r7, r3, #24
 800545c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005460:	d402      	bmi.n	8005468 <_printf_i+0x188>
 8005462:	065f      	lsls	r7, r3, #25
 8005464:	bf48      	it	mi
 8005466:	b2ad      	uxthmi	r5, r5
 8005468:	6031      	str	r1, [r6, #0]
 800546a:	07d9      	lsls	r1, r3, #31
 800546c:	bf44      	itt	mi
 800546e:	f043 0320 	orrmi.w	r3, r3, #32
 8005472:	6023      	strmi	r3, [r4, #0]
 8005474:	b11d      	cbz	r5, 800547e <_printf_i+0x19e>
 8005476:	2310      	movs	r3, #16
 8005478:	e7ac      	b.n	80053d4 <_printf_i+0xf4>
 800547a:	4827      	ldr	r0, [pc, #156]	@ (8005518 <_printf_i+0x238>)
 800547c:	e7e9      	b.n	8005452 <_printf_i+0x172>
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	f023 0320 	bic.w	r3, r3, #32
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	e7f6      	b.n	8005476 <_printf_i+0x196>
 8005488:	4616      	mov	r6, r2
 800548a:	e7bd      	b.n	8005408 <_printf_i+0x128>
 800548c:	6833      	ldr	r3, [r6, #0]
 800548e:	6825      	ldr	r5, [r4, #0]
 8005490:	6961      	ldr	r1, [r4, #20]
 8005492:	1d18      	adds	r0, r3, #4
 8005494:	6030      	str	r0, [r6, #0]
 8005496:	062e      	lsls	r6, r5, #24
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	d501      	bpl.n	80054a0 <_printf_i+0x1c0>
 800549c:	6019      	str	r1, [r3, #0]
 800549e:	e002      	b.n	80054a6 <_printf_i+0x1c6>
 80054a0:	0668      	lsls	r0, r5, #25
 80054a2:	d5fb      	bpl.n	800549c <_printf_i+0x1bc>
 80054a4:	8019      	strh	r1, [r3, #0]
 80054a6:	2300      	movs	r3, #0
 80054a8:	6123      	str	r3, [r4, #16]
 80054aa:	4616      	mov	r6, r2
 80054ac:	e7bc      	b.n	8005428 <_printf_i+0x148>
 80054ae:	6833      	ldr	r3, [r6, #0]
 80054b0:	1d1a      	adds	r2, r3, #4
 80054b2:	6032      	str	r2, [r6, #0]
 80054b4:	681e      	ldr	r6, [r3, #0]
 80054b6:	6862      	ldr	r2, [r4, #4]
 80054b8:	2100      	movs	r1, #0
 80054ba:	4630      	mov	r0, r6
 80054bc:	f7fa fea8 	bl	8000210 <memchr>
 80054c0:	b108      	cbz	r0, 80054c6 <_printf_i+0x1e6>
 80054c2:	1b80      	subs	r0, r0, r6
 80054c4:	6060      	str	r0, [r4, #4]
 80054c6:	6863      	ldr	r3, [r4, #4]
 80054c8:	6123      	str	r3, [r4, #16]
 80054ca:	2300      	movs	r3, #0
 80054cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054d0:	e7aa      	b.n	8005428 <_printf_i+0x148>
 80054d2:	6923      	ldr	r3, [r4, #16]
 80054d4:	4632      	mov	r2, r6
 80054d6:	4649      	mov	r1, r9
 80054d8:	4640      	mov	r0, r8
 80054da:	47d0      	blx	sl
 80054dc:	3001      	adds	r0, #1
 80054de:	d0ad      	beq.n	800543c <_printf_i+0x15c>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	079b      	lsls	r3, r3, #30
 80054e4:	d413      	bmi.n	800550e <_printf_i+0x22e>
 80054e6:	68e0      	ldr	r0, [r4, #12]
 80054e8:	9b03      	ldr	r3, [sp, #12]
 80054ea:	4298      	cmp	r0, r3
 80054ec:	bfb8      	it	lt
 80054ee:	4618      	movlt	r0, r3
 80054f0:	e7a6      	b.n	8005440 <_printf_i+0x160>
 80054f2:	2301      	movs	r3, #1
 80054f4:	4632      	mov	r2, r6
 80054f6:	4649      	mov	r1, r9
 80054f8:	4640      	mov	r0, r8
 80054fa:	47d0      	blx	sl
 80054fc:	3001      	adds	r0, #1
 80054fe:	d09d      	beq.n	800543c <_printf_i+0x15c>
 8005500:	3501      	adds	r5, #1
 8005502:	68e3      	ldr	r3, [r4, #12]
 8005504:	9903      	ldr	r1, [sp, #12]
 8005506:	1a5b      	subs	r3, r3, r1
 8005508:	42ab      	cmp	r3, r5
 800550a:	dcf2      	bgt.n	80054f2 <_printf_i+0x212>
 800550c:	e7eb      	b.n	80054e6 <_printf_i+0x206>
 800550e:	2500      	movs	r5, #0
 8005510:	f104 0619 	add.w	r6, r4, #25
 8005514:	e7f5      	b.n	8005502 <_printf_i+0x222>
 8005516:	bf00      	nop
 8005518:	08005971 	.word	0x08005971
 800551c:	08005982 	.word	0x08005982

08005520 <__sflush_r>:
 8005520:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005528:	0716      	lsls	r6, r2, #28
 800552a:	4605      	mov	r5, r0
 800552c:	460c      	mov	r4, r1
 800552e:	d454      	bmi.n	80055da <__sflush_r+0xba>
 8005530:	684b      	ldr	r3, [r1, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	dc02      	bgt.n	800553c <__sflush_r+0x1c>
 8005536:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	dd48      	ble.n	80055ce <__sflush_r+0xae>
 800553c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800553e:	2e00      	cmp	r6, #0
 8005540:	d045      	beq.n	80055ce <__sflush_r+0xae>
 8005542:	2300      	movs	r3, #0
 8005544:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005548:	682f      	ldr	r7, [r5, #0]
 800554a:	6a21      	ldr	r1, [r4, #32]
 800554c:	602b      	str	r3, [r5, #0]
 800554e:	d030      	beq.n	80055b2 <__sflush_r+0x92>
 8005550:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005552:	89a3      	ldrh	r3, [r4, #12]
 8005554:	0759      	lsls	r1, r3, #29
 8005556:	d505      	bpl.n	8005564 <__sflush_r+0x44>
 8005558:	6863      	ldr	r3, [r4, #4]
 800555a:	1ad2      	subs	r2, r2, r3
 800555c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800555e:	b10b      	cbz	r3, 8005564 <__sflush_r+0x44>
 8005560:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005562:	1ad2      	subs	r2, r2, r3
 8005564:	2300      	movs	r3, #0
 8005566:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005568:	6a21      	ldr	r1, [r4, #32]
 800556a:	4628      	mov	r0, r5
 800556c:	47b0      	blx	r6
 800556e:	1c43      	adds	r3, r0, #1
 8005570:	89a3      	ldrh	r3, [r4, #12]
 8005572:	d106      	bne.n	8005582 <__sflush_r+0x62>
 8005574:	6829      	ldr	r1, [r5, #0]
 8005576:	291d      	cmp	r1, #29
 8005578:	d82b      	bhi.n	80055d2 <__sflush_r+0xb2>
 800557a:	4a2a      	ldr	r2, [pc, #168]	@ (8005624 <__sflush_r+0x104>)
 800557c:	410a      	asrs	r2, r1
 800557e:	07d6      	lsls	r6, r2, #31
 8005580:	d427      	bmi.n	80055d2 <__sflush_r+0xb2>
 8005582:	2200      	movs	r2, #0
 8005584:	6062      	str	r2, [r4, #4]
 8005586:	04d9      	lsls	r1, r3, #19
 8005588:	6922      	ldr	r2, [r4, #16]
 800558a:	6022      	str	r2, [r4, #0]
 800558c:	d504      	bpl.n	8005598 <__sflush_r+0x78>
 800558e:	1c42      	adds	r2, r0, #1
 8005590:	d101      	bne.n	8005596 <__sflush_r+0x76>
 8005592:	682b      	ldr	r3, [r5, #0]
 8005594:	b903      	cbnz	r3, 8005598 <__sflush_r+0x78>
 8005596:	6560      	str	r0, [r4, #84]	@ 0x54
 8005598:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800559a:	602f      	str	r7, [r5, #0]
 800559c:	b1b9      	cbz	r1, 80055ce <__sflush_r+0xae>
 800559e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055a2:	4299      	cmp	r1, r3
 80055a4:	d002      	beq.n	80055ac <__sflush_r+0x8c>
 80055a6:	4628      	mov	r0, r5
 80055a8:	f7ff fbf2 	bl	8004d90 <_free_r>
 80055ac:	2300      	movs	r3, #0
 80055ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80055b0:	e00d      	b.n	80055ce <__sflush_r+0xae>
 80055b2:	2301      	movs	r3, #1
 80055b4:	4628      	mov	r0, r5
 80055b6:	47b0      	blx	r6
 80055b8:	4602      	mov	r2, r0
 80055ba:	1c50      	adds	r0, r2, #1
 80055bc:	d1c9      	bne.n	8005552 <__sflush_r+0x32>
 80055be:	682b      	ldr	r3, [r5, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0c6      	beq.n	8005552 <__sflush_r+0x32>
 80055c4:	2b1d      	cmp	r3, #29
 80055c6:	d001      	beq.n	80055cc <__sflush_r+0xac>
 80055c8:	2b16      	cmp	r3, #22
 80055ca:	d11e      	bne.n	800560a <__sflush_r+0xea>
 80055cc:	602f      	str	r7, [r5, #0]
 80055ce:	2000      	movs	r0, #0
 80055d0:	e022      	b.n	8005618 <__sflush_r+0xf8>
 80055d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055d6:	b21b      	sxth	r3, r3
 80055d8:	e01b      	b.n	8005612 <__sflush_r+0xf2>
 80055da:	690f      	ldr	r7, [r1, #16]
 80055dc:	2f00      	cmp	r7, #0
 80055de:	d0f6      	beq.n	80055ce <__sflush_r+0xae>
 80055e0:	0793      	lsls	r3, r2, #30
 80055e2:	680e      	ldr	r6, [r1, #0]
 80055e4:	bf08      	it	eq
 80055e6:	694b      	ldreq	r3, [r1, #20]
 80055e8:	600f      	str	r7, [r1, #0]
 80055ea:	bf18      	it	ne
 80055ec:	2300      	movne	r3, #0
 80055ee:	eba6 0807 	sub.w	r8, r6, r7
 80055f2:	608b      	str	r3, [r1, #8]
 80055f4:	f1b8 0f00 	cmp.w	r8, #0
 80055f8:	dde9      	ble.n	80055ce <__sflush_r+0xae>
 80055fa:	6a21      	ldr	r1, [r4, #32]
 80055fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80055fe:	4643      	mov	r3, r8
 8005600:	463a      	mov	r2, r7
 8005602:	4628      	mov	r0, r5
 8005604:	47b0      	blx	r6
 8005606:	2800      	cmp	r0, #0
 8005608:	dc08      	bgt.n	800561c <__sflush_r+0xfc>
 800560a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800560e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005612:	81a3      	strh	r3, [r4, #12]
 8005614:	f04f 30ff 	mov.w	r0, #4294967295
 8005618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800561c:	4407      	add	r7, r0
 800561e:	eba8 0800 	sub.w	r8, r8, r0
 8005622:	e7e7      	b.n	80055f4 <__sflush_r+0xd4>
 8005624:	dfbffffe 	.word	0xdfbffffe

08005628 <_fflush_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	690b      	ldr	r3, [r1, #16]
 800562c:	4605      	mov	r5, r0
 800562e:	460c      	mov	r4, r1
 8005630:	b913      	cbnz	r3, 8005638 <_fflush_r+0x10>
 8005632:	2500      	movs	r5, #0
 8005634:	4628      	mov	r0, r5
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	b118      	cbz	r0, 8005642 <_fflush_r+0x1a>
 800563a:	6a03      	ldr	r3, [r0, #32]
 800563c:	b90b      	cbnz	r3, 8005642 <_fflush_r+0x1a>
 800563e:	f7ff f9ad 	bl	800499c <__sinit>
 8005642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f3      	beq.n	8005632 <_fflush_r+0xa>
 800564a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800564c:	07d0      	lsls	r0, r2, #31
 800564e:	d404      	bmi.n	800565a <_fflush_r+0x32>
 8005650:	0599      	lsls	r1, r3, #22
 8005652:	d402      	bmi.n	800565a <_fflush_r+0x32>
 8005654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005656:	f7ff fb98 	bl	8004d8a <__retarget_lock_acquire_recursive>
 800565a:	4628      	mov	r0, r5
 800565c:	4621      	mov	r1, r4
 800565e:	f7ff ff5f 	bl	8005520 <__sflush_r>
 8005662:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005664:	07da      	lsls	r2, r3, #31
 8005666:	4605      	mov	r5, r0
 8005668:	d4e4      	bmi.n	8005634 <_fflush_r+0xc>
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	059b      	lsls	r3, r3, #22
 800566e:	d4e1      	bmi.n	8005634 <_fflush_r+0xc>
 8005670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005672:	f7ff fb8b 	bl	8004d8c <__retarget_lock_release_recursive>
 8005676:	e7dd      	b.n	8005634 <_fflush_r+0xc>

08005678 <__swhatbuf_r>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	460c      	mov	r4, r1
 800567c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005680:	2900      	cmp	r1, #0
 8005682:	b096      	sub	sp, #88	@ 0x58
 8005684:	4615      	mov	r5, r2
 8005686:	461e      	mov	r6, r3
 8005688:	da0d      	bge.n	80056a6 <__swhatbuf_r+0x2e>
 800568a:	89a3      	ldrh	r3, [r4, #12]
 800568c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005690:	f04f 0100 	mov.w	r1, #0
 8005694:	bf14      	ite	ne
 8005696:	2340      	movne	r3, #64	@ 0x40
 8005698:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800569c:	2000      	movs	r0, #0
 800569e:	6031      	str	r1, [r6, #0]
 80056a0:	602b      	str	r3, [r5, #0]
 80056a2:	b016      	add	sp, #88	@ 0x58
 80056a4:	bd70      	pop	{r4, r5, r6, pc}
 80056a6:	466a      	mov	r2, sp
 80056a8:	f000 f848 	bl	800573c <_fstat_r>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	dbec      	blt.n	800568a <__swhatbuf_r+0x12>
 80056b0:	9901      	ldr	r1, [sp, #4]
 80056b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80056b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80056ba:	4259      	negs	r1, r3
 80056bc:	4159      	adcs	r1, r3
 80056be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056c2:	e7eb      	b.n	800569c <__swhatbuf_r+0x24>

080056c4 <__smakebuf_r>:
 80056c4:	898b      	ldrh	r3, [r1, #12]
 80056c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056c8:	079d      	lsls	r5, r3, #30
 80056ca:	4606      	mov	r6, r0
 80056cc:	460c      	mov	r4, r1
 80056ce:	d507      	bpl.n	80056e0 <__smakebuf_r+0x1c>
 80056d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	6123      	str	r3, [r4, #16]
 80056d8:	2301      	movs	r3, #1
 80056da:	6163      	str	r3, [r4, #20]
 80056dc:	b003      	add	sp, #12
 80056de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056e0:	ab01      	add	r3, sp, #4
 80056e2:	466a      	mov	r2, sp
 80056e4:	f7ff ffc8 	bl	8005678 <__swhatbuf_r>
 80056e8:	9f00      	ldr	r7, [sp, #0]
 80056ea:	4605      	mov	r5, r0
 80056ec:	4639      	mov	r1, r7
 80056ee:	4630      	mov	r0, r6
 80056f0:	f7ff fbba 	bl	8004e68 <_malloc_r>
 80056f4:	b948      	cbnz	r0, 800570a <__smakebuf_r+0x46>
 80056f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056fa:	059a      	lsls	r2, r3, #22
 80056fc:	d4ee      	bmi.n	80056dc <__smakebuf_r+0x18>
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	f043 0302 	orr.w	r3, r3, #2
 8005706:	81a3      	strh	r3, [r4, #12]
 8005708:	e7e2      	b.n	80056d0 <__smakebuf_r+0xc>
 800570a:	89a3      	ldrh	r3, [r4, #12]
 800570c:	6020      	str	r0, [r4, #0]
 800570e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005712:	81a3      	strh	r3, [r4, #12]
 8005714:	9b01      	ldr	r3, [sp, #4]
 8005716:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800571a:	b15b      	cbz	r3, 8005734 <__smakebuf_r+0x70>
 800571c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005720:	4630      	mov	r0, r6
 8005722:	f000 f81d 	bl	8005760 <_isatty_r>
 8005726:	b128      	cbz	r0, 8005734 <__smakebuf_r+0x70>
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	f023 0303 	bic.w	r3, r3, #3
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	89a3      	ldrh	r3, [r4, #12]
 8005736:	431d      	orrs	r5, r3
 8005738:	81a5      	strh	r5, [r4, #12]
 800573a:	e7cf      	b.n	80056dc <__smakebuf_r+0x18>

0800573c <_fstat_r>:
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	4d07      	ldr	r5, [pc, #28]	@ (800575c <_fstat_r+0x20>)
 8005740:	2300      	movs	r3, #0
 8005742:	4604      	mov	r4, r0
 8005744:	4608      	mov	r0, r1
 8005746:	4611      	mov	r1, r2
 8005748:	602b      	str	r3, [r5, #0]
 800574a:	f7fb fc84 	bl	8001056 <_fstat>
 800574e:	1c43      	adds	r3, r0, #1
 8005750:	d102      	bne.n	8005758 <_fstat_r+0x1c>
 8005752:	682b      	ldr	r3, [r5, #0]
 8005754:	b103      	cbz	r3, 8005758 <_fstat_r+0x1c>
 8005756:	6023      	str	r3, [r4, #0]
 8005758:	bd38      	pop	{r3, r4, r5, pc}
 800575a:	bf00      	nop
 800575c:	20000314 	.word	0x20000314

08005760 <_isatty_r>:
 8005760:	b538      	push	{r3, r4, r5, lr}
 8005762:	4d06      	ldr	r5, [pc, #24]	@ (800577c <_isatty_r+0x1c>)
 8005764:	2300      	movs	r3, #0
 8005766:	4604      	mov	r4, r0
 8005768:	4608      	mov	r0, r1
 800576a:	602b      	str	r3, [r5, #0]
 800576c:	f7fb fc83 	bl	8001076 <_isatty>
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	d102      	bne.n	800577a <_isatty_r+0x1a>
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	b103      	cbz	r3, 800577a <_isatty_r+0x1a>
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	bd38      	pop	{r3, r4, r5, pc}
 800577c:	20000314 	.word	0x20000314

08005780 <_sbrk_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4d06      	ldr	r5, [pc, #24]	@ (800579c <_sbrk_r+0x1c>)
 8005784:	2300      	movs	r3, #0
 8005786:	4604      	mov	r4, r0
 8005788:	4608      	mov	r0, r1
 800578a:	602b      	str	r3, [r5, #0]
 800578c:	f7fb fc8c 	bl	80010a8 <_sbrk>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	d102      	bne.n	800579a <_sbrk_r+0x1a>
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	b103      	cbz	r3, 800579a <_sbrk_r+0x1a>
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	bd38      	pop	{r3, r4, r5, pc}
 800579c:	20000314 	.word	0x20000314

080057a0 <_init>:
 80057a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a2:	bf00      	nop
 80057a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a6:	bc08      	pop	{r3}
 80057a8:	469e      	mov	lr, r3
 80057aa:	4770      	bx	lr

080057ac <_fini>:
 80057ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ae:	bf00      	nop
 80057b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b2:	bc08      	pop	{r3}
 80057b4:	469e      	mov	lr, r3
 80057b6:	4770      	bx	lr
