
trabalhoSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002358  08007074  08007074  00008074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093cc  080093cc  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  080093cc  080093cc  0000a3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093d4  080093d4  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093d4  080093d4  0000a3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093d8  080093d8  0000a3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080093dc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  2000007c  08009458  0000b07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08009458  0000b464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a9a  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034fa  00000000  00000000  00020b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  00024040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe6  00000000  00000000  000254a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025147  00000000  00000000  0002648e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1f2  00000000  00000000  0004b5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d835d  00000000  00000000  000667c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013eb24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060e0  00000000  00000000  0013eb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00144c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800705c 	.word	0x0800705c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	0800705c 	.word	0x0800705c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
 80005aa:	460b      	mov	r3, r1
 80005ac:	80bb      	strh	r3, [r7, #4]
 80005ae:	4613      	mov	r3, r2
 80005b0:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	88b9      	ldrh	r1, [r7, #4]
 80005b6:	887a      	ldrh	r2, [r7, #2]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fd57 	bl	800106c <ST7735_DrawPixel>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80005c6:	b590      	push	{r4, r7, lr}
 80005c8:	b085      	sub	sp, #20
 80005ca:	af02      	add	r7, sp, #8
 80005cc:	4604      	mov	r4, r0
 80005ce:	4608      	mov	r0, r1
 80005d0:	4611      	mov	r1, r2
 80005d2:	461a      	mov	r2, r3
 80005d4:	4623      	mov	r3, r4
 80005d6:	80fb      	strh	r3, [r7, #6]
 80005d8:	4603      	mov	r3, r0
 80005da:	80bb      	strh	r3, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	807b      	strh	r3, [r7, #2]
 80005e0:	4613      	mov	r3, r2
 80005e2:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80005e4:	88f8      	ldrh	r0, [r7, #6]
 80005e6:	88b9      	ldrh	r1, [r7, #4]
 80005e8:	887a      	ldrh	r2, [r7, #2]
 80005ea:	883c      	ldrh	r4, [r7, #0]
 80005ec:	8b3b      	ldrh	r3, [r7, #24]
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	4623      	mov	r3, r4
 80005f2:	f000 fe45 	bl	8001280 <ST7735_FillRectangle>
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}

080005fe <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	4603      	mov	r3, r0
 8000606:	80fb      	strh	r3, [r7, #6]
 8000608:	460b      	mov	r3, r1
 800060a:	80bb      	strh	r3, [r7, #4]
 800060c:	4613      	mov	r3, r2
 800060e:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8000610:	887a      	ldrh	r2, [r7, #2]
 8000612:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffc0 	bl	80005a0 <drawPixel>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b089      	sub	sp, #36	@ 0x24
 800062c:	af00      	add	r7, sp, #0
 800062e:	4604      	mov	r4, r0
 8000630:	4608      	mov	r0, r1
 8000632:	4611      	mov	r1, r2
 8000634:	461a      	mov	r2, r3
 8000636:	4623      	mov	r3, r4
 8000638:	80fb      	strh	r3, [r7, #6]
 800063a:	4603      	mov	r3, r0
 800063c:	80bb      	strh	r3, [r7, #4]
 800063e:	460b      	mov	r3, r1
 8000640:	807b      	strh	r3, [r7, #2]
 8000642:	4613      	mov	r3, r2
 8000644:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000646:	f9b7 2000 	ldrsh.w	r2, [r7]
 800064a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000654:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000658:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800065c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000660:	1acb      	subs	r3, r1, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	bfb8      	it	lt
 8000666:	425b      	neglt	r3, r3
 8000668:	429a      	cmp	r2, r3
 800066a:	bfcc      	ite	gt
 800066c:	2301      	movgt	r3, #1
 800066e:	2300      	movle	r3, #0
 8000670:	b2db      	uxtb	r3, r3
 8000672:	837b      	strh	r3, [r7, #26]
    if (steep) {
 8000674:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d00b      	beq.n	8000694 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	833b      	strh	r3, [r7, #24]
 8000680:	88bb      	ldrh	r3, [r7, #4]
 8000682:	80fb      	strh	r3, [r7, #6]
 8000684:	8b3b      	ldrh	r3, [r7, #24]
 8000686:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8000688:	887b      	ldrh	r3, [r7, #2]
 800068a:	82fb      	strh	r3, [r7, #22]
 800068c:	883b      	ldrh	r3, [r7, #0]
 800068e:	807b      	strh	r3, [r7, #2]
 8000690:	8afb      	ldrh	r3, [r7, #22]
 8000692:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8000694:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000698:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800069c:	429a      	cmp	r2, r3
 800069e:	dd0b      	ble.n	80006b8 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 80006a0:	88fb      	ldrh	r3, [r7, #6]
 80006a2:	82bb      	strh	r3, [r7, #20]
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	80fb      	strh	r3, [r7, #6]
 80006a8:	8abb      	ldrh	r3, [r7, #20]
 80006aa:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80006ac:	88bb      	ldrh	r3, [r7, #4]
 80006ae:	827b      	strh	r3, [r7, #18]
 80006b0:	883b      	ldrh	r3, [r7, #0]
 80006b2:	80bb      	strh	r3, [r7, #4]
 80006b4:	8a7b      	ldrh	r3, [r7, #18]
 80006b6:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80006b8:	887a      	ldrh	r2, [r7, #2]
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	b29b      	uxth	r3, r3
 80006c0:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 80006c2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80006c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bfb8      	it	lt
 80006d0:	425b      	neglt	r3, r3
 80006d2:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 80006d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80006d8:	0fda      	lsrs	r2, r3, #31
 80006da:	4413      	add	r3, r2
 80006dc:	105b      	asrs	r3, r3, #1
 80006de:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 80006e0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80006e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	da02      	bge.n	80006f2 <writeLine+0xca>
        ystep = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	83bb      	strh	r3, [r7, #28]
 80006f0:	e031      	b.n	8000756 <writeLine+0x12e>
    } else {
        ystep = -1;
 80006f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006f6:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 80006f8:	e02d      	b.n	8000756 <writeLine+0x12e>
        if (steep) {
 80006fa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d008      	beq.n	8000714 <writeLine+0xec>
            writePixel(y0, x0, color);
 8000702:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000704:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000708:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff76 	bl	80005fe <writePixel>
 8000712:	e007      	b.n	8000724 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8000714:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000716:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800071a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff6d 	bl	80005fe <writePixel>
        }
        err -= dy;
 8000724:	8bfa      	ldrh	r2, [r7, #30]
 8000726:	89fb      	ldrh	r3, [r7, #14]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	b29b      	uxth	r3, r3
 800072c:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 800072e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000732:	2b00      	cmp	r3, #0
 8000734:	da09      	bge.n	800074a <writeLine+0x122>
            y0 += ystep;
 8000736:	88ba      	ldrh	r2, [r7, #4]
 8000738:	8bbb      	ldrh	r3, [r7, #28]
 800073a:	4413      	add	r3, r2
 800073c:	b29b      	uxth	r3, r3
 800073e:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8000740:	8bfa      	ldrh	r2, [r7, #30]
 8000742:	8a3b      	ldrh	r3, [r7, #16]
 8000744:	4413      	add	r3, r2
 8000746:	b29b      	uxth	r3, r3
 8000748:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 800074a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800074e:	b29b      	uxth	r3, r3
 8000750:	3301      	adds	r3, #1
 8000752:	b29b      	uxth	r3, r3
 8000754:	80fb      	strh	r3, [r7, #6]
 8000756:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800075a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800075e:	429a      	cmp	r2, r3
 8000760:	ddcb      	ble.n	80006fa <writeLine+0xd2>
        }
    }
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3724      	adds	r7, #36	@ 0x24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd90      	pop	{r4, r7, pc}

0800076c <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b085      	sub	sp, #20
 8000770:	af02      	add	r7, sp, #8
 8000772:	4604      	mov	r4, r0
 8000774:	4608      	mov	r0, r1
 8000776:	4611      	mov	r1, r2
 8000778:	461a      	mov	r2, r3
 800077a:	4623      	mov	r3, r4
 800077c:	80fb      	strh	r3, [r7, #6]
 800077e:	4603      	mov	r3, r0
 8000780:	80bb      	strh	r3, [r7, #4]
 8000782:	460b      	mov	r3, r1
 8000784:	807b      	strh	r3, [r7, #2]
 8000786:	4613      	mov	r3, r2
 8000788:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 800078a:	88ba      	ldrh	r2, [r7, #4]
 800078c:	887b      	ldrh	r3, [r7, #2]
 800078e:	4413      	add	r3, r2
 8000790:	b29b      	uxth	r3, r3
 8000792:	3b01      	subs	r3, #1
 8000794:	b29b      	uxth	r3, r3
 8000796:	b21c      	sxth	r4, r3
 8000798:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800079c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007a0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007a4:	883b      	ldrh	r3, [r7, #0]
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	4623      	mov	r3, r4
 80007aa:	f7ff ff3d 	bl	8000628 <writeLine>
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd90      	pop	{r4, r7, pc}

080007b6 <drawCircle>:
        writeLine(x0, y0, x1, y1, color);
    }
}

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80007b6:	b590      	push	{r4, r7, lr}
 80007b8:	b087      	sub	sp, #28
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4604      	mov	r4, r0
 80007be:	4608      	mov	r0, r1
 80007c0:	4611      	mov	r1, r2
 80007c2:	461a      	mov	r2, r3
 80007c4:	4623      	mov	r3, r4
 80007c6:	80fb      	strh	r3, [r7, #6]
 80007c8:	4603      	mov	r3, r0
 80007ca:	80bb      	strh	r3, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
 80007d0:	4613      	mov	r3, r2
 80007d2:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 80007d4:	887b      	ldrh	r3, [r7, #2]
 80007d6:	f1c3 0301 	rsb	r3, r3, #1
 80007da:	b29b      	uxth	r3, r3
 80007dc:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80007de:	2301      	movs	r3, #1
 80007e0:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80007e2:	887b      	ldrh	r3, [r7, #2]
 80007e4:	461a      	mov	r2, r3
 80007e6:	03d2      	lsls	r2, r2, #15
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 80007f4:	887b      	ldrh	r3, [r7, #2]
 80007f6:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 80007f8:	88ba      	ldrh	r2, [r7, #4]
 80007fa:	887b      	ldrh	r3, [r7, #2]
 80007fc:	4413      	add	r3, r2
 80007fe:	b29b      	uxth	r3, r3
 8000800:	b219      	sxth	r1, r3
 8000802:	883a      	ldrh	r2, [r7, #0]
 8000804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fef8 	bl	80005fe <writePixel>
    writePixel(x0  , y0-r, color);
 800080e:	88ba      	ldrh	r2, [r7, #4]
 8000810:	887b      	ldrh	r3, [r7, #2]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	b29b      	uxth	r3, r3
 8000816:	b219      	sxth	r1, r3
 8000818:	883a      	ldrh	r2, [r7, #0]
 800081a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff feed 	bl	80005fe <writePixel>
    writePixel(x0+r, y0  , color);
 8000824:	88fa      	ldrh	r2, [r7, #6]
 8000826:	887b      	ldrh	r3, [r7, #2]
 8000828:	4413      	add	r3, r2
 800082a:	b29b      	uxth	r3, r3
 800082c:	b21b      	sxth	r3, r3
 800082e:	883a      	ldrh	r2, [r7, #0]
 8000830:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fee2 	bl	80005fe <writePixel>
    writePixel(x0-r, y0  , color);
 800083a:	88fa      	ldrh	r2, [r7, #6]
 800083c:	887b      	ldrh	r3, [r7, #2]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	b29b      	uxth	r3, r3
 8000842:	b21b      	sxth	r3, r3
 8000844:	883a      	ldrh	r2, [r7, #0]
 8000846:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fed7 	bl	80005fe <writePixel>

    while (x<y) {
 8000850:	e091      	b.n	8000976 <drawCircle+0x1c0>
        if (f >= 0) {
 8000852:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000856:	2b00      	cmp	r3, #0
 8000858:	db0e      	blt.n	8000878 <drawCircle+0xc2>
            y--;
 800085a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800085e:	b29b      	uxth	r3, r3
 8000860:	3b01      	subs	r3, #1
 8000862:	b29b      	uxth	r3, r3
 8000864:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000866:	8a7b      	ldrh	r3, [r7, #18]
 8000868:	3302      	adds	r3, #2
 800086a:	b29b      	uxth	r3, r3
 800086c:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 800086e:	8afa      	ldrh	r2, [r7, #22]
 8000870:	8a7b      	ldrh	r3, [r7, #18]
 8000872:	4413      	add	r3, r2
 8000874:	b29b      	uxth	r3, r3
 8000876:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000878:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800087c:	b29b      	uxth	r3, r3
 800087e:	3301      	adds	r3, #1
 8000880:	b29b      	uxth	r3, r3
 8000882:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000884:	8abb      	ldrh	r3, [r7, #20]
 8000886:	3302      	adds	r3, #2
 8000888:	b29b      	uxth	r3, r3
 800088a:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800088c:	8afa      	ldrh	r2, [r7, #22]
 800088e:	8abb      	ldrh	r3, [r7, #20]
 8000890:	4413      	add	r3, r2
 8000892:	b29b      	uxth	r3, r3
 8000894:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 8000896:	88fa      	ldrh	r2, [r7, #6]
 8000898:	8a3b      	ldrh	r3, [r7, #16]
 800089a:	4413      	add	r3, r2
 800089c:	b29b      	uxth	r3, r3
 800089e:	b218      	sxth	r0, r3
 80008a0:	88ba      	ldrh	r2, [r7, #4]
 80008a2:	89fb      	ldrh	r3, [r7, #14]
 80008a4:	4413      	add	r3, r2
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	883a      	ldrh	r2, [r7, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	f7ff fea6 	bl	80005fe <writePixel>
        writePixel(x0 - x, y0 + y, color);
 80008b2:	88fa      	ldrh	r2, [r7, #6]
 80008b4:	8a3b      	ldrh	r3, [r7, #16]
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	b218      	sxth	r0, r3
 80008bc:	88ba      	ldrh	r2, [r7, #4]
 80008be:	89fb      	ldrh	r3, [r7, #14]
 80008c0:	4413      	add	r3, r2
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	b21b      	sxth	r3, r3
 80008c6:	883a      	ldrh	r2, [r7, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	f7ff fe98 	bl	80005fe <writePixel>
        writePixel(x0 + x, y0 - y, color);
 80008ce:	88fa      	ldrh	r2, [r7, #6]
 80008d0:	8a3b      	ldrh	r3, [r7, #16]
 80008d2:	4413      	add	r3, r2
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	b218      	sxth	r0, r3
 80008d8:	88ba      	ldrh	r2, [r7, #4]
 80008da:	89fb      	ldrh	r3, [r7, #14]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	b29b      	uxth	r3, r3
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	883a      	ldrh	r2, [r7, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f7ff fe8a 	bl	80005fe <writePixel>
        writePixel(x0 - x, y0 - y, color);
 80008ea:	88fa      	ldrh	r2, [r7, #6]
 80008ec:	8a3b      	ldrh	r3, [r7, #16]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	b218      	sxth	r0, r3
 80008f4:	88ba      	ldrh	r2, [r7, #4]
 80008f6:	89fb      	ldrh	r3, [r7, #14]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	883a      	ldrh	r2, [r7, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	f7ff fe7c 	bl	80005fe <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8000906:	88fa      	ldrh	r2, [r7, #6]
 8000908:	89fb      	ldrh	r3, [r7, #14]
 800090a:	4413      	add	r3, r2
 800090c:	b29b      	uxth	r3, r3
 800090e:	b218      	sxth	r0, r3
 8000910:	88ba      	ldrh	r2, [r7, #4]
 8000912:	8a3b      	ldrh	r3, [r7, #16]
 8000914:	4413      	add	r3, r2
 8000916:	b29b      	uxth	r3, r3
 8000918:	b21b      	sxth	r3, r3
 800091a:	883a      	ldrh	r2, [r7, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	f7ff fe6e 	bl	80005fe <writePixel>
        writePixel(x0 - y, y0 + x, color);
 8000922:	88fa      	ldrh	r2, [r7, #6]
 8000924:	89fb      	ldrh	r3, [r7, #14]
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	b29b      	uxth	r3, r3
 800092a:	b218      	sxth	r0, r3
 800092c:	88ba      	ldrh	r2, [r7, #4]
 800092e:	8a3b      	ldrh	r3, [r7, #16]
 8000930:	4413      	add	r3, r2
 8000932:	b29b      	uxth	r3, r3
 8000934:	b21b      	sxth	r3, r3
 8000936:	883a      	ldrh	r2, [r7, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	f7ff fe60 	bl	80005fe <writePixel>
        writePixel(x0 + y, y0 - x, color);
 800093e:	88fa      	ldrh	r2, [r7, #6]
 8000940:	89fb      	ldrh	r3, [r7, #14]
 8000942:	4413      	add	r3, r2
 8000944:	b29b      	uxth	r3, r3
 8000946:	b218      	sxth	r0, r3
 8000948:	88ba      	ldrh	r2, [r7, #4]
 800094a:	8a3b      	ldrh	r3, [r7, #16]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	b29b      	uxth	r3, r3
 8000950:	b21b      	sxth	r3, r3
 8000952:	883a      	ldrh	r2, [r7, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	f7ff fe52 	bl	80005fe <writePixel>
        writePixel(x0 - y, y0 - x, color);
 800095a:	88fa      	ldrh	r2, [r7, #6]
 800095c:	89fb      	ldrh	r3, [r7, #14]
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	b29b      	uxth	r3, r3
 8000962:	b218      	sxth	r0, r3
 8000964:	88ba      	ldrh	r2, [r7, #4]
 8000966:	8a3b      	ldrh	r3, [r7, #16]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	b29b      	uxth	r3, r3
 800096c:	b21b      	sxth	r3, r3
 800096e:	883a      	ldrh	r2, [r7, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	f7ff fe44 	bl	80005fe <writePixel>
    while (x<y) {
 8000976:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800097a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800097e:	429a      	cmp	r2, r3
 8000980:	f6ff af67 	blt.w	8000852 <drawCircle+0x9c>
    }
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	371c      	adds	r7, #28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd90      	pop	{r4, r7, pc}

0800098e <fillCircleHelper>:
        }
    }
}

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 800098e:	b590      	push	{r4, r7, lr}
 8000990:	b087      	sub	sp, #28
 8000992:	af00      	add	r7, sp, #0
 8000994:	4604      	mov	r4, r0
 8000996:	4608      	mov	r0, r1
 8000998:	4611      	mov	r1, r2
 800099a:	461a      	mov	r2, r3
 800099c:	4623      	mov	r3, r4
 800099e:	80fb      	strh	r3, [r7, #6]
 80009a0:	4603      	mov	r3, r0
 80009a2:	80bb      	strh	r3, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	807b      	strh	r3, [r7, #2]
 80009a8:	4613      	mov	r3, r2
 80009aa:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 80009ac:	887b      	ldrh	r3, [r7, #2]
 80009ae:	f1c3 0301 	rsb	r3, r3, #1
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80009b6:	2301      	movs	r3, #1
 80009b8:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80009ba:	887b      	ldrh	r3, [r7, #2]
 80009bc:	461a      	mov	r2, r3
 80009be:	03d2      	lsls	r2, r2, #15
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 80009cc:	887b      	ldrh	r3, [r7, #2]
 80009ce:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 80009d0:	8a3b      	ldrh	r3, [r7, #16]
 80009d2:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 80009d4:	89fb      	ldrh	r3, [r7, #14]
 80009d6:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 80009d8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80009dc:	b29b      	uxth	r3, r3
 80009de:	3301      	adds	r3, #1
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	853b      	strh	r3, [r7, #40]	@ 0x28

    while(x < y) {
 80009e4:	e095      	b.n	8000b12 <fillCircleHelper+0x184>
        if (f >= 0) {
 80009e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db0e      	blt.n	8000a0c <fillCircleHelper+0x7e>
            y--;
 80009ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	3b01      	subs	r3, #1
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80009fa:	8a7b      	ldrh	r3, [r7, #18]
 80009fc:	3302      	adds	r3, #2
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000a02:	8afa      	ldrh	r2, [r7, #22]
 8000a04:	8a7b      	ldrh	r3, [r7, #18]
 8000a06:	4413      	add	r3, r2
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000a0c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	3301      	adds	r3, #1
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000a18:	8abb      	ldrh	r3, [r7, #20]
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8000a20:	8afa      	ldrh	r2, [r7, #22]
 8000a22:	8abb      	ldrh	r3, [r7, #20]
 8000a24:	4413      	add	r3, r2
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8000a2a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a2e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	db31      	blt.n	8000a9a <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8000a36:	787b      	ldrb	r3, [r7, #1]
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d013      	beq.n	8000a68 <fillCircleHelper+0xda>
 8000a40:	88fa      	ldrh	r2, [r7, #6]
 8000a42:	8a3b      	ldrh	r3, [r7, #16]
 8000a44:	4413      	add	r3, r2
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	b218      	sxth	r0, r3
 8000a4a:	88ba      	ldrh	r2, [r7, #4]
 8000a4c:	89fb      	ldrh	r3, [r7, #14]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	b219      	sxth	r1, r3
 8000a54:	89fb      	ldrh	r3, [r7, #14]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	b21a      	sxth	r2, r3
 8000a62:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a64:	f7ff fe82 	bl	800076c <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8000a68:	787b      	ldrb	r3, [r7, #1]
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d013      	beq.n	8000a9a <fillCircleHelper+0x10c>
 8000a72:	88fa      	ldrh	r2, [r7, #6]
 8000a74:	8a3b      	ldrh	r3, [r7, #16]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	b218      	sxth	r0, r3
 8000a7c:	88ba      	ldrh	r2, [r7, #4]
 8000a7e:	89fb      	ldrh	r3, [r7, #14]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	b219      	sxth	r1, r3
 8000a86:	89fb      	ldrh	r3, [r7, #14]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a8e:	4413      	add	r3, r2
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a96:	f7ff fe69 	bl	800076c <drawFastVLine>
        }
        if(y != py) {
 8000a9a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a9e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d033      	beq.n	8000b0e <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8000aa6:	787b      	ldrb	r3, [r7, #1]
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d013      	beq.n	8000ad8 <fillCircleHelper+0x14a>
 8000ab0:	88fa      	ldrh	r2, [r7, #6]
 8000ab2:	897b      	ldrh	r3, [r7, #10]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	b218      	sxth	r0, r3
 8000aba:	88ba      	ldrh	r2, [r7, #4]
 8000abc:	89bb      	ldrh	r3, [r7, #12]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	b219      	sxth	r1, r3
 8000ac4:	89bb      	ldrh	r3, [r7, #12]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000acc:	4413      	add	r3, r2
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b21a      	sxth	r2, r3
 8000ad2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000ad4:	f7ff fe4a 	bl	800076c <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8000ad8:	787b      	ldrb	r3, [r7, #1]
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d013      	beq.n	8000b0a <fillCircleHelper+0x17c>
 8000ae2:	88fa      	ldrh	r2, [r7, #6]
 8000ae4:	897b      	ldrh	r3, [r7, #10]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	b218      	sxth	r0, r3
 8000aec:	88ba      	ldrh	r2, [r7, #4]
 8000aee:	89bb      	ldrh	r3, [r7, #12]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	b219      	sxth	r1, r3
 8000af6:	89bb      	ldrh	r3, [r7, #12]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000afe:	4413      	add	r3, r2
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b21a      	sxth	r2, r3
 8000b04:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000b06:	f7ff fe31 	bl	800076c <drawFastVLine>
            py = y;
 8000b0a:	89fb      	ldrh	r3, [r7, #14]
 8000b0c:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8000b0e:	8a3b      	ldrh	r3, [r7, #16]
 8000b10:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8000b12:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000b16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	f6ff af63 	blt.w	80009e6 <fillCircleHelper+0x58>
    }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	371c      	adds	r7, #28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd90      	pop	{r4, r7, pc}

08000b2a <fillCircle>:

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000b2a:	b590      	push	{r4, r7, lr}
 8000b2c:	b085      	sub	sp, #20
 8000b2e:	af02      	add	r7, sp, #8
 8000b30:	4604      	mov	r4, r0
 8000b32:	4608      	mov	r0, r1
 8000b34:	4611      	mov	r1, r2
 8000b36:	461a      	mov	r2, r3
 8000b38:	4623      	mov	r3, r4
 8000b3a:	80fb      	strh	r3, [r7, #6]
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	80bb      	strh	r3, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
 8000b44:	4613      	mov	r3, r2
 8000b46:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8000b48:	88ba      	ldrh	r2, [r7, #4]
 8000b4a:	887b      	ldrh	r3, [r7, #2]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	b219      	sxth	r1, r3
 8000b52:	887b      	ldrh	r3, [r7, #2]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	3301      	adds	r3, #1
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	b21a      	sxth	r2, r3
 8000b5e:	883b      	ldrh	r3, [r7, #0]
 8000b60:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b64:	f7ff fe02 	bl	800076c <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8000b68:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b6c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b70:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b74:	883b      	ldrh	r3, [r7, #0]
 8000b76:	9301      	str	r3, [sp, #4]
 8000b78:	2300      	movs	r3, #0
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	f7ff ff06 	bl	800098e <fillCircleHelper>
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd90      	pop	{r4, r7, pc}
	...

08000b8c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000b96:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <fillScreen+0x2c>)
 8000b98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b9c:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <fillScreen+0x30>)
 8000b9e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2000      	movs	r0, #0
 8000bac:	f7ff fd0b 	bl	80005c6 <fillRect>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000098 	.word	0x20000098
 8000bbc:	2000009a 	.word	0x2000009a

08000bc0 <MPU9250_Init>:
#include <stdint.h>

extern I2C_HandleTypeDef hi2c1;

void MPU9250_Init()
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af04      	add	r7, sp, #16
	uint8_t writeConfig = FS_GYRO_500;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	71bb      	strb	r3, [r7, #6]

	/* Verifying if the device is ready */
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADRESS << 1) + 0, 1, 100);
 8000bca:	2364      	movs	r3, #100	@ 0x64
 8000bcc:	2201      	movs	r2, #1
 8000bce:	21d0      	movs	r1, #208	@ 0xd0
 8000bd0:	482f      	ldr	r0, [pc, #188]	@ (8000c90 <MPU9250_Init+0xd0>)
 8000bd2:	f002 fc5f 	bl	8003494 <HAL_I2C_IsDeviceReady>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_OK)
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d103      	bne.n	8000be8 <MPU9250_Init+0x28>
	{
		printf("Device is ready to connect\n");
 8000be0:	482c      	ldr	r0, [pc, #176]	@ (8000c94 <MPU9250_Init+0xd4>)
 8000be2:	f005 f969 	bl	8005eb8 <puts>
 8000be6:	e002      	b.n	8000bee <MPU9250_Init+0x2e>
	}
	else
	{
		printf("Device is not ready to connect\n");
 8000be8:	482b      	ldr	r0, [pc, #172]	@ (8000c98 <MPU9250_Init+0xd8>)
 8000bea:	f005 f965 	bl	8005eb8 <puts>
	}

	/* Configurating Gyroscope */
	ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADRESS << 1) + 0, REG_CONFIG_GYRO, 1, &writeConfig, 1, 100);
 8000bee:	2364      	movs	r3, #100	@ 0x64
 8000bf0:	9302      	str	r3, [sp, #8]
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	1dbb      	adds	r3, r7, #6
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	221b      	movs	r2, #27
 8000bfe:	21d0      	movs	r1, #208	@ 0xd0
 8000c00:	4823      	ldr	r0, [pc, #140]	@ (8000c90 <MPU9250_Init+0xd0>)
 8000c02:	f002 f91b 	bl	8002e3c <HAL_I2C_Mem_Write>
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_OK)
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d103      	bne.n	8000c18 <MPU9250_Init+0x58>
	{
		printf("Gyroscope configured successfully\n");
 8000c10:	4822      	ldr	r0, [pc, #136]	@ (8000c9c <MPU9250_Init+0xdc>)
 8000c12:	f005 f951 	bl	8005eb8 <puts>
 8000c16:	e002      	b.n	8000c1e <MPU9250_Init+0x5e>
	}
	else
	{
		printf("Error while configuring gyroscope\n");
 8000c18:	4821      	ldr	r0, [pc, #132]	@ (8000ca0 <MPU9250_Init+0xe0>)
 8000c1a:	f005 f94d 	bl	8005eb8 <puts>
	}

	/* Configurating Accelerometer */
	writeConfig = FS_ACC_4G;
 8000c1e:	2308      	movs	r3, #8
 8000c20:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADRESS << 1) + 0, REG_CONFIG_ACC, 1, &writeConfig, 1, 100);
 8000c22:	2364      	movs	r3, #100	@ 0x64
 8000c24:	9302      	str	r3, [sp, #8]
 8000c26:	2301      	movs	r3, #1
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	1dbb      	adds	r3, r7, #6
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2301      	movs	r3, #1
 8000c30:	221c      	movs	r2, #28
 8000c32:	21d0      	movs	r1, #208	@ 0xd0
 8000c34:	4816      	ldr	r0, [pc, #88]	@ (8000c90 <MPU9250_Init+0xd0>)
 8000c36:	f002 f901 	bl	8002e3c <HAL_I2C_Mem_Write>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_OK)
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d103      	bne.n	8000c4c <MPU9250_Init+0x8c>
	{
		printf("Accelerometer configured successfully\n");
 8000c44:	4817      	ldr	r0, [pc, #92]	@ (8000ca4 <MPU9250_Init+0xe4>)
 8000c46:	f005 f937 	bl	8005eb8 <puts>
 8000c4a:	e002      	b.n	8000c52 <MPU9250_Init+0x92>
	}
	else
	{
		printf("Error while configuring accelerometer\n");
 8000c4c:	4816      	ldr	r0, [pc, #88]	@ (8000ca8 <MPU9250_Init+0xe8>)
 8000c4e:	f005 f933 	bl	8005eb8 <puts>
	}
	/* Exiting from sleep mode */
	writeConfig = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADRESS << 1) + 0, REG_PWR_CTRL, 1, &writeConfig, 1, 100);
 8000c56:	2364      	movs	r3, #100	@ 0x64
 8000c58:	9302      	str	r3, [sp, #8]
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	9301      	str	r3, [sp, #4]
 8000c5e:	1dbb      	adds	r3, r7, #6
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	226b      	movs	r2, #107	@ 0x6b
 8000c66:	21d0      	movs	r1, #208	@ 0xd0
 8000c68:	4809      	ldr	r0, [pc, #36]	@ (8000c90 <MPU9250_Init+0xd0>)
 8000c6a:	f002 f8e7 	bl	8002e3c <HAL_I2C_Mem_Write>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_OK)
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d103      	bne.n	8000c80 <MPU9250_Init+0xc0>
	{
		printf("Sleep mode disabled\n");
 8000c78:	480c      	ldr	r0, [pc, #48]	@ (8000cac <MPU9250_Init+0xec>)
 8000c7a:	f005 f91d 	bl	8005eb8 <puts>
	}
	else
	{
		printf("Error while exiting from sleep mode\n");
	}
}
 8000c7e:	e002      	b.n	8000c86 <MPU9250_Init+0xc6>
		printf("Error while exiting from sleep mode\n");
 8000c80:	480b      	ldr	r0, [pc, #44]	@ (8000cb0 <MPU9250_Init+0xf0>)
 8000c82:	f005 f919 	bl	8005eb8 <puts>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200000a8 	.word	0x200000a8
 8000c94:	08007074 	.word	0x08007074
 8000c98:	08007090 	.word	0x08007090
 8000c9c:	080070b0 	.word	0x080070b0
 8000ca0:	080070d4 	.word	0x080070d4
 8000ca4:	080070f8 	.word	0x080070f8
 8000ca8:	08007120 	.word	0x08007120
 8000cac:	08007148 	.word	0x08007148
 8000cb0:	0800715c 	.word	0x0800715c

08000cb4 <MPU9250_Gyro_ReadX>:

int MPU9250_Gyro_ReadX()
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af04      	add	r7, sp, #16
	uint8_t data[2];
	int16_t xGyro;
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADRESS << 1) + 1, REG_GYRO_DATA_X, 1, data, 2, 100);
 8000cba:	2364      	movs	r3, #100	@ 0x64
 8000cbc:	9302      	str	r3, [sp, #8]
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	223b      	movs	r2, #59	@ 0x3b
 8000cca:	21d1      	movs	r1, #209	@ 0xd1
 8000ccc:	4807      	ldr	r0, [pc, #28]	@ (8000cec <MPU9250_Gyro_ReadX+0x38>)
 8000cce:	f002 f9af 	bl	8003030 <HAL_I2C_Mem_Read>
	xGyro = ((int16_t)data[0] << 8) + data[1];
 8000cd2:	793b      	ldrb	r3, [r7, #4]
 8000cd4:	021b      	lsls	r3, r3, #8
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	797a      	ldrb	r2, [r7, #5]
 8000cda:	4413      	add	r3, r2
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	80fb      	strh	r3, [r7, #6]

	return xGyro;
 8000ce0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200000a8 	.word	0x200000a8

08000cf0 <MPU9250_Gyro_ReadY>:

int MPU9250_Gyro_ReadY()
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af04      	add	r7, sp, #16
	uint8_t data[2];
	int16_t yGyro;
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADRESS << 1) + 1, REG_GYRO_DATA_Y, 1, data, 2, 100);
 8000cf6:	2364      	movs	r3, #100	@ 0x64
 8000cf8:	9302      	str	r3, [sp, #8]
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	2301      	movs	r3, #1
 8000d04:	223d      	movs	r2, #61	@ 0x3d
 8000d06:	21d1      	movs	r1, #209	@ 0xd1
 8000d08:	4807      	ldr	r0, [pc, #28]	@ (8000d28 <MPU9250_Gyro_ReadY+0x38>)
 8000d0a:	f002 f991 	bl	8003030 <HAL_I2C_Mem_Read>
	yGyro = ((int16_t)data[0] << 8) + data[1];
 8000d0e:	793b      	ldrb	r3, [r7, #4]
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	797a      	ldrb	r2, [r7, #5]
 8000d16:	4413      	add	r3, r2
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	80fb      	strh	r3, [r7, #6]

	return yGyro;
 8000d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200000a8 	.word	0x200000a8

08000d2c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2140      	movs	r1, #64	@ 0x40
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <ST7735_Select+0x14>)
 8000d36:	f001 ff09 	bl	8002b4c <HAL_GPIO_WritePin>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40020400 	.word	0x40020400

08000d44 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2140      	movs	r1, #64	@ 0x40
 8000d4c:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <ST7735_Unselect+0x14>)
 8000d4e:	f001 fefd 	bl	8002b4c <HAL_GPIO_WritePin>
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40020400 	.word	0x40020400

08000d5c <ST7735_Reset>:

void ST7735_Reset()
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2180      	movs	r1, #128	@ 0x80
 8000d64:	4806      	ldr	r0, [pc, #24]	@ (8000d80 <ST7735_Reset+0x24>)
 8000d66:	f001 fef1 	bl	8002b4c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000d6a:	2005      	movs	r0, #5
 8000d6c:	f001 fc0c 	bl	8002588 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2180      	movs	r1, #128	@ 0x80
 8000d74:	4802      	ldr	r0, [pc, #8]	@ (8000d80 <ST7735_Reset+0x24>)
 8000d76:	f001 fee9 	bl	8002b4c <HAL_GPIO_WritePin>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40020800 	.word	0x40020800

08000d84 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d94:	4806      	ldr	r0, [pc, #24]	@ (8000db0 <ST7735_WriteCommand+0x2c>)
 8000d96:	f001 fed9 	bl	8002b4c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000d9a:	1df9      	adds	r1, r7, #7
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	2201      	movs	r2, #1
 8000da2:	4804      	ldr	r0, [pc, #16]	@ (8000db4 <ST7735_WriteCommand+0x30>)
 8000da4:	f003 fec9 	bl	8004b3a <HAL_SPI_Transmit>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40020000 	.word	0x40020000
 8000db4:	20000108 	.word	0x20000108

08000db8 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dc8:	4807      	ldr	r0, [pc, #28]	@ (8000de8 <ST7735_WriteData+0x30>)
 8000dca:	f001 febf 	bl	8002b4c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	4804      	ldr	r0, [pc, #16]	@ (8000dec <ST7735_WriteData+0x34>)
 8000dda:	f003 feae 	bl	8004b3a <HAL_SPI_Transmit>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40020000 	.word	0x40020000
 8000dec:	20000108 	.word	0x20000108

08000df0 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000e02:	e034      	b.n	8000e6e <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	607a      	str	r2, [r7, #4]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000e0e:	7afb      	ldrb	r3, [r7, #11]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ffb7 	bl	8000d84 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	1c5a      	adds	r2, r3, #1
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000e20:	7abb      	ldrb	r3, [r7, #10]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e28:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000e2a:	7abb      	ldrb	r3, [r7, #10]
 8000e2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e30:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000e32:	7abb      	ldrb	r3, [r7, #10]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d008      	beq.n	8000e4a <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000e38:	7abb      	ldrb	r3, [r7, #10]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ffbb 	bl	8000db8 <ST7735_WriteData>
            addr += numArgs;
 8000e42:	7abb      	ldrb	r3, [r7, #10]
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	4413      	add	r3, r2
 8000e48:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000e4a:	89bb      	ldrh	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d00e      	beq.n	8000e6e <DisplayInit+0x7e>
            ms = *addr++;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	1c5a      	adds	r2, r3, #1
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000e5a:	89bb      	ldrh	r3, [r7, #12]
 8000e5c:	2bff      	cmp	r3, #255	@ 0xff
 8000e5e:	d102      	bne.n	8000e66 <DisplayInit+0x76>
 8000e60:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e64:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000e66:	89bb      	ldrh	r3, [r7, #12]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 fb8d 	bl	8002588 <HAL_Delay>
    while(numCommands--) {
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	1e5a      	subs	r2, r3, #1
 8000e72:	73fa      	strb	r2, [r7, #15]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1c5      	bne.n	8000e04 <DisplayInit+0x14>
        }
    }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	4611      	mov	r1, r2
 8000e90:	461a      	mov	r2, r3
 8000e92:	4623      	mov	r3, r4
 8000e94:	71fb      	strb	r3, [r7, #7]
 8000e96:	4603      	mov	r3, r0
 8000e98:	71bb      	strb	r3, [r7, #6]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	717b      	strb	r3, [r7, #5]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000ea2:	202a      	movs	r0, #42	@ 0x2a
 8000ea4:	f7ff ff6e 	bl	8000d84 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	733b      	strb	r3, [r7, #12]
 8000eac:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <ST7735_SetAddressWindow+0x88>)
 8000eae:	781a      	ldrb	r2, [r3, #0]
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	737b      	strb	r3, [r7, #13]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73bb      	strb	r3, [r7, #14]
 8000ebc:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <ST7735_SetAddressWindow+0x88>)
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	797b      	ldrb	r3, [r7, #5]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2104      	movs	r1, #4
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff72 	bl	8000db8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000ed4:	202b      	movs	r0, #43	@ 0x2b
 8000ed6:	f7ff ff55 	bl	8000d84 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000eda:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <ST7735_SetAddressWindow+0x8c>)
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	79bb      	ldrb	r3, [r7, #6]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <ST7735_SetAddressWindow+0x8c>)
 8000ee8:	781a      	ldrb	r2, [r3, #0]
 8000eea:	793b      	ldrb	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff5d 	bl	8000db8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000efe:	202c      	movs	r0, #44	@ 0x2c
 8000f00:	f7ff ff40 	bl	8000d84 <ST7735_WriteCommand>
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	2000009f 	.word	0x2000009f
 8000f10:	200000a0 	.word	0x200000a0

08000f14 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000f1e:	f7ff ff05 	bl	8000d2c <ST7735_Select>
    ST7735_Reset();
 8000f22:	f7ff ff1b 	bl	8000d5c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000f26:	480c      	ldr	r0, [pc, #48]	@ (8000f58 <ST7735_Init+0x44>)
 8000f28:	f7ff ff62 	bl	8000df0 <DisplayInit>
    DisplayInit(init_cmds2);
 8000f2c:	480b      	ldr	r0, [pc, #44]	@ (8000f5c <ST7735_Init+0x48>)
 8000f2e:	f7ff ff5f 	bl	8000df0 <DisplayInit>
    DisplayInit(init_cmds3);
 8000f32:	480b      	ldr	r0, [pc, #44]	@ (8000f60 <ST7735_Init+0x4c>)
 8000f34:	f7ff ff5c 	bl	8000df0 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <ST7735_Init+0x50>)
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <ST7735_Init+0x54>)
 8000f40:	2203      	movs	r2, #3
 8000f42:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f810 	bl	8000f6c <ST7735_SetRotation>
    ST7735_Unselect();
 8000f4c:	f7ff fefa 	bl	8000d44 <ST7735_Unselect>

}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	080071b8 	.word	0x080071b8
 8000f5c:	080071f0 	.word	0x080071f0
 8000f60:	08007200 	.word	0x08007200
 8000f64:	2000009d 	.word	0x2000009d
 8000f68:	2000009e 	.word	0x2000009e

08000f6c <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b33      	ldr	r3, [pc, #204]	@ (8001050 <ST7735_SetRotation+0xe4>)
 8000f84:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000f86:	4b32      	ldr	r3, [pc, #200]	@ (8001050 <ST7735_SetRotation+0xe4>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d84e      	bhi.n	800102c <ST7735_SetRotation+0xc0>
 8000f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f94 <ST7735_SetRotation+0x28>)
 8000f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f94:	08000fa5 	.word	0x08000fa5
 8000f98:	08000fc7 	.word	0x08000fc7
 8000f9c:	08000fe9 	.word	0x08000fe9
 8000fa0:	0800100b 	.word	0x0800100b
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000fa4:	23c0      	movs	r3, #192	@ 0xc0
 8000fa6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001054 <ST7735_SetRotation+0xe8>)
 8000faa:	2280      	movs	r2, #128	@ 0x80
 8000fac:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000fae:	4b2a      	ldr	r3, [pc, #168]	@ (8001058 <ST7735_SetRotation+0xec>)
 8000fb0:	2280      	movs	r2, #128	@ 0x80
 8000fb2:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000fb4:	4b29      	ldr	r3, [pc, #164]	@ (800105c <ST7735_SetRotation+0xf0>)
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	4b29      	ldr	r3, [pc, #164]	@ (8001060 <ST7735_SetRotation+0xf4>)
 8000fba:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000fbc:	4b29      	ldr	r3, [pc, #164]	@ (8001064 <ST7735_SetRotation+0xf8>)
 8000fbe:	781a      	ldrb	r2, [r3, #0]
 8000fc0:	4b29      	ldr	r3, [pc, #164]	@ (8001068 <ST7735_SetRotation+0xfc>)
 8000fc2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000fc4:	e032      	b.n	800102c <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000fc6:	23a0      	movs	r3, #160	@ 0xa0
 8000fc8:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000fca:	4b23      	ldr	r3, [pc, #140]	@ (8001058 <ST7735_SetRotation+0xec>)
 8000fcc:	2280      	movs	r2, #128	@ 0x80
 8000fce:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000fd0:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <ST7735_SetRotation+0xe8>)
 8000fd2:	2280      	movs	r2, #128	@ 0x80
 8000fd4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000fd6:	4b21      	ldr	r3, [pc, #132]	@ (800105c <ST7735_SetRotation+0xf0>)
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	4b23      	ldr	r3, [pc, #140]	@ (8001068 <ST7735_SetRotation+0xfc>)
 8000fdc:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000fde:	4b21      	ldr	r3, [pc, #132]	@ (8001064 <ST7735_SetRotation+0xf8>)
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <ST7735_SetRotation+0xf4>)
 8000fe4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000fe6:	e021      	b.n	800102c <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000fec:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <ST7735_SetRotation+0xe8>)
 8000fee:	2280      	movs	r2, #128	@ 0x80
 8000ff0:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <ST7735_SetRotation+0xec>)
 8000ff4:	2280      	movs	r2, #128	@ 0x80
 8000ff6:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	@ (800105c <ST7735_SetRotation+0xf0>)
 8000ffa:	781a      	ldrb	r2, [r3, #0]
 8000ffc:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <ST7735_SetRotation+0xf4>)
 8000ffe:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8001000:	4b18      	ldr	r3, [pc, #96]	@ (8001064 <ST7735_SetRotation+0xf8>)
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <ST7735_SetRotation+0xfc>)
 8001006:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001008:	e010      	b.n	800102c <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800100a:	2360      	movs	r3, #96	@ 0x60
 800100c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800100e:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <ST7735_SetRotation+0xec>)
 8001010:	2280      	movs	r2, #128	@ 0x80
 8001012:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <ST7735_SetRotation+0xe8>)
 8001016:	2280      	movs	r2, #128	@ 0x80
 8001018:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <ST7735_SetRotation+0xf0>)
 800101c:	781a      	ldrb	r2, [r3, #0]
 800101e:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <ST7735_SetRotation+0xfc>)
 8001020:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <ST7735_SetRotation+0xf8>)
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <ST7735_SetRotation+0xf4>)
 8001028:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800102a:	bf00      	nop
  }
  ST7735_Select();
 800102c:	f7ff fe7e 	bl	8000d2c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8001030:	2036      	movs	r0, #54	@ 0x36
 8001032:	f7ff fea7 	bl	8000d84 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8001036:	f107 030f 	add.w	r3, r7, #15
 800103a:	2101      	movs	r1, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff febb 	bl	8000db8 <ST7735_WriteData>
  ST7735_Unselect();
 8001042:	f7ff fe7f 	bl	8000d44 <ST7735_Unselect>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000009c 	.word	0x2000009c
 8001054:	2000009a 	.word	0x2000009a
 8001058:	20000098 	.word	0x20000098
 800105c:	2000009d 	.word	0x2000009d
 8001060:	2000009f 	.word	0x2000009f
 8001064:	2000009e 	.word	0x2000009e
 8001068:	200000a0 	.word	0x200000a0

0800106c <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
 8001076:	460b      	mov	r3, r1
 8001078:	80bb      	strh	r3, [r7, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	4a17      	ldr	r2, [pc, #92]	@ (80010e0 <ST7735_DrawPixel+0x74>)
 8001082:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001086:	4293      	cmp	r3, r2
 8001088:	da26      	bge.n	80010d8 <ST7735_DrawPixel+0x6c>
 800108a:	88bb      	ldrh	r3, [r7, #4]
 800108c:	4a15      	ldr	r2, [pc, #84]	@ (80010e4 <ST7735_DrawPixel+0x78>)
 800108e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001092:	4293      	cmp	r3, r2
 8001094:	da20      	bge.n	80010d8 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 8001096:	f7ff fe49 	bl	8000d2c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	b2d8      	uxtb	r0, r3
 800109e:	88bb      	ldrh	r3, [r7, #4]
 80010a0:	b2d9      	uxtb	r1, r3
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	3301      	adds	r3, #1
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	88bb      	ldrh	r3, [r7, #4]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	3301      	adds	r3, #1
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f7ff fee7 	bl	8000e84 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	733b      	strb	r3, [r7, #12]
 80010c0:	887b      	ldrh	r3, [r7, #2]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	2102      	movs	r1, #2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fe73 	bl	8000db8 <ST7735_WriteData>

    ST7735_Unselect();
 80010d2:	f7ff fe37 	bl	8000d44 <ST7735_Unselect>
 80010d6:	e000      	b.n	80010da <ST7735_DrawPixel+0x6e>
        return;
 80010d8:	bf00      	nop
}
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000098 	.word	0x20000098
 80010e4:	2000009a 	.word	0x2000009a

080010e8 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80010e8:	b082      	sub	sp, #8
 80010ea:	b590      	push	{r4, r7, lr}
 80010ec:	b089      	sub	sp, #36	@ 0x24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
 80010f6:	460b      	mov	r3, r1
 80010f8:	80bb      	strh	r3, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	b2d8      	uxtb	r0, r3
 8001102:	88bb      	ldrh	r3, [r7, #4]
 8001104:	b2d9      	uxtb	r1, r3
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800110e:	4413      	add	r3, r2
 8001110:	b2db      	uxtb	r3, r3
 8001112:	3b01      	subs	r3, #1
 8001114:	b2dc      	uxtb	r4, r3
 8001116:	88bb      	ldrh	r3, [r7, #4]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800111e:	4413      	add	r3, r2
 8001120:	b2db      	uxtb	r3, r3
 8001122:	3b01      	subs	r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4622      	mov	r2, r4
 8001128:	f7ff feac 	bl	8000e84 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	e043      	b.n	80011ba <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001132:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	3b20      	subs	r3, #32
 8001138:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800113c:	fb01 f303 	mul.w	r3, r1, r3
 8001140:	4619      	mov	r1, r3
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	440b      	add	r3, r1
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	e029      	b.n	80011a8 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00e      	beq.n	8001182 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001164:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001166:	0a1b      	lsrs	r3, r3, #8
 8001168:	b29b      	uxth	r3, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	743b      	strb	r3, [r7, #16]
 800116e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001170:	b2db      	uxtb	r3, r3
 8001172:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2102      	movs	r1, #2
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fe1c 	bl	8000db8 <ST7735_WriteData>
 8001180:	e00f      	b.n	80011a2 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001182:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	b29b      	uxth	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	733b      	strb	r3, [r7, #12]
 800118e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001192:	b2db      	uxtb	r3, r3
 8001194:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	2102      	movs	r1, #2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fe0b 	bl	8000db8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	3301      	adds	r3, #1
 80011a6:	61bb      	str	r3, [r7, #24]
 80011a8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80011ac:	461a      	mov	r2, r3
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d3cf      	bcc.n	8001154 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	3301      	adds	r3, #1
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80011be:	461a      	mov	r2, r3
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d3b5      	bcc.n	8001132 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80011c6:	bf00      	nop
 80011c8:	bf00      	nop
 80011ca:	3724      	adds	r7, #36	@ 0x24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80011d2:	b002      	add	sp, #8
 80011d4:	4770      	bx	lr
	...

080011d8 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80011d8:	b082      	sub	sp, #8
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af04      	add	r7, sp, #16
 80011e0:	603a      	str	r2, [r7, #0]
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	4603      	mov	r3, r0
 80011e6:	80fb      	strh	r3, [r7, #6]
 80011e8:	460b      	mov	r3, r1
 80011ea:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80011ec:	f7ff fd9e 	bl	8000d2c <ST7735_Select>

    while(*str) {
 80011f0:	e033      	b.n	800125a <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	7d3a      	ldrb	r2, [r7, #20]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001278 <ST7735_WriteString+0xa0>)
 80011fa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011fe:	4293      	cmp	r3, r2
 8001200:	db16      	blt.n	8001230 <ST7735_WriteString+0x58>
            x = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001206:	7d7b      	ldrb	r3, [r7, #21]
 8001208:	461a      	mov	r2, r3
 800120a:	88bb      	ldrh	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8001210:	88bb      	ldrh	r3, [r7, #4]
 8001212:	7d7a      	ldrb	r2, [r7, #21]
 8001214:	4413      	add	r3, r2
 8001216:	4a19      	ldr	r2, [pc, #100]	@ (800127c <ST7735_WriteString+0xa4>)
 8001218:	f9b2 2000 	ldrsh.w	r2, [r2]
 800121c:	4293      	cmp	r3, r2
 800121e:	da21      	bge.n	8001264 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b20      	cmp	r3, #32
 8001226:	d103      	bne.n	8001230 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	603b      	str	r3, [r7, #0]
                continue;
 800122e:	e014      	b.n	800125a <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	88b9      	ldrh	r1, [r7, #4]
 8001236:	88f8      	ldrh	r0, [r7, #6]
 8001238:	8c3b      	ldrh	r3, [r7, #32]
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	8bbb      	ldrh	r3, [r7, #28]
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	f7ff ff4f 	bl	80010e8 <ST7735_WriteChar>
        x += font.width;
 800124a:	7d3b      	ldrb	r3, [r7, #20]
 800124c:	461a      	mov	r2, r3
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	4413      	add	r3, r2
 8001252:	80fb      	strh	r3, [r7, #6]
        str++;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	603b      	str	r3, [r7, #0]
    while(*str) {
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1c7      	bne.n	80011f2 <ST7735_WriteString+0x1a>
 8001262:	e000      	b.n	8001266 <ST7735_WriteString+0x8e>
                break;
 8001264:	bf00      	nop
    }

    ST7735_Unselect();
 8001266:	f7ff fd6d 	bl	8000d44 <ST7735_Unselect>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001274:	b002      	add	sp, #8
 8001276:	4770      	bx	lr
 8001278:	20000098 	.word	0x20000098
 800127c:	2000009a 	.word	0x2000009a

08001280 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	4604      	mov	r4, r0
 8001288:	4608      	mov	r0, r1
 800128a:	4611      	mov	r1, r2
 800128c:	461a      	mov	r2, r3
 800128e:	4623      	mov	r3, r4
 8001290:	80fb      	strh	r3, [r7, #6]
 8001292:	4603      	mov	r3, r0
 8001294:	80bb      	strh	r3, [r7, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	807b      	strh	r3, [r7, #2]
 800129a:	4613      	mov	r3, r2
 800129c:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	4a38      	ldr	r2, [pc, #224]	@ (8001384 <ST7735_FillRectangle+0x104>)
 80012a2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012a6:	4293      	cmp	r3, r2
 80012a8:	da67      	bge.n	800137a <ST7735_FillRectangle+0xfa>
 80012aa:	88bb      	ldrh	r3, [r7, #4]
 80012ac:	4a36      	ldr	r2, [pc, #216]	@ (8001388 <ST7735_FillRectangle+0x108>)
 80012ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012b2:	4293      	cmp	r3, r2
 80012b4:	da61      	bge.n	800137a <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 80012b6:	88fa      	ldrh	r2, [r7, #6]
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a31      	ldr	r2, [pc, #196]	@ (8001384 <ST7735_FillRectangle+0x104>)
 80012be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012c2:	4293      	cmp	r3, r2
 80012c4:	dd06      	ble.n	80012d4 <ST7735_FillRectangle+0x54>
 80012c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001384 <ST7735_FillRectangle+0x104>)
 80012c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 80012d4:	88ba      	ldrh	r2, [r7, #4]
 80012d6:	883b      	ldrh	r3, [r7, #0]
 80012d8:	4413      	add	r3, r2
 80012da:	4a2b      	ldr	r2, [pc, #172]	@ (8001388 <ST7735_FillRectangle+0x108>)
 80012dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012e0:	4293      	cmp	r3, r2
 80012e2:	dd06      	ble.n	80012f2 <ST7735_FillRectangle+0x72>
 80012e4:	4b28      	ldr	r3, [pc, #160]	@ (8001388 <ST7735_FillRectangle+0x108>)
 80012e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	88bb      	ldrh	r3, [r7, #4]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80012f2:	f7ff fd1b 	bl	8000d2c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	b2d8      	uxtb	r0, r3
 80012fa:	88bb      	ldrh	r3, [r7, #4]
 80012fc:	b2d9      	uxtb	r1, r3
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	b2db      	uxtb	r3, r3
 800130a:	3b01      	subs	r3, #1
 800130c:	b2dc      	uxtb	r4, r3
 800130e:	88bb      	ldrh	r3, [r7, #4]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	883b      	ldrh	r3, [r7, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4413      	add	r3, r2
 8001318:	b2db      	uxtb	r3, r3
 800131a:	3b01      	subs	r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4622      	mov	r2, r4
 8001320:	f7ff fdb0 	bl	8000e84 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001324:	8c3b      	ldrh	r3, [r7, #32]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	b29b      	uxth	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	733b      	strb	r3, [r7, #12]
 800132e:	8c3b      	ldrh	r3, [r7, #32]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800133a:	4814      	ldr	r0, [pc, #80]	@ (800138c <ST7735_FillRectangle+0x10c>)
 800133c:	f001 fc06 	bl	8002b4c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001340:	883b      	ldrh	r3, [r7, #0]
 8001342:	80bb      	strh	r3, [r7, #4]
 8001344:	e013      	b.n	800136e <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	80fb      	strh	r3, [r7, #6]
 800134a:	e00a      	b.n	8001362 <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800134c:	f107 010c 	add.w	r1, r7, #12
 8001350:	f04f 33ff 	mov.w	r3, #4294967295
 8001354:	2202      	movs	r2, #2
 8001356:	480e      	ldr	r0, [pc, #56]	@ (8001390 <ST7735_FillRectangle+0x110>)
 8001358:	f003 fbef 	bl	8004b3a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	3b01      	subs	r3, #1
 8001360:	80fb      	strh	r3, [r7, #6]
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1f1      	bne.n	800134c <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 8001368:	88bb      	ldrh	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	80bb      	strh	r3, [r7, #4]
 800136e:	88bb      	ldrh	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1e8      	bne.n	8001346 <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 8001374:	f7ff fce6 	bl	8000d44 <ST7735_Unselect>
 8001378:	e000      	b.n	800137c <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 800137a:	bf00      	nop
}
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	20000098 	.word	0x20000098
 8001388:	2000009a 	.word	0x2000009a
 800138c:	40020000 	.word	0x40020000
 8001390:	20000108 	.word	0x20000108

08001394 <geniusInit>:
#include <stdlib.h>

int difficulty;

void geniusInit()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	/*Fill the circles with it colors*/
	fillScreen(WHITE);
 800139a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800139e:	f7ff fbf5 	bl	8000b8c <fillScreen>
	drawCircle(COORD_X_UP, COORD_Y_UP, RADIUS, BLACK); //UP circle
 80013a2:	2300      	movs	r3, #0
 80013a4:	2217      	movs	r2, #23
 80013a6:	211a      	movs	r1, #26
 80013a8:	2040      	movs	r0, #64	@ 0x40
 80013aa:	f7ff fa04 	bl	80007b6 <drawCircle>
	drawCircle(COORD_X_DOWN, COORD_Y_DOWN, RADIUS, BLACK); //DOWN circle
 80013ae:	2300      	movs	r3, #0
 80013b0:	2217      	movs	r2, #23
 80013b2:	2165      	movs	r1, #101	@ 0x65
 80013b4:	2040      	movs	r0, #64	@ 0x40
 80013b6:	f7ff f9fe 	bl	80007b6 <drawCircle>
	drawCircle(COORD_X_LEFT, COORD_Y_LEFT, RADIUS, BLACK); //LEFT circle
 80013ba:	2300      	movs	r3, #0
 80013bc:	2217      	movs	r2, #23
 80013be:	2140      	movs	r1, #64	@ 0x40
 80013c0:	201a      	movs	r0, #26
 80013c2:	f7ff f9f8 	bl	80007b6 <drawCircle>
	drawCircle(COORD_X_RIGHT, COORD_Y_RIGHT, RADIUS, BLACK); //RIGHT circle
 80013c6:	2300      	movs	r3, #0
 80013c8:	2217      	movs	r2, #23
 80013ca:	2140      	movs	r1, #64	@ 0x40
 80013cc:	2065      	movs	r0, #101	@ 0x65
 80013ce:	f7ff f9f2 	bl	80007b6 <drawCircle>
	/*Fill the circles with low opacity colors*/
	fillCircle(COORD_X_UP, COORD_Y_UP, RADIUS-1, color565(169, 169, 255)); //Filling the up circle with low opacity RED
 80013d2:	f64a 535f 	movw	r3, #44383	@ 0xad5f
 80013d6:	2216      	movs	r2, #22
 80013d8:	211a      	movs	r1, #26
 80013da:	2040      	movs	r0, #64	@ 0x40
 80013dc:	f7ff fba5 	bl	8000b2a <fillCircle>
	fillCircle(COORD_X_LEFT, COORD_Y_LEFT, RADIUS-1, color565(255, 169, 169)); //Filling the left circle with low opacity BLUE
 80013e0:	f64f 5355 	movw	r3, #64853	@ 0xfd55
 80013e4:	2216      	movs	r2, #22
 80013e6:	2140      	movs	r1, #64	@ 0x40
 80013e8:	201a      	movs	r0, #26
 80013ea:	f7ff fb9e 	bl	8000b2a <fillCircle>
	fillCircle(COORD_X_DOWN, COORD_Y_DOWN, RADIUS-1, color565(169, 255, 169)); //Filling the down circle with low opacity YELLOW
 80013ee:	f64a 73f5 	movw	r3, #45045	@ 0xaff5
 80013f2:	2216      	movs	r2, #22
 80013f4:	2165      	movs	r1, #101	@ 0x65
 80013f6:	2040      	movs	r0, #64	@ 0x40
 80013f8:	f7ff fb97 	bl	8000b2a <fillCircle>
	fillCircle(COORD_X_RIGHT, COORD_Y_RIGHT, RADIUS-1, color565(169, 255, 255)); //Filling the right circle with low opacity GREEN
 80013fc:	f64a 73ff 	movw	r3, #45055	@ 0xafff
 8001400:	2216      	movs	r2, #22
 8001402:	2140      	movs	r1, #64	@ 0x40
 8001404:	2065      	movs	r0, #101	@ 0x65
 8001406:	f7ff fb90 	bl	8000b2a <fillCircle>
	/*Initiate the random numbers seed*/
	uint32_t seed = HAL_GetTick();
 800140a:	f001 f8b1 	bl	8002570 <HAL_GetTick>
 800140e:	6078      	str	r0, [r7, #4]
	seed ^= (MPU9250_Gyro_ReadX() << 16);
 8001410:	f7ff fc50 	bl	8000cb4 <MPU9250_Gyro_ReadX>
 8001414:	4603      	mov	r3, r0
 8001416:	041b      	lsls	r3, r3, #16
 8001418:	461a      	mov	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4053      	eors	r3, r2
 800141e:	607b      	str	r3, [r7, #4]
	seed ^= (MPU9250_Gyro_ReadY() << 8);
 8001420:	f7ff fc66 	bl	8000cf0 <MPU9250_Gyro_ReadY>
 8001424:	4603      	mov	r3, r0
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	461a      	mov	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4053      	eors	r3, r2
 800142e:	607b      	str	r3, [r7, #4]
	srand(seed);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f004 fbab 	bl	8005b8c <srand>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <geniusDifficulty>:

void geniusDifficulty(int diff)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	switch(diff)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d012      	beq.n	8001474 <geniusDifficulty+0x34>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b03      	cmp	r3, #3
 8001452:	dc13      	bgt.n	800147c <geniusDifficulty+0x3c>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <geniusDifficulty+0x22>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d005      	beq.n	800146c <geniusDifficulty+0x2c>
 8001460:	e00c      	b.n	800147c <geniusDifficulty+0x3c>
	{
	case 0:
		difficulty = EASY_DELAY;
 8001462:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <geniusDifficulty+0x50>)
 8001464:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001468:	601a      	str	r2, [r3, #0]
		break;
 800146a:	e00b      	b.n	8001484 <geniusDifficulty+0x44>
	case 1:
		difficulty = HARD_DELAY;
 800146c:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <geniusDifficulty+0x50>)
 800146e:	224b      	movs	r2, #75	@ 0x4b
 8001470:	601a      	str	r2, [r3, #0]
		break;
 8001472:	e007      	b.n	8001484 <geniusDifficulty+0x44>
	case 3:
		difficulty = IMPOSSIBLE_DELAY;
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <geniusDifficulty+0x50>)
 8001476:	2219      	movs	r2, #25
 8001478:	601a      	str	r2, [r3, #0]
		break;
 800147a:	e003      	b.n	8001484 <geniusDifficulty+0x44>
	default:
	case 2:
		difficulty = MEDIUM_DELAY;
 800147c:	4b04      	ldr	r3, [pc, #16]	@ (8001490 <geniusDifficulty+0x50>)
 800147e:	22c8      	movs	r2, #200	@ 0xc8
 8001480:	601a      	str	r2, [r3, #0]
		break;
 8001482:	bf00      	nop
	}
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	200000a4 	.word	0x200000a4

08001494 <geniusToggleCircle>:

void geniusToggleCircle(int position)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	switch(position)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d871      	bhi.n	8001586 <geniusToggleCircle+0xf2>
 80014a2:	a201      	add	r2, pc, #4	@ (adr r2, 80014a8 <geniusToggleCircle+0x14>)
 80014a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a8:	080014b9 	.word	0x080014b9
 80014ac:	080014eb 	.word	0x080014eb
 80014b0:	0800151f 	.word	0x0800151f
 80014b4:	08001553 	.word	0x08001553
		Initiate the timer with it frequency
		Fill the circle with it color on low opacity
		Stop the timer
*/
	case 0:
		fillCircle(COORD_X_UP, COORD_Y_UP, RADIUS-1, BLUE);
 80014b8:	231f      	movs	r3, #31
 80014ba:	2216      	movs	r2, #22
 80014bc:	211a      	movs	r1, #26
 80014be:	2040      	movs	r0, #64	@ 0x40
 80014c0:	f7ff fb33 	bl	8000b2a <fillCircle>
		HAL_Delay(difficulty);
 80014c4:	4b32      	ldr	r3, [pc, #200]	@ (8001590 <geniusToggleCircle+0xfc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 f85d 	bl	8002588 <HAL_Delay>
		HAL_TIM_Base_Start_IT(&htim11);
 80014ce:	4831      	ldr	r0, [pc, #196]	@ (8001594 <geniusToggleCircle+0x100>)
 80014d0:	f003 fda4 	bl	800501c <HAL_TIM_Base_Start_IT>
		fillCircle(COORD_X_UP, COORD_Y_UP, RADIUS-1, color565(169, 169, 255));
 80014d4:	f64a 535f 	movw	r3, #44383	@ 0xad5f
 80014d8:	2216      	movs	r2, #22
 80014da:	211a      	movs	r1, #26
 80014dc:	2040      	movs	r0, #64	@ 0x40
 80014de:	f7ff fb24 	bl	8000b2a <fillCircle>
		HAL_TIM_Base_Stop_IT(&htim11);
 80014e2:	482c      	ldr	r0, [pc, #176]	@ (8001594 <geniusToggleCircle+0x100>)
 80014e4:	f003 fe0a 	bl	80050fc <HAL_TIM_Base_Stop_IT>
		break;
 80014e8:	e04e      	b.n	8001588 <geniusToggleCircle+0xf4>
	case 1:
		fillCircle(COORD_X_DOWN, COORD_Y_DOWN, RADIUS-1, GREEN);
 80014ea:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80014ee:	2216      	movs	r2, #22
 80014f0:	2165      	movs	r1, #101	@ 0x65
 80014f2:	2040      	movs	r0, #64	@ 0x40
 80014f4:	f7ff fb19 	bl	8000b2a <fillCircle>
		HAL_Delay(difficulty);
 80014f8:	4b25      	ldr	r3, [pc, #148]	@ (8001590 <geniusToggleCircle+0xfc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 f843 	bl	8002588 <HAL_Delay>
		HAL_TIM_Base_Start_IT(&htim10);
 8001502:	4825      	ldr	r0, [pc, #148]	@ (8001598 <geniusToggleCircle+0x104>)
 8001504:	f003 fd8a 	bl	800501c <HAL_TIM_Base_Start_IT>
		fillCircle(COORD_X_DOWN, COORD_Y_DOWN, RADIUS-1, color565(169, 255, 169));
 8001508:	f64a 73f5 	movw	r3, #45045	@ 0xaff5
 800150c:	2216      	movs	r2, #22
 800150e:	2165      	movs	r1, #101	@ 0x65
 8001510:	2040      	movs	r0, #64	@ 0x40
 8001512:	f7ff fb0a 	bl	8000b2a <fillCircle>
		HAL_TIM_Base_Stop_IT(&htim10);
 8001516:	4820      	ldr	r0, [pc, #128]	@ (8001598 <geniusToggleCircle+0x104>)
 8001518:	f003 fdf0 	bl	80050fc <HAL_TIM_Base_Stop_IT>
		break;
 800151c:	e034      	b.n	8001588 <geniusToggleCircle+0xf4>
	case 2:
		fillCircle(COORD_X_LEFT, COORD_Y_LEFT, RADIUS-1, RED);
 800151e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001522:	2216      	movs	r2, #22
 8001524:	2140      	movs	r1, #64	@ 0x40
 8001526:	201a      	movs	r0, #26
 8001528:	f7ff faff 	bl	8000b2a <fillCircle>
		HAL_Delay(difficulty);
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <geniusToggleCircle+0xfc>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f001 f829 	bl	8002588 <HAL_Delay>
		HAL_TIM_Base_Start_IT(&htim7);
 8001536:	4819      	ldr	r0, [pc, #100]	@ (800159c <geniusToggleCircle+0x108>)
 8001538:	f003 fd70 	bl	800501c <HAL_TIM_Base_Start_IT>
		fillCircle(COORD_X_LEFT, COORD_Y_LEFT, RADIUS-1, color565(255, 169, 169));
 800153c:	f64f 5355 	movw	r3, #64853	@ 0xfd55
 8001540:	2216      	movs	r2, #22
 8001542:	2140      	movs	r1, #64	@ 0x40
 8001544:	201a      	movs	r0, #26
 8001546:	f7ff faf0 	bl	8000b2a <fillCircle>
		HAL_TIM_Base_Stop_IT(&htim7);
 800154a:	4814      	ldr	r0, [pc, #80]	@ (800159c <geniusToggleCircle+0x108>)
 800154c:	f003 fdd6 	bl	80050fc <HAL_TIM_Base_Stop_IT>
		break;
 8001550:	e01a      	b.n	8001588 <geniusToggleCircle+0xf4>
	case 3:
		fillCircle(COORD_X_RIGHT, COORD_Y_RIGHT, RADIUS-1, CYAN);
 8001552:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001556:	2216      	movs	r2, #22
 8001558:	2140      	movs	r1, #64	@ 0x40
 800155a:	2065      	movs	r0, #101	@ 0x65
 800155c:	f7ff fae5 	bl	8000b2a <fillCircle>
		HAL_Delay(difficulty);
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <geniusToggleCircle+0xfc>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f001 f80f 	bl	8002588 <HAL_Delay>
		HAL_TIM_Base_Start_IT(&htim6);
 800156a:	480d      	ldr	r0, [pc, #52]	@ (80015a0 <geniusToggleCircle+0x10c>)
 800156c:	f003 fd56 	bl	800501c <HAL_TIM_Base_Start_IT>
		fillCircle(COORD_X_RIGHT, COORD_Y_RIGHT, RADIUS-1, color565(169, 255, 255));
 8001570:	f64a 73ff 	movw	r3, #45055	@ 0xafff
 8001574:	2216      	movs	r2, #22
 8001576:	2140      	movs	r1, #64	@ 0x40
 8001578:	2065      	movs	r0, #101	@ 0x65
 800157a:	f7ff fad6 	bl	8000b2a <fillCircle>
		HAL_TIM_Base_Stop_IT(&htim6);
 800157e:	4808      	ldr	r0, [pc, #32]	@ (80015a0 <geniusToggleCircle+0x10c>)
 8001580:	f003 fdbc 	bl	80050fc <HAL_TIM_Base_Stop_IT>
		break;
 8001584:	e000      	b.n	8001588 <geniusToggleCircle+0xf4>
	default:
		break;
 8001586:	bf00      	nop
	}
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200000a4 	.word	0x200000a4
 8001594:	2000023c 	.word	0x2000023c
 8001598:	200001f4 	.word	0x200001f4
 800159c:	200001ac 	.word	0x200001ac
 80015a0:	20000164 	.word	0x20000164

080015a4 <geniusGetChoice>:

int geniusGetChoice(int xA, int yA)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
	int choice;
	if(xA >= PARAM)        choice = 0;  //UP
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f640 52ab 	movw	r2, #3499	@ 0xdab
 80015b4:	4293      	cmp	r3, r2
 80015b6:	dd02      	ble.n	80015be <geniusGetChoice+0x1a>
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	e018      	b.n	80015f0 <geniusGetChoice+0x4c>
	else if(xA <= -PARAM)  choice = 1;  //DOWN
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001600 <geniusGetChoice+0x5c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	da02      	bge.n	80015cc <geniusGetChoice+0x28>
 80015c6:	2301      	movs	r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	e011      	b.n	80015f0 <geniusGetChoice+0x4c>
	else if(yA >= PARAM)   choice = 2;  //LEFT
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	f640 52ab 	movw	r2, #3499	@ 0xdab
 80015d2:	4293      	cmp	r3, r2
 80015d4:	dd02      	ble.n	80015dc <geniusGetChoice+0x38>
 80015d6:	2302      	movs	r3, #2
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	e009      	b.n	80015f0 <geniusGetChoice+0x4c>
	else if(yA <= -PARAM)  choice = 3;  //RIGHT
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	4a08      	ldr	r2, [pc, #32]	@ (8001600 <geniusGetChoice+0x5c>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	da02      	bge.n	80015ea <geniusGetChoice+0x46>
 80015e4:	2303      	movs	r3, #3
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	e002      	b.n	80015f0 <geniusGetChoice+0x4c>
	else                   choice = -1; //REST SPOT
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	60fb      	str	r3, [r7, #12]

	return choice;
 80015f0:	68fb      	ldr	r3, [r7, #12]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	fffff255 	.word	0xfffff255

08001604 <geniusGame>:

int geniusGame()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	f5ad 7d2e 	sub.w	sp, sp, #696	@ 0x2b8
 800160a:	af04      	add	r7, sp, #16
	/*Game management*/
	int defeat = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
	int score = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
	/*Gyroscope axes*/
	int x, y;
	/*Displays buffer*/
	char buffer[50];

	while (!defeat)
 8001618:	e0d5      	b.n	80017c6 <geniusGame+0x1c2>
	{
		rightOnes[score] = rand() % 4;
 800161a:	f004 fae5 	bl	8005be8 <rand>
 800161e:	4603      	mov	r3, r0
 8001620:	425a      	negs	r2, r3
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	f002 0203 	and.w	r2, r2, #3
 800162a:	bf58      	it	pl
 800162c:	4253      	negpl	r3, r2
 800162e:	f507 722a 	add.w	r2, r7, #680	@ 0x2a8
 8001632:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8001636:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 800163a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		snprintf(buffer, 40, "%i", score);
 800163e:	4638      	mov	r0, r7
 8001640:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001644:	4a66      	ldr	r2, [pc, #408]	@ (80017e0 <geniusGame+0x1dc>)
 8001646:	2128      	movs	r1, #40	@ 0x28
 8001648:	f004 fc3e 	bl	8005ec8 <sniprintf>
		ST7735_WriteString(COORD_X_SCORE, COORD_Y_SCORE, buffer, Font_11x18, BLACK, WHITE);
 800164c:	4b65      	ldr	r3, [pc, #404]	@ (80017e4 <geniusGame+0x1e0>)
 800164e:	4639      	mov	r1, r7
 8001650:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001654:	9202      	str	r2, [sp, #8]
 8001656:	2200      	movs	r2, #0
 8001658:	9201      	str	r2, [sp, #4]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	9200      	str	r2, [sp, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	460a      	mov	r2, r1
 8001662:	2137      	movs	r1, #55	@ 0x37
 8001664:	203b      	movs	r0, #59	@ 0x3b
 8001666:	f7ff fdb7 	bl	80011d8 <ST7735_WriteString>

		for(int i = 0; i <= score; i++) //Showing all the sequence
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8001670:	e012      	b.n	8001698 <geniusGame+0x94>
		{
			geniusToggleCircle(rightOnes[i]);
 8001672:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001676:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 800167a:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 800167e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff06 	bl	8001494 <geniusToggleCircle>
			HAL_Delay(100);
 8001688:	2064      	movs	r0, #100	@ 0x64
 800168a:	f000 ff7d 	bl	8002588 <HAL_Delay>
		for(int i = 0; i <= score; i++) //Showing all the sequence
 800168e:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001692:	3301      	adds	r3, #1
 8001694:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8001698:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 800169c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dde6      	ble.n	8001672 <geniusGame+0x6e>
		}

		for (int i = 0; i <= score; i++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 80016aa:	e043      	b.n	8001734 <geniusGame+0x130>
		{
			do {
				x = MPU9250_Gyro_ReadX();
 80016ac:	f7ff fb02 	bl	8000cb4 <MPU9250_Gyro_ReadX>
 80016b0:	f8c7 0294 	str.w	r0, [r7, #660]	@ 0x294
				y = MPU9250_Gyro_ReadY();
 80016b4:	f7ff fb1c 	bl	8000cf0 <MPU9250_Gyro_ReadY>
 80016b8:	f8c7 0290 	str.w	r0, [r7, #656]	@ 0x290
				choice = geniusGetChoice(x, y);
 80016bc:	f8d7 1290 	ldr.w	r1, [r7, #656]	@ 0x290
 80016c0:	f8d7 0294 	ldr.w	r0, [r7, #660]	@ 0x294
 80016c4:	f7ff ff6e 	bl	80015a4 <geniusGetChoice>
 80016c8:	f8c7 028c 	str.w	r0, [r7, #652]	@ 0x28c
				HAL_Delay(difficulty/2);
 80016cc:	4b46      	ldr	r3, [pc, #280]	@ (80017e8 <geniusGame+0x1e4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0fda      	lsrs	r2, r3, #31
 80016d2:	4413      	add	r3, r2
 80016d4:	105b      	asrs	r3, r3, #1
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 ff56 	bl	8002588 <HAL_Delay>
			} while (choice == -1);
 80016dc:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 80016e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e4:	d0e2      	beq.n	80016ac <geniusGame+0xa8>

			geniusToggleCircle(choice);
 80016e6:	f8d7 028c 	ldr.w	r0, [r7, #652]	@ 0x28c
 80016ea:	f7ff fed3 	bl	8001494 <geniusToggleCircle>
			printf("Choice: %i\nRight one: %i\n", choice, rightOnes[i]);
 80016ee:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80016f2:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80016f6:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 80016fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fe:	461a      	mov	r2, r3
 8001700:	f8d7 128c 	ldr.w	r1, [r7, #652]	@ 0x28c
 8001704:	4839      	ldr	r0, [pc, #228]	@ (80017ec <geniusGame+0x1e8>)
 8001706:	f004 fb6f 	bl	8005de8 <iprintf>

			if (choice != rightOnes[i])
 800170a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800170e:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8001712:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171a:	f8d7 228c 	ldr.w	r2, [r7, #652]	@ 0x28c
 800171e:	429a      	cmp	r2, r3
 8001720:	d003      	beq.n	800172a <geniusGame+0x126>
			{
				defeat = 1;
 8001722:	2301      	movs	r3, #1
 8001724:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
				break;
 8001728:	e00a      	b.n	8001740 <geniusGame+0x13c>
		for (int i = 0; i <= score; i++)
 800172a:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 800172e:	3301      	adds	r3, #1
 8001730:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8001734:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001738:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800173c:	429a      	cmp	r2, r3
 800173e:	ddb5      	ble.n	80016ac <geniusGame+0xa8>
			}
		}

		if (!defeat)
 8001740:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10e      	bne.n	8001766 <geniusGame+0x162>
		{
			score++;
 8001748:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800174c:	3301      	adds	r3, #1
 800174e:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
			HAL_Delay(difficulty/4);
 8001752:	4b25      	ldr	r3, [pc, #148]	@ (80017e8 <geniusGame+0x1e4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	da00      	bge.n	800175c <geniusGame+0x158>
 800175a:	3303      	adds	r3, #3
 800175c:	109b      	asrs	r3, r3, #2
 800175e:	4618      	mov	r0, r3
 8001760:	f000 ff12 	bl	8002588 <HAL_Delay>
 8001764:	e02f      	b.n	80017c6 <geniusGame+0x1c2>
		}
		else
		{
			ST7735_WriteString(COORD_X_DEFEATMSG, COORD_Y_DEFEATMSG, "DERROTA", Font_16x26, WHITE, BLUE);
 8001766:	4b22      	ldr	r3, [pc, #136]	@ (80017f0 <geniusGame+0x1ec>)
 8001768:	221f      	movs	r2, #31
 800176a:	9202      	str	r2, [sp, #8]
 800176c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001770:	9201      	str	r2, [sp, #4]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	9200      	str	r2, [sp, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1e      	ldr	r2, [pc, #120]	@ (80017f4 <geniusGame+0x1f0>)
 800177a:	2136      	movs	r1, #54	@ 0x36
 800177c:	2005      	movs	r0, #5
 800177e:	f7ff fd2b 	bl	80011d8 <ST7735_WriteString>
			/*Defeat sound effect*/
			HAL_TIM_Base_Start_IT(&htim11);
 8001782:	481d      	ldr	r0, [pc, #116]	@ (80017f8 <geniusGame+0x1f4>)
 8001784:	f003 fc4a 	bl	800501c <HAL_TIM_Base_Start_IT>
			HAL_Delay(350);
 8001788:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800178c:	f000 fefc 	bl	8002588 <HAL_Delay>
			HAL_TIM_Base_Stop_IT(&htim11);
 8001790:	4819      	ldr	r0, [pc, #100]	@ (80017f8 <geniusGame+0x1f4>)
 8001792:	f003 fcb3 	bl	80050fc <HAL_TIM_Base_Stop_IT>
			HAL_Delay(50);
 8001796:	2032      	movs	r0, #50	@ 0x32
 8001798:	f000 fef6 	bl	8002588 <HAL_Delay>
			HAL_TIM_Base_Start_IT(&htim10);
 800179c:	4817      	ldr	r0, [pc, #92]	@ (80017fc <geniusGame+0x1f8>)
 800179e:	f003 fc3d 	bl	800501c <HAL_TIM_Base_Start_IT>
			HAL_Delay(250);
 80017a2:	20fa      	movs	r0, #250	@ 0xfa
 80017a4:	f000 fef0 	bl	8002588 <HAL_Delay>
			HAL_TIM_Base_Stop_IT(&htim10);
 80017a8:	4814      	ldr	r0, [pc, #80]	@ (80017fc <geniusGame+0x1f8>)
 80017aa:	f003 fca7 	bl	80050fc <HAL_TIM_Base_Stop_IT>
			HAL_Delay(50);
 80017ae:	2032      	movs	r0, #50	@ 0x32
 80017b0:	f000 feea 	bl	8002588 <HAL_Delay>
			HAL_TIM_Base_Start_IT(&htim7);
 80017b4:	4812      	ldr	r0, [pc, #72]	@ (8001800 <geniusGame+0x1fc>)
 80017b6:	f003 fc31 	bl	800501c <HAL_TIM_Base_Start_IT>
			HAL_Delay(250);
 80017ba:	20fa      	movs	r0, #250	@ 0xfa
 80017bc:	f000 fee4 	bl	8002588 <HAL_Delay>
			HAL_TIM_Base_Stop_IT(&htim7);
 80017c0:	480f      	ldr	r0, [pc, #60]	@ (8001800 <geniusGame+0x1fc>)
 80017c2:	f003 fc9b 	bl	80050fc <HAL_TIM_Base_Stop_IT>
	while (!defeat)
 80017c6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f43f af25 	beq.w	800161a <geniusGame+0x16>
		}
	}

	return defeat;
 80017d0:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	f507 772a 	add.w	r7, r7, #680	@ 0x2a8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	08007180 	.word	0x08007180
 80017e4:	20000000 	.word	0x20000000
 80017e8:	200000a4 	.word	0x200000a4
 80017ec:	08007184 	.word	0x08007184
 80017f0:	20000008 	.word	0x20000008
 80017f4:	080071a0 	.word	0x080071a0
 80017f8:	2000023c 	.word	0x2000023c
 80017fc:	200001f4 	.word	0x200001f4
 8001800:	200001ac 	.word	0x200001ac

08001804 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	@ 0x28
 8001808:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
 8001818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	4b41      	ldr	r3, [pc, #260]	@ (8001924 <MX_GPIO_Init+0x120>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a40      	ldr	r2, [pc, #256]	@ (8001924 <MX_GPIO_Init+0x120>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b3e      	ldr	r3, [pc, #248]	@ (8001924 <MX_GPIO_Init+0x120>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b3a      	ldr	r3, [pc, #232]	@ (8001924 <MX_GPIO_Init+0x120>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a39      	ldr	r2, [pc, #228]	@ (8001924 <MX_GPIO_Init+0x120>)
 8001840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b37      	ldr	r3, [pc, #220]	@ (8001924 <MX_GPIO_Init+0x120>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	4b33      	ldr	r3, [pc, #204]	@ (8001924 <MX_GPIO_Init+0x120>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a32      	ldr	r2, [pc, #200]	@ (8001924 <MX_GPIO_Init+0x120>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b30      	ldr	r3, [pc, #192]	@ (8001924 <MX_GPIO_Init+0x120>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	4b2c      	ldr	r3, [pc, #176]	@ (8001924 <MX_GPIO_Init+0x120>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a2b      	ldr	r2, [pc, #172]	@ (8001924 <MX_GPIO_Init+0x120>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b29      	ldr	r3, [pc, #164]	@ (8001924 <MX_GPIO_Init+0x120>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ledError_Pin|ledProceed_Pin|RESET_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	2183      	movs	r1, #131	@ 0x83
 800188e:	4826      	ldr	r0, [pc, #152]	@ (8001928 <MX_GPIO_Init+0x124>)
 8001890:	f001 f95c 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, buzzer_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2141      	movs	r1, #65	@ 0x41
 8001898:	4824      	ldr	r0, [pc, #144]	@ (800192c <MX_GPIO_Init+0x128>)
 800189a:	f001 f957 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018a4:	4822      	ldr	r0, [pc, #136]	@ (8001930 <MX_GPIO_Init+0x12c>)
 80018a6:	f001 f951 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 80018aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	481a      	ldr	r0, [pc, #104]	@ (8001928 <MX_GPIO_Init+0x124>)
 80018c0:	f000 ff98 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ledError_Pin ledProceed_Pin RESET_Pin */
  GPIO_InitStruct.Pin = ledError_Pin|ledProceed_Pin|RESET_Pin;
 80018c4:	2383      	movs	r3, #131	@ 0x83
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	4813      	ldr	r0, [pc, #76]	@ (8001928 <MX_GPIO_Init+0x124>)
 80018dc:	f000 ff8a 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzer_Pin PB6 */
  GPIO_InitStruct.Pin = buzzer_Pin|GPIO_PIN_6;
 80018e0:	2341      	movs	r3, #65	@ 0x41
 80018e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	480d      	ldr	r0, [pc, #52]	@ (800192c <MX_GPIO_Init+0x128>)
 80018f8:	f000 ff7c 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	4806      	ldr	r0, [pc, #24]	@ (8001930 <MX_GPIO_Init+0x12c>)
 8001916:	f000 ff6d 	bl	80027f4 <HAL_GPIO_Init>

}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	@ 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40020800 	.word	0x40020800
 800192c:	40020400 	.word	0x40020400
 8001930:	40020000 	.word	0x40020000

08001934 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <MX_I2C1_Init+0x50>)
 800193a:	4a13      	ldr	r2, [pc, #76]	@ (8001988 <MX_I2C1_Init+0x54>)
 800193c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001940:	4a12      	ldr	r2, [pc, #72]	@ (800198c <MX_I2C1_Init+0x58>)
 8001942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001944:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <MX_I2C1_Init+0x50>)
 800194c:	2200      	movs	r2, #0
 800194e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001952:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001956:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001958:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001964:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <MX_I2C1_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001972:	f001 f91f 	bl	8002bb4 <HAL_I2C_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800197c:	f000 f9b0 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200000a8 	.word	0x200000a8
 8001988:	40005400 	.word	0x40005400
 800198c:	000186a0 	.word	0x000186a0

08001990 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	@ 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a19      	ldr	r2, [pc, #100]	@ (8001a14 <HAL_I2C_MspInit+0x84>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d12c      	bne.n	8001a0c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <HAL_I2C_MspInit+0x88>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a17      	ldr	r2, [pc, #92]	@ (8001a18 <HAL_I2C_MspInit+0x88>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <HAL_I2C_MspInit+0x88>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d4:	2312      	movs	r3, #18
 80019d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019e0:	2304      	movs	r3, #4
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	480c      	ldr	r0, [pc, #48]	@ (8001a1c <HAL_I2C_MspInit+0x8c>)
 80019ec:	f000 ff02 	bl	80027f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <HAL_I2C_MspInit+0x88>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f8:	4a07      	ldr	r2, [pc, #28]	@ (8001a18 <HAL_I2C_MspInit+0x88>)
 80019fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_I2C_MspInit+0x88>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	3728      	adds	r7, #40	@ 0x28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40005400 	.word	0x40005400
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020400 	.word	0x40020400

08001a20 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a28:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001a2c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001a38:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001a3c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001a40:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00b      	beq.n	8001a60 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001a48:	e000      	b.n	8001a4c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001a4a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001a4c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f9      	beq.n	8001a4a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001a56:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001a60:	687b      	ldr	r3, [r7, #4]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a74:	f000 fd16 	bl	80024a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a78:	f000 f86e 	bl	8001b58 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a7c:	f7ff fec2 	bl	8001804 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001a80:	f000 f936 	bl	8001cf0 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8001a84:	f000 fc72 	bl	800236c <MX_USART2_UART_Init>
	MX_TIM10_Init();
 8001a88:	f000 fb64 	bl	8002154 <MX_TIM10_Init>
	MX_I2C1_Init();
 8001a8c:	f7ff ff52 	bl	8001934 <MX_I2C1_Init>
	MX_TIM11_Init();
 8001a90:	f000 fb84 	bl	800219c <MX_TIM11_Init>
	MX_TIM6_Init();
 8001a94:	f000 faf2 	bl	800207c <MX_TIM6_Init>
	MX_TIM7_Init();
 8001a98:	f000 fb26 	bl	80020e8 <MX_TIM7_Init>
	MX_TIM13_Init();
 8001a9c:	f000 fba2 	bl	80021e4 <MX_TIM13_Init>
	/* USER CODE BEGIN 2 */

	//Initializing peripheral
	MPU9250_Init();
 8001aa0:	f7ff f88e 	bl	8000bc0 <MPU9250_Init>
	ST7735_Init(0);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7ff fa35 	bl	8000f14 <ST7735_Init>
	geniusInit();
 8001aaa:	f7ff fc73 	bl	8001394 <geniusInit>
	geniusDifficulty(diff);
 8001aae:	4b23      	ldr	r3, [pc, #140]	@ (8001b3c <main+0xcc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fcc4 	bl	8001440 <geniusDifficulty>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		checkVictory = 1;
 8001ab8:	4b21      	ldr	r3, [pc, #132]	@ (8001b40 <main+0xd0>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
		resetGame = HAL_GPIO_ReadPin(userButton_GPIO_Port, userButton_Pin);
 8001abe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ac2:	4820      	ldr	r0, [pc, #128]	@ (8001b44 <main+0xd4>)
 8001ac4:	f001 f82a 	bl	8002b1c <HAL_GPIO_ReadPin>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b48 <main+0xd8>)
 8001ace:	601a      	str	r2, [r3, #0]
		if (resetGame == GPIO_PIN_RESET)
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <main+0xd8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10c      	bne.n	8001af2 <main+0x82>
		{
			checkVictory = 0;
 8001ad8:	4b19      	ldr	r3, [pc, #100]	@ (8001b40 <main+0xd0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
			geniusInit();
 8001ade:	f7ff fc59 	bl	8001394 <geniusInit>
			geniusDifficulty(diff);
 8001ae2:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <main+0xcc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fcaa 	bl	8001440 <geniusDifficulty>
			HAL_Delay(200);
 8001aec:	20c8      	movs	r0, #200	@ 0xc8
 8001aee:	f000 fd4b 	bl	8002588 <HAL_Delay>
		}

		if (checkVictory == 0)
 8001af2:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <main+0xd0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1de      	bne.n	8001ab8 <main+0x48>
		{
			x = MPU9250_Gyro_ReadX();
 8001afa:	f7ff f8db 	bl	8000cb4 <MPU9250_Gyro_ReadX>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b21a      	sxth	r2, r3
 8001b02:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <main+0xdc>)
 8001b04:	801a      	strh	r2, [r3, #0]
			y = MPU9250_Gyro_ReadY();
 8001b06:	f7ff f8f3 	bl	8000cf0 <MPU9250_Gyro_ReadY>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <main+0xe0>)
 8001b10:	801a      	strh	r2, [r3, #0]
			printf("X: %d Y: %d\n", x, y);
 8001b12:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <main+0xdc>)
 8001b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <main+0xe0>)
 8001b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b20:	461a      	mov	r2, r3
 8001b22:	480c      	ldr	r0, [pc, #48]	@ (8001b54 <main+0xe4>)
 8001b24:	f004 f960 	bl	8005de8 <iprintf>
			checkVictory = geniusGame();
 8001b28:	f7ff fd6c 	bl	8001604 <geniusGame>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <main+0xd0>)
 8001b30:	6013      	str	r3, [r2, #0]
			HAL_Delay(100);
 8001b32:	2064      	movs	r0, #100	@ 0x64
 8001b34:	f000 fd28 	bl	8002588 <HAL_Delay>
		checkVictory = 1;
 8001b38:	e7be      	b.n	8001ab8 <main+0x48>
 8001b3a:	bf00      	nop
 8001b3c:	20000010 	.word	0x20000010
 8001b40:	20000100 	.word	0x20000100
 8001b44:	40020800 	.word	0x40020800
 8001b48:	20000104 	.word	0x20000104
 8001b4c:	200000fc 	.word	0x200000fc
 8001b50:	200000fe 	.word	0x200000fe
 8001b54:	080071a8 	.word	0x080071a8

08001b58 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b094      	sub	sp, #80	@ 0x50
 8001b5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	2234      	movs	r2, #52	@ 0x34
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f004 faba 	bl	80060e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <SystemClock_Config+0xd4>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b84:	4a29      	ldr	r2, [pc, #164]	@ (8001c2c <SystemClock_Config+0xd4>)
 8001b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8c:	4b27      	ldr	r3, [pc, #156]	@ (8001c2c <SystemClock_Config+0xd4>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b98:	2300      	movs	r3, #0
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	4b24      	ldr	r3, [pc, #144]	@ (8001c30 <SystemClock_Config+0xd8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ba4:	4a22      	ldr	r2, [pc, #136]	@ (8001c30 <SystemClock_Config+0xd8>)
 8001ba6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b20      	ldr	r3, [pc, #128]	@ (8001c30 <SystemClock_Config+0xd8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bc0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bc6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bca:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001bcc:	2304      	movs	r3, #4
 8001bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 84;
 8001bd0:	2354      	movs	r3, #84	@ 0x54
 8001bd2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4618      	mov	r0, r3
 8001be6:	f002 fc81 	bl	80044ec <HAL_RCC_OscConfig>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8001bf0:	f000 f876 	bl	8001ce0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf4:	230f      	movs	r3, #15
 8001bf6:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c04:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c0a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c0c:	f107 0308 	add.w	r3, r7, #8
 8001c10:	2102      	movs	r1, #2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f002 f920 	bl	8003e58 <HAL_RCC_ClockConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001c1e:	f000 f85f 	bl	8001ce0 <Error_Handler>
	}
}
 8001c22:	bf00      	nop
 8001c24:	3750      	adds	r7, #80	@ 0x50
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40007000 	.word	0x40007000

08001c34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a14      	ldr	r2, [pc, #80]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d104      	bne.n	8001c50 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin(buzzer_GPIO_Port, buzzer_Pin);
 8001c46:	2101      	movs	r1, #1
 8001c48:	4813      	ldr	r0, [pc, #76]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c4a:	f000 ff98 	bl	8002b7e <HAL_GPIO_TogglePin>
	}
	else if(htim->Instance == TIM6)
	{
		HAL_GPIO_TogglePin(buzzer_GPIO_Port, buzzer_Pin);
	}
}
 8001c4e:	e01c      	b.n	8001c8a <HAL_TIM_PeriodElapsedCallback+0x56>
	else if(htim->Instance == TIM10)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a11      	ldr	r2, [pc, #68]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d104      	bne.n	8001c64 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_GPIO_TogglePin(buzzer_GPIO_Port, buzzer_Pin);
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	480e      	ldr	r0, [pc, #56]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c5e:	f000 ff8e 	bl	8002b7e <HAL_GPIO_TogglePin>
}
 8001c62:	e012      	b.n	8001c8a <HAL_TIM_PeriodElapsedCallback+0x56>
	else if(htim->Instance == TIM7)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d104      	bne.n	8001c78 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_GPIO_TogglePin(buzzer_GPIO_Port, buzzer_Pin);
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4809      	ldr	r0, [pc, #36]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c72:	f000 ff84 	bl	8002b7e <HAL_GPIO_TogglePin>
}
 8001c76:	e008      	b.n	8001c8a <HAL_TIM_PeriodElapsedCallback+0x56>
	else if(htim->Instance == TIM6)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a09      	ldr	r2, [pc, #36]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d103      	bne.n	8001c8a <HAL_TIM_PeriodElapsedCallback+0x56>
		HAL_GPIO_TogglePin(buzzer_GPIO_Port, buzzer_Pin);
 8001c82:	2101      	movs	r1, #1
 8001c84:	4804      	ldr	r0, [pc, #16]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c86:	f000 ff7a 	bl	8002b7e <HAL_GPIO_TogglePin>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40014800 	.word	0x40014800
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40014400 	.word	0x40014400
 8001ca0:	40001400 	.word	0x40001400
 8001ca4:	40001000 	.word	0x40001000

08001ca8 <_write>:

int _write(int file, char *ptr, int len)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	e009      	b.n	8001cce <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	60ba      	str	r2, [r7, #8]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff feac 	bl	8001a20 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	dbf1      	blt.n	8001cba <_write+0x12>
	}
	return len;
 8001cd6:	687b      	ldr	r3, [r7, #4]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cf4:	4b18      	ldr	r3, [pc, #96]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001cf6:	4a19      	ldr	r2, [pc, #100]	@ (8001d5c <MX_SPI1_Init+0x6c>)
 8001cf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cfa:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001cfc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d04:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d08:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d0a:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d10:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d26:	2218      	movs	r2, #24
 8001d28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d30:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d36:	4b08      	ldr	r3, [pc, #32]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d3e:	220a      	movs	r2, #10
 8001d40:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d42:	4805      	ldr	r0, [pc, #20]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d44:	f002 fe70 	bl	8004a28 <HAL_SPI_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001d4e:	f7ff ffc7 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000108 	.word	0x20000108
 8001d5c:	40013000 	.word	0x40013000

08001d60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	@ 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a19      	ldr	r2, [pc, #100]	@ (8001de4 <HAL_SPI_MspInit+0x84>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d12b      	bne.n	8001dda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <HAL_SPI_MspInit+0x88>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	4a17      	ldr	r2, [pc, #92]	@ (8001de8 <HAL_SPI_MspInit+0x88>)
 8001d8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d92:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <HAL_SPI_MspInit+0x88>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <HAL_SPI_MspInit+0x88>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	4a10      	ldr	r2, [pc, #64]	@ (8001de8 <HAL_SPI_MspInit+0x88>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <HAL_SPI_MspInit+0x88>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001dba:	23a0      	movs	r3, #160	@ 0xa0
 8001dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dca:	2305      	movs	r3, #5
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4805      	ldr	r0, [pc, #20]	@ (8001dec <HAL_SPI_MspInit+0x8c>)
 8001dd6:	f000 fd0d 	bl	80027f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001dda:	bf00      	nop
 8001ddc:	3728      	adds	r7, #40	@ 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40013000 	.word	0x40013000
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020000 	.word	0x40020000

08001df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <HAL_MspInit+0x4c>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8001e3c <HAL_MspInit+0x4c>)
 8001e00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e06:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <HAL_MspInit+0x4c>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <HAL_MspInit+0x4c>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	4a08      	ldr	r2, [pc, #32]	@ (8001e3c <HAL_MspInit+0x4c>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_MspInit+0x4c>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800

08001e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <NMI_Handler+0x4>

08001e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <HardFault_Handler+0x4>

08001e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <MemManage_Handler+0x4>

08001e58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <BusFault_Handler+0x4>

08001e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <UsageFault_Handler+0x4>

08001e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e96:	f000 fb57 	bl	8002548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001ea4:	4802      	ldr	r0, [pc, #8]	@ (8001eb0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ea6:	f003 f958 	bl	800515a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200001f4 	.word	0x200001f4

08001eb4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001eb8:	4802      	ldr	r0, [pc, #8]	@ (8001ec4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001eba:	f003 f94e 	bl	800515a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2000023c 	.word	0x2000023c

08001ec8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001ecc:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001ece:	f003 f944 	bl	800515a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000284 	.word	0x20000284

08001edc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ee0:	4802      	ldr	r0, [pc, #8]	@ (8001eec <TIM6_DAC_IRQHandler+0x10>)
 8001ee2:	f003 f93a 	bl	800515a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000164 	.word	0x20000164

08001ef0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ef4:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <TIM7_IRQHandler+0x10>)
 8001ef6:	f003 f930 	bl	800515a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200001ac 	.word	0x200001ac

08001f04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return 1;
 8001f08:	2301      	movs	r3, #1
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_kill>:

int _kill(int pid, int sig)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f1e:	f004 f92d 	bl	800617c <__errno>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2216      	movs	r2, #22
 8001f26:	601a      	str	r2, [r3, #0]
  return -1;
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_exit>:

void _exit (int status)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ffe7 	bl	8001f14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f46:	bf00      	nop
 8001f48:	e7fd      	b.n	8001f46 <_exit+0x12>

08001f4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e00a      	b.n	8001f72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f5c:	f3af 8000 	nop.w
 8001f60:	4601      	mov	r1, r0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	60ba      	str	r2, [r7, #8]
 8001f68:	b2ca      	uxtb	r2, r1
 8001f6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	dbf0      	blt.n	8001f5c <_read+0x12>
  }

  return len;
 8001f7a:	687b      	ldr	r3, [r7, #4]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fac:	605a      	str	r2, [r3, #4]
  return 0;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_isatty>:

int _isatty(int file)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fc4:	2301      	movs	r3, #1
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b085      	sub	sp, #20
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff4:	4a14      	ldr	r2, [pc, #80]	@ (8002048 <_sbrk+0x5c>)
 8001ff6:	4b15      	ldr	r3, [pc, #84]	@ (800204c <_sbrk+0x60>)
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002000:	4b13      	ldr	r3, [pc, #76]	@ (8002050 <_sbrk+0x64>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002008:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <_sbrk+0x64>)
 800200a:	4a12      	ldr	r2, [pc, #72]	@ (8002054 <_sbrk+0x68>)
 800200c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800200e:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	429a      	cmp	r2, r3
 800201a:	d207      	bcs.n	800202c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800201c:	f004 f8ae 	bl	800617c <__errno>
 8002020:	4603      	mov	r3, r0
 8002022:	220c      	movs	r2, #12
 8002024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	e009      	b.n	8002040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800202c:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002032:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	4a05      	ldr	r2, [pc, #20]	@ (8002050 <_sbrk+0x64>)
 800203c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20020000 	.word	0x20020000
 800204c:	00000400 	.word	0x00000400
 8002050:	20000160 	.word	0x20000160
 8002054:	20000468 	.word	0x20000468

08002058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <SystemInit+0x20>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002062:	4a05      	ldr	r2, [pc, #20]	@ (8002078 <SystemInit+0x20>)
 8002064:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002068:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <MX_TIM6_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim13;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002082:	463b      	mov	r3, r7
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800208a:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <MX_TIM6_Init+0x64>)
 800208c:	4a15      	ldr	r2, [pc, #84]	@ (80020e4 <MX_TIM6_Init+0x68>)
 800208e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 150;
 8002090:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <MX_TIM6_Init+0x64>)
 8002092:	2296      	movs	r2, #150	@ 0x96
 8002094:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002096:	4b12      	ldr	r3, [pc, #72]	@ (80020e0 <MX_TIM6_Init+0x64>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800209c:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <MX_TIM6_Init+0x64>)
 800209e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a4:	4b0e      	ldr	r3, [pc, #56]	@ (80020e0 <MX_TIM6_Init+0x64>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020aa:	480d      	ldr	r0, [pc, #52]	@ (80020e0 <MX_TIM6_Init+0x64>)
 80020ac:	f002 ff66 	bl	8004f7c <HAL_TIM_Base_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80020b6:	f7ff fe13 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020c2:	463b      	mov	r3, r7
 80020c4:	4619      	mov	r1, r3
 80020c6:	4806      	ldr	r0, [pc, #24]	@ (80020e0 <MX_TIM6_Init+0x64>)
 80020c8:	f003 fa0c 	bl	80054e4 <HAL_TIMEx_MasterConfigSynchronization>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80020d2:	f7ff fe05 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000164 	.word	0x20000164
 80020e4:	40001000 	.word	0x40001000

080020e8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ee:	463b      	mov	r3, r7
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80020f6:	4b15      	ldr	r3, [pc, #84]	@ (800214c <MX_TIM7_Init+0x64>)
 80020f8:	4a15      	ldr	r2, [pc, #84]	@ (8002150 <MX_TIM7_Init+0x68>)
 80020fa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 140;
 80020fc:	4b13      	ldr	r3, [pc, #76]	@ (800214c <MX_TIM7_Init+0x64>)
 80020fe:	228c      	movs	r2, #140	@ 0x8c
 8002100:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002102:	4b12      	ldr	r3, [pc, #72]	@ (800214c <MX_TIM7_Init+0x64>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8002108:	4b10      	ldr	r3, [pc, #64]	@ (800214c <MX_TIM7_Init+0x64>)
 800210a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800210e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002110:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <MX_TIM7_Init+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002116:	480d      	ldr	r0, [pc, #52]	@ (800214c <MX_TIM7_Init+0x64>)
 8002118:	f002 ff30 	bl	8004f7c <HAL_TIM_Base_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002122:	f7ff fddd 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800212e:	463b      	mov	r3, r7
 8002130:	4619      	mov	r1, r3
 8002132:	4806      	ldr	r0, [pc, #24]	@ (800214c <MX_TIM7_Init+0x64>)
 8002134:	f003 f9d6 	bl	80054e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800213e:	f7ff fdcf 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200001ac 	.word	0x200001ac
 8002150:	40001400 	.word	0x40001400

08002154 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002158:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <MX_TIM10_Init+0x40>)
 800215a:	4a0f      	ldr	r2, [pc, #60]	@ (8002198 <MX_TIM10_Init+0x44>)
 800215c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 135;
 800215e:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <MX_TIM10_Init+0x40>)
 8002160:	2287      	movs	r2, #135	@ 0x87
 8002162:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002164:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <MX_TIM10_Init+0x40>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 800216a:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <MX_TIM10_Init+0x40>)
 800216c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002170:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002172:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <MX_TIM10_Init+0x40>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <MX_TIM10_Init+0x40>)
 800217a:	2200      	movs	r2, #0
 800217c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800217e:	4805      	ldr	r0, [pc, #20]	@ (8002194 <MX_TIM10_Init+0x40>)
 8002180:	f002 fefc 	bl	8004f7c <HAL_TIM_Base_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800218a:	f7ff fda9 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200001f4 	.word	0x200001f4
 8002198:	40014400 	.word	0x40014400

0800219c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80021a0:	4b0e      	ldr	r3, [pc, #56]	@ (80021dc <MX_TIM11_Init+0x40>)
 80021a2:	4a0f      	ldr	r2, [pc, #60]	@ (80021e0 <MX_TIM11_Init+0x44>)
 80021a4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 113;
 80021a6:	4b0d      	ldr	r3, [pc, #52]	@ (80021dc <MX_TIM11_Init+0x40>)
 80021a8:	2271      	movs	r2, #113	@ 0x71
 80021aa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ac:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <MX_TIM11_Init+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 80021b2:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <MX_TIM11_Init+0x40>)
 80021b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021b8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ba:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <MX_TIM11_Init+0x40>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <MX_TIM11_Init+0x40>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80021c6:	4805      	ldr	r0, [pc, #20]	@ (80021dc <MX_TIM11_Init+0x40>)
 80021c8:	f002 fed8 	bl	8004f7c <HAL_TIM_Base_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80021d2:	f7ff fd85 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	2000023c 	.word	0x2000023c
 80021e0:	40014800 	.word	0x40014800

080021e4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <MX_TIM13_Init+0x40>)
 80021ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002228 <MX_TIM13_Init+0x44>)
 80021ec:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 4199;
 80021ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002224 <MX_TIM13_Init+0x40>)
 80021f0:	f241 0267 	movw	r2, #4199	@ 0x1067
 80021f4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002224 <MX_TIM13_Init+0x40>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80021fc:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <MX_TIM13_Init+0x40>)
 80021fe:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002202:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002204:	4b07      	ldr	r3, [pc, #28]	@ (8002224 <MX_TIM13_Init+0x40>)
 8002206:	2200      	movs	r2, #0
 8002208:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220a:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <MX_TIM13_Init+0x40>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002210:	4804      	ldr	r0, [pc, #16]	@ (8002224 <MX_TIM13_Init+0x40>)
 8002212:	f002 feb3 	bl	8004f7c <HAL_TIM_Base_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 800221c:	f7ff fd60 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000284 	.word	0x20000284
 8002228:	40001c00 	.word	0x40001c00

0800222c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a46      	ldr	r2, [pc, #280]	@ (8002354 <HAL_TIM_Base_MspInit+0x128>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d116      	bne.n	800226c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	4b45      	ldr	r3, [pc, #276]	@ (8002358 <HAL_TIM_Base_MspInit+0x12c>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	4a44      	ldr	r2, [pc, #272]	@ (8002358 <HAL_TIM_Base_MspInit+0x12c>)
 8002248:	f043 0310 	orr.w	r3, r3, #16
 800224c:	6413      	str	r3, [r2, #64]	@ 0x40
 800224e:	4b42      	ldr	r3, [pc, #264]	@ (8002358 <HAL_TIM_Base_MspInit+0x12c>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	61fb      	str	r3, [r7, #28]
 8002258:	69fb      	ldr	r3, [r7, #28]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	2036      	movs	r0, #54	@ 0x36
 8002260:	f000 fa91 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002264:	2036      	movs	r0, #54	@ 0x36
 8002266:	f000 faaa 	bl	80027be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800226a:	e06e      	b.n	800234a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM7)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a3a      	ldr	r2, [pc, #232]	@ (800235c <HAL_TIM_Base_MspInit+0x130>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d116      	bne.n	80022a4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	4b37      	ldr	r3, [pc, #220]	@ (8002358 <HAL_TIM_Base_MspInit+0x12c>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	4a36      	ldr	r2, [pc, #216]	@ (8002358 <HAL_TIM_Base_MspInit+0x12c>)
 8002280:	f043 0320 	orr.w	r3, r3, #32
 8002284:	6413      	str	r3, [r2, #64]	@ 0x40
 8002286:	4b34      	ldr	r3, [pc, #208]	@ (8002358 <HAL_TIM_Base_MspInit+0x12c>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	2037      	movs	r0, #55	@ 0x37
 8002298:	f000 fa75 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800229c:	2037      	movs	r0, #55	@ 0x37
 800229e:	f000 fa8e 	bl	80027be <HAL_NVIC_EnableIRQ>
}
 80022a2:	e052      	b.n	800234a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM10)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002360 <HAL_TIM_Base_MspInit+0x134>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d116      	bne.n	80022dc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	4b29      	ldr	r3, [pc, #164]	@ (8002358 <HAL_TIM_Base_MspInit+0x12c>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	4a28      	ldr	r2, [pc, #160]	@ (8002358 <HAL_TIM_Base_MspInit+0x12c>)
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022be:	4b26      	ldr	r3, [pc, #152]	@ (8002358 <HAL_TIM_Base_MspInit+0x12c>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	2019      	movs	r0, #25
 80022d0:	f000 fa59 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022d4:	2019      	movs	r0, #25
 80022d6:	f000 fa72 	bl	80027be <HAL_NVIC_EnableIRQ>
}
 80022da:	e036      	b.n	800234a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM11)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a20      	ldr	r2, [pc, #128]	@ (8002364 <HAL_TIM_Base_MspInit+0x138>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d116      	bne.n	8002314 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002358 <HAL_TIM_Base_MspInit+0x12c>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002358 <HAL_TIM_Base_MspInit+0x12c>)
 80022f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f6:	4b18      	ldr	r3, [pc, #96]	@ (8002358 <HAL_TIM_Base_MspInit+0x12c>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2100      	movs	r1, #0
 8002306:	201a      	movs	r0, #26
 8002308:	f000 fa3d 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800230c:	201a      	movs	r0, #26
 800230e:	f000 fa56 	bl	80027be <HAL_NVIC_EnableIRQ>
}
 8002312:	e01a      	b.n	800234a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM13)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a13      	ldr	r2, [pc, #76]	@ (8002368 <HAL_TIM_Base_MspInit+0x13c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d115      	bne.n	800234a <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b0d      	ldr	r3, [pc, #52]	@ (8002358 <HAL_TIM_Base_MspInit+0x12c>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	4a0c      	ldr	r2, [pc, #48]	@ (8002358 <HAL_TIM_Base_MspInit+0x12c>)
 8002328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800232c:	6413      	str	r3, [r2, #64]	@ 0x40
 800232e:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <HAL_TIM_Base_MspInit+0x12c>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	202c      	movs	r0, #44	@ 0x2c
 8002340:	f000 fa21 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002344:	202c      	movs	r0, #44	@ 0x2c
 8002346:	f000 fa3a 	bl	80027be <HAL_NVIC_EnableIRQ>
}
 800234a:	bf00      	nop
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40001000 	.word	0x40001000
 8002358:	40023800 	.word	0x40023800
 800235c:	40001400 	.word	0x40001400
 8002360:	40014400 	.word	0x40014400
 8002364:	40014800 	.word	0x40014800
 8002368:	40001c00 	.word	0x40001c00

0800236c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002370:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002372:	4a12      	ldr	r2, [pc, #72]	@ (80023bc <MX_USART2_UART_Init+0x50>)
 8002374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002376:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002378:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800237c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800237e:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002384:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002386:	2200      	movs	r2, #0
 8002388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800238a:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <MX_USART2_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002390:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002392:	220c      	movs	r2, #12
 8002394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002396:	4b08      	ldr	r3, [pc, #32]	@ (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800239c:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <MX_USART2_UART_Init+0x4c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023a2:	4805      	ldr	r0, [pc, #20]	@ (80023b8 <MX_USART2_UART_Init+0x4c>)
 80023a4:	f003 f92e 	bl	8005604 <HAL_UART_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023ae:	f7ff fc97 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	200002cc 	.word	0x200002cc
 80023bc:	40004400 	.word	0x40004400

080023c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	@ 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a19      	ldr	r2, [pc, #100]	@ (8002444 <HAL_UART_MspInit+0x84>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d12b      	bne.n	800243a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	4b18      	ldr	r3, [pc, #96]	@ (8002448 <HAL_UART_MspInit+0x88>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	4a17      	ldr	r2, [pc, #92]	@ (8002448 <HAL_UART_MspInit+0x88>)
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023f2:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <HAL_UART_MspInit+0x88>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <HAL_UART_MspInit+0x88>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	4a10      	ldr	r2, [pc, #64]	@ (8002448 <HAL_UART_MspInit+0x88>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6313      	str	r3, [r2, #48]	@ 0x30
 800240e:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <HAL_UART_MspInit+0x88>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800241a:	230c      	movs	r3, #12
 800241c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800242a:	2307      	movs	r3, #7
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	4619      	mov	r1, r3
 8002434:	4805      	ldr	r0, [pc, #20]	@ (800244c <HAL_UART_MspInit+0x8c>)
 8002436:	f000 f9dd 	bl	80027f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800243a:	bf00      	nop
 800243c:	3728      	adds	r7, #40	@ 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40004400 	.word	0x40004400
 8002448:	40023800 	.word	0x40023800
 800244c:	40020000 	.word	0x40020000

08002450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002450:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002488 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002454:	f7ff fe00 	bl	8002058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002458:	480c      	ldr	r0, [pc, #48]	@ (800248c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800245a:	490d      	ldr	r1, [pc, #52]	@ (8002490 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800245c:	4a0d      	ldr	r2, [pc, #52]	@ (8002494 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002460:	e002      	b.n	8002468 <LoopCopyDataInit>

08002462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002466:	3304      	adds	r3, #4

08002468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800246c:	d3f9      	bcc.n	8002462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800246e:	4a0a      	ldr	r2, [pc, #40]	@ (8002498 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002470:	4c0a      	ldr	r4, [pc, #40]	@ (800249c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002474:	e001      	b.n	800247a <LoopFillZerobss>

08002476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002478:	3204      	adds	r2, #4

0800247a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800247c:	d3fb      	bcc.n	8002476 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800247e:	f003 fe83 	bl	8006188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002482:	f7ff faf5 	bl	8001a70 <main>
  bx  lr    
 8002486:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002488:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800248c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002490:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002494:	080093dc 	.word	0x080093dc
  ldr r2, =_sbss
 8002498:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800249c:	20000464 	.word	0x20000464

080024a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC_IRQHandler>
	...

080024a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024a8:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <HAL_Init+0x40>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0d      	ldr	r2, [pc, #52]	@ (80024e4 <HAL_Init+0x40>)
 80024ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024b4:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_Init+0x40>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0a      	ldr	r2, [pc, #40]	@ (80024e4 <HAL_Init+0x40>)
 80024ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c0:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <HAL_Init+0x40>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a07      	ldr	r2, [pc, #28]	@ (80024e4 <HAL_Init+0x40>)
 80024c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024cc:	2003      	movs	r0, #3
 80024ce:	f000 f94f 	bl	8002770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f000 f808 	bl	80024e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d8:	f7ff fc8a 	bl	8001df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023c00 	.word	0x40023c00

080024e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f0:	4b12      	ldr	r3, [pc, #72]	@ (800253c <HAL_InitTick+0x54>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <HAL_InitTick+0x58>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002502:	fbb2 f3f3 	udiv	r3, r2, r3
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f967 	bl	80027da <HAL_SYSTICK_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e00e      	b.n	8002534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b0f      	cmp	r3, #15
 800251a:	d80a      	bhi.n	8002532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800251c:	2200      	movs	r2, #0
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	f000 f92f 	bl	8002786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002528:	4a06      	ldr	r2, [pc, #24]	@ (8002544 <HAL_InitTick+0x5c>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	e000      	b.n	8002534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000014 	.word	0x20000014
 8002540:	2000001c 	.word	0x2000001c
 8002544:	20000018 	.word	0x20000018

08002548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800254c:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <HAL_IncTick+0x20>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	4b06      	ldr	r3, [pc, #24]	@ (800256c <HAL_IncTick+0x24>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4413      	add	r3, r2
 8002558:	4a04      	ldr	r2, [pc, #16]	@ (800256c <HAL_IncTick+0x24>)
 800255a:	6013      	str	r3, [r2, #0]
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	2000001c 	.word	0x2000001c
 800256c:	20000314 	.word	0x20000314

08002570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return uwTick;
 8002574:	4b03      	ldr	r3, [pc, #12]	@ (8002584 <HAL_GetTick+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000314 	.word	0x20000314

08002588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff ffee 	bl	8002570 <HAL_GetTick>
 8002594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d005      	beq.n	80025ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025a2:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <HAL_Delay+0x44>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ae:	bf00      	nop
 80025b0:	f7ff ffde 	bl	8002570 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d8f7      	bhi.n	80025b0 <HAL_Delay+0x28>
  {
  }
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	2000001c 	.word	0x2000001c

080025d0 <__NVIC_SetPriorityGrouping>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002602:	4a04      	ldr	r2, [pc, #16]	@ (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	60d3      	str	r3, [r2, #12]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_GetPriorityGrouping>:
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <__NVIC_GetPriorityGrouping+0x18>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 0307 	and.w	r3, r3, #7
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_EnableIRQ>:
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	db0b      	blt.n	800265e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4907      	ldr	r1, [pc, #28]	@ (800266c <__NVIC_EnableIRQ+0x38>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2001      	movs	r0, #1
 8002656:	fa00 f202 	lsl.w	r2, r0, r2
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	@ (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	@ (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	@ 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	@ 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <SysTick_Config>:
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800273c:	d301      	bcc.n	8002742 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800273e:	2301      	movs	r3, #1
 8002740:	e00f      	b.n	8002762 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002742:	4a0a      	ldr	r2, [pc, #40]	@ (800276c <SysTick_Config+0x40>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274a:	210f      	movs	r1, #15
 800274c:	f04f 30ff 	mov.w	r0, #4294967295
 8002750:	f7ff ff8e 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002754:	4b05      	ldr	r3, [pc, #20]	@ (800276c <SysTick_Config+0x40>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275a:	4b04      	ldr	r3, [pc, #16]	@ (800276c <SysTick_Config+0x40>)
 800275c:	2207      	movs	r2, #7
 800275e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	e000e010 	.word	0xe000e010

08002770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff29 	bl	80025d0 <__NVIC_SetPriorityGrouping>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002798:	f7ff ff3e 	bl	8002618 <__NVIC_GetPriorityGrouping>
 800279c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff ff8e 	bl	80026c4 <NVIC_EncodePriority>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff5d 	bl	8002670 <__NVIC_SetPriority>
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff31 	bl	8002634 <__NVIC_EnableIRQ>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ffa2 	bl	800272c <SysTick_Config>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	@ 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	e165      	b.n	8002adc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002810:	2201      	movs	r2, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	f040 8154 	bne.w	8002ad6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d005      	beq.n	8002846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002842:	2b02      	cmp	r3, #2
 8002844:	d130      	bne.n	80028a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 0201 	and.w	r2, r3, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d017      	beq.n	80028e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d123      	bne.n	8002938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	08da      	lsrs	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3208      	adds	r2, #8
 80028f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	08da      	lsrs	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3208      	adds	r2, #8
 8002932:	69b9      	ldr	r1, [r7, #24]
 8002934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0203 	and.w	r2, r3, #3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80ae 	beq.w	8002ad6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b5d      	ldr	r3, [pc, #372]	@ (8002af4 <HAL_GPIO_Init+0x300>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	4a5c      	ldr	r2, [pc, #368]	@ (8002af4 <HAL_GPIO_Init+0x300>)
 8002984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002988:	6453      	str	r3, [r2, #68]	@ 0x44
 800298a:	4b5a      	ldr	r3, [pc, #360]	@ (8002af4 <HAL_GPIO_Init+0x300>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002996:	4a58      	ldr	r2, [pc, #352]	@ (8002af8 <HAL_GPIO_Init+0x304>)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	3302      	adds	r3, #2
 800299e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	220f      	movs	r2, #15
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a4f      	ldr	r2, [pc, #316]	@ (8002afc <HAL_GPIO_Init+0x308>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d025      	beq.n	8002a0e <HAL_GPIO_Init+0x21a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a4e      	ldr	r2, [pc, #312]	@ (8002b00 <HAL_GPIO_Init+0x30c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d01f      	beq.n	8002a0a <HAL_GPIO_Init+0x216>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002b04 <HAL_GPIO_Init+0x310>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d019      	beq.n	8002a06 <HAL_GPIO_Init+0x212>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002b08 <HAL_GPIO_Init+0x314>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d013      	beq.n	8002a02 <HAL_GPIO_Init+0x20e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4b      	ldr	r2, [pc, #300]	@ (8002b0c <HAL_GPIO_Init+0x318>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00d      	beq.n	80029fe <HAL_GPIO_Init+0x20a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002b10 <HAL_GPIO_Init+0x31c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d007      	beq.n	80029fa <HAL_GPIO_Init+0x206>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a49      	ldr	r2, [pc, #292]	@ (8002b14 <HAL_GPIO_Init+0x320>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d101      	bne.n	80029f6 <HAL_GPIO_Init+0x202>
 80029f2:	2306      	movs	r3, #6
 80029f4:	e00c      	b.n	8002a10 <HAL_GPIO_Init+0x21c>
 80029f6:	2307      	movs	r3, #7
 80029f8:	e00a      	b.n	8002a10 <HAL_GPIO_Init+0x21c>
 80029fa:	2305      	movs	r3, #5
 80029fc:	e008      	b.n	8002a10 <HAL_GPIO_Init+0x21c>
 80029fe:	2304      	movs	r3, #4
 8002a00:	e006      	b.n	8002a10 <HAL_GPIO_Init+0x21c>
 8002a02:	2303      	movs	r3, #3
 8002a04:	e004      	b.n	8002a10 <HAL_GPIO_Init+0x21c>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e002      	b.n	8002a10 <HAL_GPIO_Init+0x21c>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_GPIO_Init+0x21c>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	f002 0203 	and.w	r2, r2, #3
 8002a16:	0092      	lsls	r2, r2, #2
 8002a18:	4093      	lsls	r3, r2
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a20:	4935      	ldr	r1, [pc, #212]	@ (8002af8 <HAL_GPIO_Init+0x304>)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	3302      	adds	r3, #2
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a52:	4a31      	ldr	r2, [pc, #196]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a58:	4b2f      	ldr	r3, [pc, #188]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a7c:	4a26      	ldr	r2, [pc, #152]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a82:	4b25      	ldr	r3, [pc, #148]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aac:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad0:	4a11      	ldr	r2, [pc, #68]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b0f      	cmp	r3, #15
 8002ae0:	f67f ae96 	bls.w	8002810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3724      	adds	r7, #36	@ 0x24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40013800 	.word	0x40013800
 8002afc:	40020000 	.word	0x40020000
 8002b00:	40020400 	.word	0x40020400
 8002b04:	40020800 	.word	0x40020800
 8002b08:	40020c00 	.word	0x40020c00
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40021400 	.word	0x40021400
 8002b14:	40021800 	.word	0x40021800
 8002b18:	40013c00 	.word	0x40013c00

08002b1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	887b      	ldrh	r3, [r7, #2]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	e001      	b.n	8002b3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b5c:	787b      	ldrb	r3, [r7, #1]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b68:	e003      	b.n	8002b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	041a      	lsls	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	619a      	str	r2, [r3, #24]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b085      	sub	sp, #20
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	460b      	mov	r3, r1
 8002b88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b90:	887a      	ldrh	r2, [r7, #2]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4013      	ands	r3, r2
 8002b96:	041a      	lsls	r2, r3, #16
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	43d9      	mvns	r1, r3
 8002b9c:	887b      	ldrh	r3, [r7, #2]
 8002b9e:	400b      	ands	r3, r1
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	619a      	str	r2, [r3, #24]
}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e12b      	b.n	8002e1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe fed8 	bl	8001990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	@ 0x24
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c18:	f001 fa10 	bl	800403c <HAL_RCC_GetPCLK1Freq>
 8002c1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4a81      	ldr	r2, [pc, #516]	@ (8002e28 <HAL_I2C_Init+0x274>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d807      	bhi.n	8002c38 <HAL_I2C_Init+0x84>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a80      	ldr	r2, [pc, #512]	@ (8002e2c <HAL_I2C_Init+0x278>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	bf94      	ite	ls
 8002c30:	2301      	movls	r3, #1
 8002c32:	2300      	movhi	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	e006      	b.n	8002c46 <HAL_I2C_Init+0x92>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4a7d      	ldr	r2, [pc, #500]	@ (8002e30 <HAL_I2C_Init+0x27c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	bf94      	ite	ls
 8002c40:	2301      	movls	r3, #1
 8002c42:	2300      	movhi	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0e7      	b.n	8002e1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a78      	ldr	r2, [pc, #480]	@ (8002e34 <HAL_I2C_Init+0x280>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	0c9b      	lsrs	r3, r3, #18
 8002c58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002e28 <HAL_I2C_Init+0x274>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d802      	bhi.n	8002c88 <HAL_I2C_Init+0xd4>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3301      	adds	r3, #1
 8002c86:	e009      	b.n	8002c9c <HAL_I2C_Init+0xe8>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	4a69      	ldr	r2, [pc, #420]	@ (8002e38 <HAL_I2C_Init+0x284>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	495c      	ldr	r1, [pc, #368]	@ (8002e28 <HAL_I2C_Init+0x274>)
 8002cb8:	428b      	cmp	r3, r1
 8002cba:	d819      	bhi.n	8002cf0 <HAL_I2C_Init+0x13c>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1e59      	subs	r1, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cca:	1c59      	adds	r1, r3, #1
 8002ccc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002cd0:	400b      	ands	r3, r1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_I2C_Init+0x138>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1e59      	subs	r1, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cea:	e051      	b.n	8002d90 <HAL_I2C_Init+0x1dc>
 8002cec:	2304      	movs	r3, #4
 8002cee:	e04f      	b.n	8002d90 <HAL_I2C_Init+0x1dc>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d111      	bne.n	8002d1c <HAL_I2C_Init+0x168>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1e58      	subs	r0, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	440b      	add	r3, r1
 8002d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e012      	b.n	8002d42 <HAL_I2C_Init+0x18e>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1e58      	subs	r0, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	0099      	lsls	r1, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d32:	3301      	adds	r3, #1
 8002d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Init+0x196>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e022      	b.n	8002d90 <HAL_I2C_Init+0x1dc>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10e      	bne.n	8002d70 <HAL_I2C_Init+0x1bc>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1e58      	subs	r0, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	440b      	add	r3, r1
 8002d60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d6e:	e00f      	b.n	8002d90 <HAL_I2C_Init+0x1dc>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1e58      	subs	r0, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	0099      	lsls	r1, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	6809      	ldr	r1, [r1, #0]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69da      	ldr	r2, [r3, #28]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002dbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6911      	ldr	r1, [r2, #16]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68d2      	ldr	r2, [r2, #12]
 8002dca:	4311      	orrs	r1, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	000186a0 	.word	0x000186a0
 8002e2c:	001e847f 	.word	0x001e847f
 8002e30:	003d08ff 	.word	0x003d08ff
 8002e34:	431bde83 	.word	0x431bde83
 8002e38:	10624dd3 	.word	0x10624dd3

08002e3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	4608      	mov	r0, r1
 8002e46:	4611      	mov	r1, r2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	817b      	strh	r3, [r7, #10]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	813b      	strh	r3, [r7, #8]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e56:	f7ff fb8b 	bl	8002570 <HAL_GetTick>
 8002e5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	f040 80d9 	bne.w	800301c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	2319      	movs	r3, #25
 8002e70:	2201      	movs	r2, #1
 8002e72:	496d      	ldr	r1, [pc, #436]	@ (8003028 <HAL_I2C_Mem_Write+0x1ec>)
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fdb9 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e80:	2302      	movs	r3, #2
 8002e82:	e0cc      	b.n	800301e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_I2C_Mem_Write+0x56>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e0c5      	b.n	800301e <HAL_I2C_Mem_Write+0x1e2>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d007      	beq.n	8002eb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ec6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2221      	movs	r2, #33	@ 0x21
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2240      	movs	r2, #64	@ 0x40
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a3a      	ldr	r2, [r7, #32]
 8002ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4a4d      	ldr	r2, [pc, #308]	@ (800302c <HAL_I2C_Mem_Write+0x1f0>)
 8002ef8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002efa:	88f8      	ldrh	r0, [r7, #6]
 8002efc:	893a      	ldrh	r2, [r7, #8]
 8002efe:	8979      	ldrh	r1, [r7, #10]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	4603      	mov	r3, r0
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fbf0 	bl	80036f0 <I2C_RequestMemoryWrite>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d052      	beq.n	8002fbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e081      	b.n	800301e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 fe7e 	bl	8003c20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00d      	beq.n	8002f46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d107      	bne.n	8002f42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e06b      	b.n	800301e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	781a      	ldrb	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d11b      	bne.n	8002fbc <HAL_I2C_Mem_Write+0x180>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d017      	beq.n	8002fbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	781a      	ldrb	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1aa      	bne.n	8002f1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fe71 	bl	8003cb0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00d      	beq.n	8002ff0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d107      	bne.n	8002fec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e016      	b.n	800301e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e000      	b.n	800301e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
  }
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	00100002 	.word	0x00100002
 800302c:	ffff0000 	.word	0xffff0000

08003030 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08c      	sub	sp, #48	@ 0x30
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	4608      	mov	r0, r1
 800303a:	4611      	mov	r1, r2
 800303c:	461a      	mov	r2, r3
 800303e:	4603      	mov	r3, r0
 8003040:	817b      	strh	r3, [r7, #10]
 8003042:	460b      	mov	r3, r1
 8003044:	813b      	strh	r3, [r7, #8]
 8003046:	4613      	mov	r3, r2
 8003048:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800304a:	f7ff fa91 	bl	8002570 <HAL_GetTick>
 800304e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b20      	cmp	r3, #32
 800305a:	f040 8214 	bne.w	8003486 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	2319      	movs	r3, #25
 8003064:	2201      	movs	r2, #1
 8003066:	497b      	ldr	r1, [pc, #492]	@ (8003254 <HAL_I2C_Mem_Read+0x224>)
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fcbf 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003074:	2302      	movs	r3, #2
 8003076:	e207      	b.n	8003488 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_I2C_Mem_Read+0x56>
 8003082:	2302      	movs	r3, #2
 8003084:	e200      	b.n	8003488 <HAL_I2C_Mem_Read+0x458>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d007      	beq.n	80030ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2222      	movs	r2, #34	@ 0x22
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2240      	movs	r2, #64	@ 0x40
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80030dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003258 <HAL_I2C_Mem_Read+0x228>)
 80030ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030ee:	88f8      	ldrh	r0, [r7, #6]
 80030f0:	893a      	ldrh	r2, [r7, #8]
 80030f2:	8979      	ldrh	r1, [r7, #10]
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	4603      	mov	r3, r0
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fb8c 	bl	800381c <I2C_RequestMemoryRead>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e1bc      	b.n	8003488 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003112:	2b00      	cmp	r3, #0
 8003114:	d113      	bne.n	800313e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003116:	2300      	movs	r3, #0
 8003118:	623b      	str	r3, [r7, #32]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	623b      	str	r3, [r7, #32]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	623b      	str	r3, [r7, #32]
 800312a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e190      	b.n	8003460 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003142:	2b01      	cmp	r3, #1
 8003144:	d11b      	bne.n	800317e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	e170      	b.n	8003460 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003182:	2b02      	cmp	r3, #2
 8003184:	d11b      	bne.n	80031be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003194:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a6:	2300      	movs	r3, #0
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	e150      	b.n	8003460 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031d4:	e144      	b.n	8003460 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031da:	2b03      	cmp	r3, #3
 80031dc:	f200 80f1 	bhi.w	80033c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d123      	bne.n	8003230 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 fda7 	bl	8003d40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e145      	b.n	8003488 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800322e:	e117      	b.n	8003460 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003234:	2b02      	cmp	r3, #2
 8003236:	d14e      	bne.n	80032d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800323e:	2200      	movs	r2, #0
 8003240:	4906      	ldr	r1, [pc, #24]	@ (800325c <HAL_I2C_Mem_Read+0x22c>)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fbd2 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e11a      	b.n	8003488 <HAL_I2C_Mem_Read+0x458>
 8003252:	bf00      	nop
 8003254:	00100002 	.word	0x00100002
 8003258:	ffff0000 	.word	0xffff0000
 800325c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800326e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032d4:	e0c4      	b.n	8003460 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032dc:	2200      	movs	r2, #0
 80032de:	496c      	ldr	r1, [pc, #432]	@ (8003490 <HAL_I2C_Mem_Read+0x460>)
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fb83 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0cb      	b.n	8003488 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003338:	2200      	movs	r2, #0
 800333a:	4955      	ldr	r1, [pc, #340]	@ (8003490 <HAL_I2C_Mem_Read+0x460>)
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fb55 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e09d      	b.n	8003488 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800335a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033c0:	e04e      	b.n	8003460 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fcba 	bl	8003d40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e058      	b.n	8003488 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b04      	cmp	r3, #4
 8003414:	d124      	bne.n	8003460 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341a:	2b03      	cmp	r3, #3
 800341c:	d107      	bne.n	800342e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800342c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003464:	2b00      	cmp	r3, #0
 8003466:	f47f aeb6 	bne.w	80031d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e000      	b.n	8003488 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003486:	2302      	movs	r3, #2
  }
}
 8003488:	4618      	mov	r0, r3
 800348a:	3728      	adds	r7, #40	@ 0x28
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	00010004 	.word	0x00010004

08003494 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	@ 0x28
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	460b      	mov	r3, r1
 80034a2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80034a4:	f7ff f864 	bl	8002570 <HAL_GetTick>
 80034a8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	f040 8111 	bne.w	80036de <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2319      	movs	r3, #25
 80034c2:	2201      	movs	r2, #1
 80034c4:	4988      	ldr	r1, [pc, #544]	@ (80036e8 <HAL_I2C_IsDeviceReady+0x254>)
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 fa90 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
 80034d4:	e104      	b.n	80036e0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_I2C_IsDeviceReady+0x50>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e0fd      	b.n	80036e0 <HAL_I2C_IsDeviceReady+0x24c>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d007      	beq.n	800350a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0201 	orr.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003518:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2224      	movs	r2, #36	@ 0x24
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4a70      	ldr	r2, [pc, #448]	@ (80036ec <HAL_I2C_IsDeviceReady+0x258>)
 800352c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800353c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2200      	movs	r2, #0
 8003546:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fa4e 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00d      	beq.n	8003572 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003564:	d103      	bne.n	800356e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800356c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e0b6      	b.n	80036e0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003580:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003582:	f7fe fff5 	bl	8002570 <HAL_GetTick>
 8003586:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b02      	cmp	r3, #2
 8003594:	bf0c      	ite	eq
 8003596:	2301      	moveq	r3, #1
 8003598:	2300      	movne	r3, #0
 800359a:	b2db      	uxtb	r3, r3
 800359c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ac:	bf0c      	ite	eq
 80035ae:	2301      	moveq	r3, #1
 80035b0:	2300      	movne	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035b6:	e025      	b.n	8003604 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035b8:	f7fe ffda 	bl	8002570 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d302      	bcc.n	80035ce <HAL_I2C_IsDeviceReady+0x13a>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d103      	bne.n	80035d6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	22a0      	movs	r2, #160	@ 0xa0
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2ba0      	cmp	r3, #160	@ 0xa0
 800360e:	d005      	beq.n	800361c <HAL_I2C_IsDeviceReady+0x188>
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d102      	bne.n	800361c <HAL_I2C_IsDeviceReady+0x188>
 8003616:	7dbb      	ldrb	r3, [r7, #22]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0cd      	beq.n	80035b8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b02      	cmp	r3, #2
 8003630:	d129      	bne.n	8003686 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003640:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2319      	movs	r3, #25
 800365e:	2201      	movs	r2, #1
 8003660:	4921      	ldr	r1, [pc, #132]	@ (80036e8 <HAL_I2C_IsDeviceReady+0x254>)
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f9c2 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e036      	b.n	80036e0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e02c      	b.n	80036e0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003694:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800369e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	2319      	movs	r3, #25
 80036a6:	2201      	movs	r2, #1
 80036a8:	490f      	ldr	r1, [pc, #60]	@ (80036e8 <HAL_I2C_IsDeviceReady+0x254>)
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f99e 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e012      	b.n	80036e0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	3301      	adds	r3, #1
 80036be:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	f4ff af32 	bcc.w	800352e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80036de:	2302      	movs	r3, #2
  }
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	00100002 	.word	0x00100002
 80036ec:	ffff0000 	.word	0xffff0000

080036f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	4608      	mov	r0, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	817b      	strh	r3, [r7, #10]
 8003702:	460b      	mov	r3, r1
 8003704:	813b      	strh	r3, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003718:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	2200      	movs	r2, #0
 8003722:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f960 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00d      	beq.n	800374e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003740:	d103      	bne.n	800374a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e05f      	b.n	800380e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800374e:	897b      	ldrh	r3, [r7, #10]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800375c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	6a3a      	ldr	r2, [r7, #32]
 8003762:	492d      	ldr	r1, [pc, #180]	@ (8003818 <I2C_RequestMemoryWrite+0x128>)
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f9bb 	bl	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e04c      	b.n	800380e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800378a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378c:	6a39      	ldr	r1, [r7, #32]
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fa46 	bl	8003c20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00d      	beq.n	80037b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d107      	bne.n	80037b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e02b      	b.n	800380e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d105      	bne.n	80037c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037bc:	893b      	ldrh	r3, [r7, #8]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	611a      	str	r2, [r3, #16]
 80037c6:	e021      	b.n	800380c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037c8:	893b      	ldrh	r3, [r7, #8]
 80037ca:	0a1b      	lsrs	r3, r3, #8
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d8:	6a39      	ldr	r1, [r7, #32]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fa20 	bl	8003c20 <I2C_WaitOnTXEFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00d      	beq.n	8003802 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d107      	bne.n	80037fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e005      	b.n	800380e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003802:	893b      	ldrh	r3, [r7, #8]
 8003804:	b2da      	uxtb	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	00010002 	.word	0x00010002

0800381c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	4608      	mov	r0, r1
 8003826:	4611      	mov	r1, r2
 8003828:	461a      	mov	r2, r3
 800382a:	4603      	mov	r3, r0
 800382c:	817b      	strh	r3, [r7, #10]
 800382e:	460b      	mov	r3, r1
 8003830:	813b      	strh	r3, [r7, #8]
 8003832:	4613      	mov	r3, r2
 8003834:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003844:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003854:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	2200      	movs	r2, #0
 800385e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f8c2 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00d      	beq.n	800388a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003878:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800387c:	d103      	bne.n	8003886 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003884:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e0aa      	b.n	80039e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800388a:	897b      	ldrh	r3, [r7, #10]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003898:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	6a3a      	ldr	r2, [r7, #32]
 800389e:	4952      	ldr	r1, [pc, #328]	@ (80039e8 <I2C_RequestMemoryRead+0x1cc>)
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f91d 	bl	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e097      	b.n	80039e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038c8:	6a39      	ldr	r1, [r7, #32]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f9a8 	bl	8003c20 <I2C_WaitOnTXEFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00d      	beq.n	80038f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d107      	bne.n	80038ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e076      	b.n	80039e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d105      	bne.n	8003904 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038f8:	893b      	ldrh	r3, [r7, #8]
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	611a      	str	r2, [r3, #16]
 8003902:	e021      	b.n	8003948 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003904:	893b      	ldrh	r3, [r7, #8]
 8003906:	0a1b      	lsrs	r3, r3, #8
 8003908:	b29b      	uxth	r3, r3
 800390a:	b2da      	uxtb	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003914:	6a39      	ldr	r1, [r7, #32]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f982 	bl	8003c20 <I2C_WaitOnTXEFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00d      	beq.n	800393e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	2b04      	cmp	r3, #4
 8003928:	d107      	bne.n	800393a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003938:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e050      	b.n	80039e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800393e:	893b      	ldrh	r3, [r7, #8]
 8003940:	b2da      	uxtb	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800394a:	6a39      	ldr	r1, [r7, #32]
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f967 	bl	8003c20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00d      	beq.n	8003974 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	2b04      	cmp	r3, #4
 800395e:	d107      	bne.n	8003970 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800396e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e035      	b.n	80039e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003982:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	2200      	movs	r2, #0
 800398c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f82b 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00d      	beq.n	80039b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039aa:	d103      	bne.n	80039b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e013      	b.n	80039e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039b8:	897b      	ldrh	r3, [r7, #10]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	6a3a      	ldr	r2, [r7, #32]
 80039cc:	4906      	ldr	r1, [pc, #24]	@ (80039e8 <I2C_RequestMemoryRead+0x1cc>)
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f886 	bl	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	00010002 	.word	0x00010002

080039ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039fc:	e048      	b.n	8003a90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a04:	d044      	beq.n	8003a90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a06:	f7fe fdb3 	bl	8002570 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d302      	bcc.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d139      	bne.n	8003a90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	0c1b      	lsrs	r3, r3, #16
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d10d      	bne.n	8003a42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	43da      	mvns	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4013      	ands	r3, r2
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	e00c      	b.n	8003a5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	43da      	mvns	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d116      	bne.n	8003a90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7c:	f043 0220 	orr.w	r2, r3, #32
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e023      	b.n	8003ad8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	0c1b      	lsrs	r3, r3, #16
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d10d      	bne.n	8003ab6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	43da      	mvns	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf0c      	ite	eq
 8003aac:	2301      	moveq	r3, #1
 8003aae:	2300      	movne	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	e00c      	b.n	8003ad0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	43da      	mvns	r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d093      	beq.n	80039fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aee:	e071      	b.n	8003bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003afe:	d123      	bne.n	8003b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	f043 0204 	orr.w	r2, r3, #4
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e067      	b.n	8003c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4e:	d041      	beq.n	8003bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b50:	f7fe fd0e 	bl	8002570 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d302      	bcc.n	8003b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d136      	bne.n	8003bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	0c1b      	lsrs	r3, r3, #16
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d10c      	bne.n	8003b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	43da      	mvns	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	bf14      	ite	ne
 8003b82:	2301      	movne	r3, #1
 8003b84:	2300      	moveq	r3, #0
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	e00b      	b.n	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	43da      	mvns	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4013      	ands	r3, r2
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d016      	beq.n	8003bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	f043 0220 	orr.w	r2, r3, #32
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e021      	b.n	8003c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	0c1b      	lsrs	r3, r3, #16
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d10c      	bne.n	8003bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	43da      	mvns	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	4013      	ands	r3, r2
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf14      	ite	ne
 8003bf0:	2301      	movne	r3, #1
 8003bf2:	2300      	moveq	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	e00b      	b.n	8003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	43da      	mvns	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4013      	ands	r3, r2
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf14      	ite	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	2300      	moveq	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f47f af6d 	bne.w	8003af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c2c:	e034      	b.n	8003c98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f8e3 	bl	8003dfa <I2C_IsAcknowledgeFailed>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e034      	b.n	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c44:	d028      	beq.n	8003c98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c46:	f7fe fc93 	bl	8002570 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d302      	bcc.n	8003c5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d11d      	bne.n	8003c98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c66:	2b80      	cmp	r3, #128	@ 0x80
 8003c68:	d016      	beq.n	8003c98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e007      	b.n	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca2:	2b80      	cmp	r3, #128	@ 0x80
 8003ca4:	d1c3      	bne.n	8003c2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cbc:	e034      	b.n	8003d28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f89b 	bl	8003dfa <I2C_IsAcknowledgeFailed>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e034      	b.n	8003d38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd4:	d028      	beq.n	8003d28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd6:	f7fe fc4b 	bl	8002570 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d302      	bcc.n	8003cec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d11d      	bne.n	8003d28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d016      	beq.n	8003d28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e007      	b.n	8003d38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d1c3      	bne.n	8003cbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d4c:	e049      	b.n	8003de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b10      	cmp	r3, #16
 8003d5a:	d119      	bne.n	8003d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0210 	mvn.w	r2, #16
 8003d64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e030      	b.n	8003df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d90:	f7fe fbee 	bl	8002570 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d302      	bcc.n	8003da6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d11d      	bne.n	8003de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db0:	2b40      	cmp	r3, #64	@ 0x40
 8003db2:	d016      	beq.n	8003de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	f043 0220 	orr.w	r2, r3, #32
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e007      	b.n	8003df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dec:	2b40      	cmp	r3, #64	@ 0x40
 8003dee:	d1ae      	bne.n	8003d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e10:	d11b      	bne.n	8003e4a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	f043 0204 	orr.w	r2, r3, #4
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0cc      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b68      	ldr	r3, [pc, #416]	@ (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d90c      	bls.n	8003e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b65      	ldr	r3, [pc, #404]	@ (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b63      	ldr	r3, [pc, #396]	@ (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0b8      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d020      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eac:	4b59      	ldr	r3, [pc, #356]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4a58      	ldr	r2, [pc, #352]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003eb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec4:	4b53      	ldr	r3, [pc, #332]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4a52      	ldr	r2, [pc, #328]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed0:	4b50      	ldr	r3, [pc, #320]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	494d      	ldr	r1, [pc, #308]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d044      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d107      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef6:	4b47      	ldr	r3, [pc, #284]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d119      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e07f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d107      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f16:	4b3f      	ldr	r3, [pc, #252]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e06f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f26:	4b3b      	ldr	r3, [pc, #236]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e067      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f36:	4b37      	ldr	r3, [pc, #220]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f023 0203 	bic.w	r2, r3, #3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4934      	ldr	r1, [pc, #208]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f48:	f7fe fb12 	bl	8002570 <HAL_GetTick>
 8003f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f50:	f7fe fb0e 	bl	8002570 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e04f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f66:	4b2b      	ldr	r3, [pc, #172]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 020c 	and.w	r2, r3, #12
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d1eb      	bne.n	8003f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f78:	4b25      	ldr	r3, [pc, #148]	@ (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d20c      	bcs.n	8003fa0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b22      	ldr	r3, [pc, #136]	@ (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8e:	4b20      	ldr	r3, [pc, #128]	@ (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e032      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fac:	4b19      	ldr	r3, [pc, #100]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4916      	ldr	r1, [pc, #88]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fca:	4b12      	ldr	r3, [pc, #72]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	490e      	ldr	r1, [pc, #56]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fde:	f000 f855 	bl	800408c <HAL_RCC_GetSysClockFreq>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	490a      	ldr	r1, [pc, #40]	@ (8004018 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff0:	5ccb      	ldrb	r3, [r1, r3]
 8003ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff6:	4a09      	ldr	r2, [pc, #36]	@ (800401c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ffa:	4b09      	ldr	r3, [pc, #36]	@ (8004020 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fe fa72 	bl	80024e8 <HAL_InitTick>

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40023c00 	.word	0x40023c00
 8004014:	40023800 	.word	0x40023800
 8004018:	080092d4 	.word	0x080092d4
 800401c:	20000014 	.word	0x20000014
 8004020:	20000018 	.word	0x20000018

08004024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004028:	4b03      	ldr	r3, [pc, #12]	@ (8004038 <HAL_RCC_GetHCLKFreq+0x14>)
 800402a:	681b      	ldr	r3, [r3, #0]
}
 800402c:	4618      	mov	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	20000014 	.word	0x20000014

0800403c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004040:	f7ff fff0 	bl	8004024 <HAL_RCC_GetHCLKFreq>
 8004044:	4602      	mov	r2, r0
 8004046:	4b05      	ldr	r3, [pc, #20]	@ (800405c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	0a9b      	lsrs	r3, r3, #10
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	4903      	ldr	r1, [pc, #12]	@ (8004060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004052:	5ccb      	ldrb	r3, [r1, r3]
 8004054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004058:	4618      	mov	r0, r3
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40023800 	.word	0x40023800
 8004060:	080092e4 	.word	0x080092e4

08004064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004068:	f7ff ffdc 	bl	8004024 <HAL_RCC_GetHCLKFreq>
 800406c:	4602      	mov	r2, r0
 800406e:	4b05      	ldr	r3, [pc, #20]	@ (8004084 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	0b5b      	lsrs	r3, r3, #13
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	4903      	ldr	r1, [pc, #12]	@ (8004088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800407a:	5ccb      	ldrb	r3, [r1, r3]
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40023800 	.word	0x40023800
 8004088:	080092e4 	.word	0x080092e4

0800408c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800408c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004090:	b0ae      	sub	sp, #184	@ 0xb8
 8004092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040b2:	4bcb      	ldr	r3, [pc, #812]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	2b0c      	cmp	r3, #12
 80040bc:	f200 8206 	bhi.w	80044cc <HAL_RCC_GetSysClockFreq+0x440>
 80040c0:	a201      	add	r2, pc, #4	@ (adr r2, 80040c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	080040fd 	.word	0x080040fd
 80040cc:	080044cd 	.word	0x080044cd
 80040d0:	080044cd 	.word	0x080044cd
 80040d4:	080044cd 	.word	0x080044cd
 80040d8:	08004105 	.word	0x08004105
 80040dc:	080044cd 	.word	0x080044cd
 80040e0:	080044cd 	.word	0x080044cd
 80040e4:	080044cd 	.word	0x080044cd
 80040e8:	0800410d 	.word	0x0800410d
 80040ec:	080044cd 	.word	0x080044cd
 80040f0:	080044cd 	.word	0x080044cd
 80040f4:	080044cd 	.word	0x080044cd
 80040f8:	080042fd 	.word	0x080042fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040fc:	4bb9      	ldr	r3, [pc, #740]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80040fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004102:	e1e7      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004104:	4bb8      	ldr	r3, [pc, #736]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004106:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800410a:	e1e3      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800410c:	4bb4      	ldr	r3, [pc, #720]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004114:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004118:	4bb1      	ldr	r3, [pc, #708]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d071      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004124:	4bae      	ldr	r3, [pc, #696]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	099b      	lsrs	r3, r3, #6
 800412a:	2200      	movs	r2, #0
 800412c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004130:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004134:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004140:	2300      	movs	r3, #0
 8004142:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004146:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800414a:	4622      	mov	r2, r4
 800414c:	462b      	mov	r3, r5
 800414e:	f04f 0000 	mov.w	r0, #0
 8004152:	f04f 0100 	mov.w	r1, #0
 8004156:	0159      	lsls	r1, r3, #5
 8004158:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800415c:	0150      	lsls	r0, r2, #5
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4621      	mov	r1, r4
 8004164:	1a51      	subs	r1, r2, r1
 8004166:	6439      	str	r1, [r7, #64]	@ 0x40
 8004168:	4629      	mov	r1, r5
 800416a:	eb63 0301 	sbc.w	r3, r3, r1
 800416e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800417c:	4649      	mov	r1, r9
 800417e:	018b      	lsls	r3, r1, #6
 8004180:	4641      	mov	r1, r8
 8004182:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004186:	4641      	mov	r1, r8
 8004188:	018a      	lsls	r2, r1, #6
 800418a:	4641      	mov	r1, r8
 800418c:	1a51      	subs	r1, r2, r1
 800418e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004190:	4649      	mov	r1, r9
 8004192:	eb63 0301 	sbc.w	r3, r3, r1
 8004196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80041a4:	4649      	mov	r1, r9
 80041a6:	00cb      	lsls	r3, r1, #3
 80041a8:	4641      	mov	r1, r8
 80041aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ae:	4641      	mov	r1, r8
 80041b0:	00ca      	lsls	r2, r1, #3
 80041b2:	4610      	mov	r0, r2
 80041b4:	4619      	mov	r1, r3
 80041b6:	4603      	mov	r3, r0
 80041b8:	4622      	mov	r2, r4
 80041ba:	189b      	adds	r3, r3, r2
 80041bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80041be:	462b      	mov	r3, r5
 80041c0:	460a      	mov	r2, r1
 80041c2:	eb42 0303 	adc.w	r3, r2, r3
 80041c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80041d4:	4629      	mov	r1, r5
 80041d6:	024b      	lsls	r3, r1, #9
 80041d8:	4621      	mov	r1, r4
 80041da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041de:	4621      	mov	r1, r4
 80041e0:	024a      	lsls	r2, r1, #9
 80041e2:	4610      	mov	r0, r2
 80041e4:	4619      	mov	r1, r3
 80041e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80041f8:	f7fc f85a 	bl	80002b0 <__aeabi_uldivmod>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4613      	mov	r3, r2
 8004202:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004206:	e067      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004208:	4b75      	ldr	r3, [pc, #468]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	099b      	lsrs	r3, r3, #6
 800420e:	2200      	movs	r2, #0
 8004210:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004214:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004218:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800421c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004220:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004222:	2300      	movs	r3, #0
 8004224:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004226:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800422a:	4622      	mov	r2, r4
 800422c:	462b      	mov	r3, r5
 800422e:	f04f 0000 	mov.w	r0, #0
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	0159      	lsls	r1, r3, #5
 8004238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800423c:	0150      	lsls	r0, r2, #5
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4621      	mov	r1, r4
 8004244:	1a51      	subs	r1, r2, r1
 8004246:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004248:	4629      	mov	r1, r5
 800424a:	eb63 0301 	sbc.w	r3, r3, r1
 800424e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800425c:	4649      	mov	r1, r9
 800425e:	018b      	lsls	r3, r1, #6
 8004260:	4641      	mov	r1, r8
 8004262:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004266:	4641      	mov	r1, r8
 8004268:	018a      	lsls	r2, r1, #6
 800426a:	4641      	mov	r1, r8
 800426c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004270:	4649      	mov	r1, r9
 8004272:	eb63 0b01 	sbc.w	fp, r3, r1
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004282:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004286:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800428a:	4692      	mov	sl, r2
 800428c:	469b      	mov	fp, r3
 800428e:	4623      	mov	r3, r4
 8004290:	eb1a 0303 	adds.w	r3, sl, r3
 8004294:	623b      	str	r3, [r7, #32]
 8004296:	462b      	mov	r3, r5
 8004298:	eb4b 0303 	adc.w	r3, fp, r3
 800429c:	627b      	str	r3, [r7, #36]	@ 0x24
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80042aa:	4629      	mov	r1, r5
 80042ac:	028b      	lsls	r3, r1, #10
 80042ae:	4621      	mov	r1, r4
 80042b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b4:	4621      	mov	r1, r4
 80042b6:	028a      	lsls	r2, r1, #10
 80042b8:	4610      	mov	r0, r2
 80042ba:	4619      	mov	r1, r3
 80042bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042c0:	2200      	movs	r2, #0
 80042c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80042c4:	677a      	str	r2, [r7, #116]	@ 0x74
 80042c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80042ca:	f7fb fff1 	bl	80002b0 <__aeabi_uldivmod>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4613      	mov	r3, r2
 80042d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042d8:	4b41      	ldr	r3, [pc, #260]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	3301      	adds	r3, #1
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80042ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80042f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042fa:	e0eb      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042fc:	4b38      	ldr	r3, [pc, #224]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004304:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004308:	4b35      	ldr	r3, [pc, #212]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d06b      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004314:	4b32      	ldr	r3, [pc, #200]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	099b      	lsrs	r3, r3, #6
 800431a:	2200      	movs	r2, #0
 800431c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800431e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004320:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004326:	663b      	str	r3, [r7, #96]	@ 0x60
 8004328:	2300      	movs	r3, #0
 800432a:	667b      	str	r3, [r7, #100]	@ 0x64
 800432c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004330:	4622      	mov	r2, r4
 8004332:	462b      	mov	r3, r5
 8004334:	f04f 0000 	mov.w	r0, #0
 8004338:	f04f 0100 	mov.w	r1, #0
 800433c:	0159      	lsls	r1, r3, #5
 800433e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004342:	0150      	lsls	r0, r2, #5
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4621      	mov	r1, r4
 800434a:	1a51      	subs	r1, r2, r1
 800434c:	61b9      	str	r1, [r7, #24]
 800434e:	4629      	mov	r1, r5
 8004350:	eb63 0301 	sbc.w	r3, r3, r1
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004362:	4659      	mov	r1, fp
 8004364:	018b      	lsls	r3, r1, #6
 8004366:	4651      	mov	r1, sl
 8004368:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800436c:	4651      	mov	r1, sl
 800436e:	018a      	lsls	r2, r1, #6
 8004370:	4651      	mov	r1, sl
 8004372:	ebb2 0801 	subs.w	r8, r2, r1
 8004376:	4659      	mov	r1, fp
 8004378:	eb63 0901 	sbc.w	r9, r3, r1
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004388:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800438c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004390:	4690      	mov	r8, r2
 8004392:	4699      	mov	r9, r3
 8004394:	4623      	mov	r3, r4
 8004396:	eb18 0303 	adds.w	r3, r8, r3
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	462b      	mov	r3, r5
 800439e:	eb49 0303 	adc.w	r3, r9, r3
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80043b0:	4629      	mov	r1, r5
 80043b2:	024b      	lsls	r3, r1, #9
 80043b4:	4621      	mov	r1, r4
 80043b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043ba:	4621      	mov	r1, r4
 80043bc:	024a      	lsls	r2, r1, #9
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043c6:	2200      	movs	r2, #0
 80043c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043ca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80043cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043d0:	f7fb ff6e 	bl	80002b0 <__aeabi_uldivmod>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4613      	mov	r3, r2
 80043da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043de:	e065      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x420>
 80043e0:	40023800 	.word	0x40023800
 80043e4:	00f42400 	.word	0x00f42400
 80043e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ec:	4b3d      	ldr	r3, [pc, #244]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	099b      	lsrs	r3, r3, #6
 80043f2:	2200      	movs	r2, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	4611      	mov	r1, r2
 80043f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80043fe:	2300      	movs	r3, #0
 8004400:	657b      	str	r3, [r7, #84]	@ 0x54
 8004402:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004406:	4642      	mov	r2, r8
 8004408:	464b      	mov	r3, r9
 800440a:	f04f 0000 	mov.w	r0, #0
 800440e:	f04f 0100 	mov.w	r1, #0
 8004412:	0159      	lsls	r1, r3, #5
 8004414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004418:	0150      	lsls	r0, r2, #5
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4641      	mov	r1, r8
 8004420:	1a51      	subs	r1, r2, r1
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	4649      	mov	r1, r9
 8004426:	eb63 0301 	sbc.w	r3, r3, r1
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004438:	4659      	mov	r1, fp
 800443a:	018b      	lsls	r3, r1, #6
 800443c:	4651      	mov	r1, sl
 800443e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004442:	4651      	mov	r1, sl
 8004444:	018a      	lsls	r2, r1, #6
 8004446:	4651      	mov	r1, sl
 8004448:	1a54      	subs	r4, r2, r1
 800444a:	4659      	mov	r1, fp
 800444c:	eb63 0501 	sbc.w	r5, r3, r1
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	00eb      	lsls	r3, r5, #3
 800445a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800445e:	00e2      	lsls	r2, r4, #3
 8004460:	4614      	mov	r4, r2
 8004462:	461d      	mov	r5, r3
 8004464:	4643      	mov	r3, r8
 8004466:	18e3      	adds	r3, r4, r3
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	464b      	mov	r3, r9
 800446c:	eb45 0303 	adc.w	r3, r5, r3
 8004470:	607b      	str	r3, [r7, #4]
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800447e:	4629      	mov	r1, r5
 8004480:	028b      	lsls	r3, r1, #10
 8004482:	4621      	mov	r1, r4
 8004484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004488:	4621      	mov	r1, r4
 800448a:	028a      	lsls	r2, r1, #10
 800448c:	4610      	mov	r0, r2
 800448e:	4619      	mov	r1, r3
 8004490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004494:	2200      	movs	r2, #0
 8004496:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004498:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800449a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800449e:	f7fb ff07 	bl	80002b0 <__aeabi_uldivmod>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4613      	mov	r3, r2
 80044a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80044ac:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	0f1b      	lsrs	r3, r3, #28
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80044ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80044ca:	e003      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044cc:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80044ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80044d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	37b8      	adds	r7, #184	@ 0xb8
 80044dc:	46bd      	mov	sp, r7
 80044de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044e2:	bf00      	nop
 80044e4:	40023800 	.word	0x40023800
 80044e8:	00f42400 	.word	0x00f42400

080044ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e28d      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 8083 	beq.w	8004612 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800450c:	4b94      	ldr	r3, [pc, #592]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	2b04      	cmp	r3, #4
 8004516:	d019      	beq.n	800454c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004518:	4b91      	ldr	r3, [pc, #580]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004520:	2b08      	cmp	r3, #8
 8004522:	d106      	bne.n	8004532 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004524:	4b8e      	ldr	r3, [pc, #568]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800452c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004530:	d00c      	beq.n	800454c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004532:	4b8b      	ldr	r3, [pc, #556]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800453a:	2b0c      	cmp	r3, #12
 800453c:	d112      	bne.n	8004564 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800453e:	4b88      	ldr	r3, [pc, #544]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004546:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800454a:	d10b      	bne.n	8004564 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800454c:	4b84      	ldr	r3, [pc, #528]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d05b      	beq.n	8004610 <HAL_RCC_OscConfig+0x124>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d157      	bne.n	8004610 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e25a      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800456c:	d106      	bne.n	800457c <HAL_RCC_OscConfig+0x90>
 800456e:	4b7c      	ldr	r3, [pc, #496]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a7b      	ldr	r2, [pc, #492]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	e01d      	b.n	80045b8 <HAL_RCC_OscConfig+0xcc>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004584:	d10c      	bne.n	80045a0 <HAL_RCC_OscConfig+0xb4>
 8004586:	4b76      	ldr	r3, [pc, #472]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a75      	ldr	r2, [pc, #468]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 800458c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	4b73      	ldr	r3, [pc, #460]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a72      	ldr	r2, [pc, #456]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	e00b      	b.n	80045b8 <HAL_RCC_OscConfig+0xcc>
 80045a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a6e      	ldr	r2, [pc, #440]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 80045a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	4b6c      	ldr	r3, [pc, #432]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a6b      	ldr	r2, [pc, #428]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 80045b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d013      	beq.n	80045e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7fd ffd6 	bl	8002570 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c8:	f7fd ffd2 	bl	8002570 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b64      	cmp	r3, #100	@ 0x64
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e21f      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045da:	4b61      	ldr	r3, [pc, #388]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0xdc>
 80045e6:	e014      	b.n	8004612 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fd ffc2 	bl	8002570 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f0:	f7fd ffbe 	bl	8002570 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b64      	cmp	r3, #100	@ 0x64
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e20b      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004602:	4b57      	ldr	r3, [pc, #348]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x104>
 800460e:	e000      	b.n	8004612 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d06f      	beq.n	80046fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800461e:	4b50      	ldr	r3, [pc, #320]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 030c 	and.w	r3, r3, #12
 8004626:	2b00      	cmp	r3, #0
 8004628:	d017      	beq.n	800465a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800462a:	4b4d      	ldr	r3, [pc, #308]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004632:	2b08      	cmp	r3, #8
 8004634:	d105      	bne.n	8004642 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004636:	4b4a      	ldr	r3, [pc, #296]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00b      	beq.n	800465a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004642:	4b47      	ldr	r3, [pc, #284]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800464a:	2b0c      	cmp	r3, #12
 800464c:	d11c      	bne.n	8004688 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800464e:	4b44      	ldr	r3, [pc, #272]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d116      	bne.n	8004688 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465a:	4b41      	ldr	r3, [pc, #260]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_RCC_OscConfig+0x186>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d001      	beq.n	8004672 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e1d3      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004672:	4b3b      	ldr	r3, [pc, #236]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4937      	ldr	r1, [pc, #220]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004682:	4313      	orrs	r3, r2
 8004684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004686:	e03a      	b.n	80046fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d020      	beq.n	80046d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004690:	4b34      	ldr	r3, [pc, #208]	@ (8004764 <HAL_RCC_OscConfig+0x278>)
 8004692:	2201      	movs	r2, #1
 8004694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004696:	f7fd ff6b 	bl	8002570 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800469e:	f7fd ff67 	bl	8002570 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e1b4      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046bc:	4b28      	ldr	r3, [pc, #160]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	4925      	ldr	r1, [pc, #148]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	600b      	str	r3, [r1, #0]
 80046d0:	e015      	b.n	80046fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046d2:	4b24      	ldr	r3, [pc, #144]	@ (8004764 <HAL_RCC_OscConfig+0x278>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fd ff4a 	bl	8002570 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e0:	f7fd ff46 	bl	8002570 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e193      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d036      	beq.n	8004778 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d016      	beq.n	8004740 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004712:	4b15      	ldr	r3, [pc, #84]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004718:	f7fd ff2a 	bl	8002570 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004720:	f7fd ff26 	bl	8002570 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e173      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004732:	4b0b      	ldr	r3, [pc, #44]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f0      	beq.n	8004720 <HAL_RCC_OscConfig+0x234>
 800473e:	e01b      	b.n	8004778 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004740:	4b09      	ldr	r3, [pc, #36]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004746:	f7fd ff13 	bl	8002570 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800474c:	e00e      	b.n	800476c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800474e:	f7fd ff0f 	bl	8002570 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d907      	bls.n	800476c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e15c      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
 8004760:	40023800 	.word	0x40023800
 8004764:	42470000 	.word	0x42470000
 8004768:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800476c:	4b8a      	ldr	r3, [pc, #552]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 800476e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ea      	bne.n	800474e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 8097 	beq.w	80048b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004786:	2300      	movs	r3, #0
 8004788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800478a:	4b83      	ldr	r3, [pc, #524]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10f      	bne.n	80047b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004796:	2300      	movs	r3, #0
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	4b7f      	ldr	r3, [pc, #508]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479e:	4a7e      	ldr	r2, [pc, #504]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 80047a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80047a6:	4b7c      	ldr	r3, [pc, #496]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ae:	60bb      	str	r3, [r7, #8]
 80047b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047b2:	2301      	movs	r3, #1
 80047b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b6:	4b79      	ldr	r3, [pc, #484]	@ (800499c <HAL_RCC_OscConfig+0x4b0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d118      	bne.n	80047f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047c2:	4b76      	ldr	r3, [pc, #472]	@ (800499c <HAL_RCC_OscConfig+0x4b0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a75      	ldr	r2, [pc, #468]	@ (800499c <HAL_RCC_OscConfig+0x4b0>)
 80047c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ce:	f7fd fecf 	bl	8002570 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d6:	f7fd fecb 	bl	8002570 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e118      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e8:	4b6c      	ldr	r3, [pc, #432]	@ (800499c <HAL_RCC_OscConfig+0x4b0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f0      	beq.n	80047d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d106      	bne.n	800480a <HAL_RCC_OscConfig+0x31e>
 80047fc:	4b66      	ldr	r3, [pc, #408]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004800:	4a65      	ldr	r2, [pc, #404]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 8004802:	f043 0301 	orr.w	r3, r3, #1
 8004806:	6713      	str	r3, [r2, #112]	@ 0x70
 8004808:	e01c      	b.n	8004844 <HAL_RCC_OscConfig+0x358>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b05      	cmp	r3, #5
 8004810:	d10c      	bne.n	800482c <HAL_RCC_OscConfig+0x340>
 8004812:	4b61      	ldr	r3, [pc, #388]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004816:	4a60      	ldr	r2, [pc, #384]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 8004818:	f043 0304 	orr.w	r3, r3, #4
 800481c:	6713      	str	r3, [r2, #112]	@ 0x70
 800481e:	4b5e      	ldr	r3, [pc, #376]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004822:	4a5d      	ldr	r2, [pc, #372]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	6713      	str	r3, [r2, #112]	@ 0x70
 800482a:	e00b      	b.n	8004844 <HAL_RCC_OscConfig+0x358>
 800482c:	4b5a      	ldr	r3, [pc, #360]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004830:	4a59      	ldr	r2, [pc, #356]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 8004832:	f023 0301 	bic.w	r3, r3, #1
 8004836:	6713      	str	r3, [r2, #112]	@ 0x70
 8004838:	4b57      	ldr	r3, [pc, #348]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 800483a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483c:	4a56      	ldr	r2, [pc, #344]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 800483e:	f023 0304 	bic.w	r3, r3, #4
 8004842:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d015      	beq.n	8004878 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484c:	f7fd fe90 	bl	8002570 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004852:	e00a      	b.n	800486a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004854:	f7fd fe8c 	bl	8002570 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e0d7      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486a:	4b4b      	ldr	r3, [pc, #300]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 800486c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0ee      	beq.n	8004854 <HAL_RCC_OscConfig+0x368>
 8004876:	e014      	b.n	80048a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fd fe7a 	bl	8002570 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800487e:	e00a      	b.n	8004896 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004880:	f7fd fe76 	bl	8002570 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e0c1      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004896:	4b40      	ldr	r3, [pc, #256]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1ee      	bne.n	8004880 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048a2:	7dfb      	ldrb	r3, [r7, #23]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d105      	bne.n	80048b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 80048aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ac:	4a3a      	ldr	r2, [pc, #232]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 80048ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 80ad 	beq.w	8004a18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048be:	4b36      	ldr	r3, [pc, #216]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d060      	beq.n	800498c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d145      	bne.n	800495e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d2:	4b33      	ldr	r3, [pc, #204]	@ (80049a0 <HAL_RCC_OscConfig+0x4b4>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d8:	f7fd fe4a 	bl	8002570 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fd fe46 	bl	8002570 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e093      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f2:	4b29      	ldr	r3, [pc, #164]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69da      	ldr	r2, [r3, #28]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490c:	019b      	lsls	r3, r3, #6
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	085b      	lsrs	r3, r3, #1
 8004916:	3b01      	subs	r3, #1
 8004918:	041b      	lsls	r3, r3, #16
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004920:	061b      	lsls	r3, r3, #24
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004928:	071b      	lsls	r3, r3, #28
 800492a:	491b      	ldr	r1, [pc, #108]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 800492c:	4313      	orrs	r3, r2
 800492e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004930:	4b1b      	ldr	r3, [pc, #108]	@ (80049a0 <HAL_RCC_OscConfig+0x4b4>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004936:	f7fd fe1b 	bl	8002570 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800493e:	f7fd fe17 	bl	8002570 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e064      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004950:	4b11      	ldr	r3, [pc, #68]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f0      	beq.n	800493e <HAL_RCC_OscConfig+0x452>
 800495c:	e05c      	b.n	8004a18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495e:	4b10      	ldr	r3, [pc, #64]	@ (80049a0 <HAL_RCC_OscConfig+0x4b4>)
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004964:	f7fd fe04 	bl	8002570 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800496c:	f7fd fe00 	bl	8002570 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e04d      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497e:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <HAL_RCC_OscConfig+0x4ac>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f0      	bne.n	800496c <HAL_RCC_OscConfig+0x480>
 800498a:	e045      	b.n	8004a18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d107      	bne.n	80049a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e040      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
 8004998:	40023800 	.word	0x40023800
 800499c:	40007000 	.word	0x40007000
 80049a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004a24 <HAL_RCC_OscConfig+0x538>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d030      	beq.n	8004a14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049bc:	429a      	cmp	r2, r3
 80049be:	d129      	bne.n	8004a14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d122      	bne.n	8004a14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049d4:	4013      	ands	r3, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049dc:	4293      	cmp	r3, r2
 80049de:	d119      	bne.n	8004a14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	3b01      	subs	r3, #1
 80049ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d10f      	bne.n	8004a14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d107      	bne.n	8004a14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d001      	beq.n	8004a18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800

08004a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e07b      	b.n	8004b32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d108      	bne.n	8004a54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a4a:	d009      	beq.n	8004a60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	61da      	str	r2, [r3, #28]
 8004a52:	e005      	b.n	8004a60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fd f970 	bl	8001d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae4:	ea42 0103 	orr.w	r1, r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	0c1b      	lsrs	r3, r3, #16
 8004afe:	f003 0104 	and.w	r1, r3, #4
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b06:	f003 0210 	and.w	r2, r3, #16
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69da      	ldr	r2, [r3, #28]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b088      	sub	sp, #32
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	4613      	mov	r3, r2
 8004b48:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b4a:	f7fd fd11 	bl	8002570 <HAL_GetTick>
 8004b4e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004b50:	88fb      	ldrh	r3, [r7, #6]
 8004b52:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d001      	beq.n	8004b64 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004b60:	2302      	movs	r3, #2
 8004b62:	e12a      	b.n	8004dba <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_SPI_Transmit+0x36>
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e122      	b.n	8004dba <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_SPI_Transmit+0x48>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e11b      	b.n	8004dba <HAL_SPI_Transmit+0x280>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	88fa      	ldrh	r2, [r7, #6]
 8004ba2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bd0:	d10f      	bne.n	8004bf2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004be0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bf0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfc:	2b40      	cmp	r3, #64	@ 0x40
 8004bfe:	d007      	beq.n	8004c10 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c18:	d152      	bne.n	8004cc0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_SPI_Transmit+0xee>
 8004c22:	8b7b      	ldrh	r3, [r7, #26]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d145      	bne.n	8004cb4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2c:	881a      	ldrh	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c38:	1c9a      	adds	r2, r3, #2
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c4c:	e032      	b.n	8004cb4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d112      	bne.n	8004c82 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c60:	881a      	ldrh	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6c:	1c9a      	adds	r2, r3, #2
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004c80:	e018      	b.n	8004cb4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c82:	f7fd fc75 	bl	8002570 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d803      	bhi.n	8004c9a <HAL_SPI_Transmit+0x160>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d102      	bne.n	8004ca0 <HAL_SPI_Transmit+0x166>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d109      	bne.n	8004cb4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e082      	b.n	8004dba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1c7      	bne.n	8004c4e <HAL_SPI_Transmit+0x114>
 8004cbe:	e053      	b.n	8004d68 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <HAL_SPI_Transmit+0x194>
 8004cc8:	8b7b      	ldrh	r3, [r7, #26]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d147      	bne.n	8004d5e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	330c      	adds	r3, #12
 8004cd8:	7812      	ldrb	r2, [r2, #0]
 8004cda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cf4:	e033      	b.n	8004d5e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d113      	bne.n	8004d2c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	7812      	ldrb	r2, [r2, #0]
 8004d10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d2a:	e018      	b.n	8004d5e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d2c:	f7fd fc20 	bl	8002570 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d803      	bhi.n	8004d44 <HAL_SPI_Transmit+0x20a>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d42:	d102      	bne.n	8004d4a <HAL_SPI_Transmit+0x210>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e02d      	b.n	8004dba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1c6      	bne.n	8004cf6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d68:	69fa      	ldr	r2, [r7, #28]
 8004d6a:	6839      	ldr	r1, [r7, #0]
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 f8b1 	bl	8004ed4 <SPI_EndRxTxTransaction>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10a      	bne.n	8004d9c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004db8:	2300      	movs	r3, #0
  }
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dd4:	f7fd fbcc 	bl	8002570 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	4413      	add	r3, r2
 8004de2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004de4:	f7fd fbc4 	bl	8002570 <HAL_GetTick>
 8004de8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dea:	4b39      	ldr	r3, [pc, #228]	@ (8004ed0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	015b      	lsls	r3, r3, #5
 8004df0:	0d1b      	lsrs	r3, r3, #20
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	fb02 f303 	mul.w	r3, r2, r3
 8004df8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dfa:	e054      	b.n	8004ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e02:	d050      	beq.n	8004ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e04:	f7fd fbb4 	bl	8002570 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d902      	bls.n	8004e1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d13d      	bne.n	8004e96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e32:	d111      	bne.n	8004e58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e3c:	d004      	beq.n	8004e48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e46:	d107      	bne.n	8004e58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e60:	d10f      	bne.n	8004e82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e017      	b.n	8004ec6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	bf0c      	ite	eq
 8004eb6:	2301      	moveq	r3, #1
 8004eb8:	2300      	movne	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d19b      	bne.n	8004dfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3720      	adds	r7, #32
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000014 	.word	0x20000014

08004ed4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	2102      	movs	r1, #2
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f7ff ff6a 	bl	8004dc4 <SPI_WaitFlagStateUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004efa:	f043 0220 	orr.w	r2, r3, #32
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e032      	b.n	8004f6c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f06:	4b1b      	ldr	r3, [pc, #108]	@ (8004f74 <SPI_EndRxTxTransaction+0xa0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f78 <SPI_EndRxTxTransaction+0xa4>)
 8004f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f10:	0d5b      	lsrs	r3, r3, #21
 8004f12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f24:	d112      	bne.n	8004f4c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2180      	movs	r1, #128	@ 0x80
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff ff47 	bl	8004dc4 <SPI_WaitFlagStateUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d016      	beq.n	8004f6a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f40:	f043 0220 	orr.w	r2, r3, #32
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e00f      	b.n	8004f6c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f62:	2b80      	cmp	r3, #128	@ 0x80
 8004f64:	d0f2      	beq.n	8004f4c <SPI_EndRxTxTransaction+0x78>
 8004f66:	e000      	b.n	8004f6a <SPI_EndRxTxTransaction+0x96>
        break;
 8004f68:	bf00      	nop
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	20000014 	.word	0x20000014
 8004f78:	165e9f81 	.word	0x165e9f81

08004f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e041      	b.n	8005012 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fd f942 	bl	800222c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f000 f9e6 	bl	800538c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b01      	cmp	r3, #1
 800502e:	d001      	beq.n	8005034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e04e      	b.n	80050d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a23      	ldr	r2, [pc, #140]	@ (80050e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d022      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800505e:	d01d      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1f      	ldr	r2, [pc, #124]	@ (80050e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d018      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1e      	ldr	r2, [pc, #120]	@ (80050e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1c      	ldr	r2, [pc, #112]	@ (80050ec <HAL_TIM_Base_Start_IT+0xd0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00e      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1b      	ldr	r2, [pc, #108]	@ (80050f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d009      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a19      	ldr	r2, [pc, #100]	@ (80050f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a18      	ldr	r2, [pc, #96]	@ (80050f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d111      	bne.n	80050c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b06      	cmp	r3, #6
 80050ac:	d010      	beq.n	80050d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050be:	e007      	b.n	80050d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40010000 	.word	0x40010000
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	40010400 	.word	0x40010400
 80050f4:	40014000 	.word	0x40014000
 80050f8:	40001800 	.word	0x40001800

080050fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0201 	bic.w	r2, r2, #1
 8005112:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6a1a      	ldr	r2, [r3, #32]
 800511a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800511e:	4013      	ands	r3, r2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10f      	bne.n	8005144 <HAL_TIM_Base_Stop_IT+0x48>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6a1a      	ldr	r2, [r3, #32]
 800512a:	f240 4344 	movw	r3, #1092	@ 0x444
 800512e:	4013      	ands	r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d107      	bne.n	8005144 <HAL_TIM_Base_Stop_IT+0x48>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0201 	bic.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d020      	beq.n	80051be <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d01b      	beq.n	80051be <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f06f 0202 	mvn.w	r2, #2
 800518e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f8d2 	bl	800534e <HAL_TIM_IC_CaptureCallback>
 80051aa:	e005      	b.n	80051b8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f8c4 	bl	800533a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f8d5 	bl	8005362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d020      	beq.n	800520a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01b      	beq.n	800520a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f06f 0204 	mvn.w	r2, #4
 80051da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f8ac 	bl	800534e <HAL_TIM_IC_CaptureCallback>
 80051f6:	e005      	b.n	8005204 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f89e 	bl	800533a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f8af 	bl	8005362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d020      	beq.n	8005256 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01b      	beq.n	8005256 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f06f 0208 	mvn.w	r2, #8
 8005226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2204      	movs	r2, #4
 800522c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f003 0303 	and.w	r3, r3, #3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f886 	bl	800534e <HAL_TIM_IC_CaptureCallback>
 8005242:	e005      	b.n	8005250 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f878 	bl	800533a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f889 	bl	8005362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	2b00      	cmp	r3, #0
 800525e:	d020      	beq.n	80052a2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01b      	beq.n	80052a2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f06f 0210 	mvn.w	r2, #16
 8005272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2208      	movs	r2, #8
 8005278:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f860 	bl	800534e <HAL_TIM_IC_CaptureCallback>
 800528e:	e005      	b.n	800529c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f852 	bl	800533a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f863 	bl	8005362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00c      	beq.n	80052c6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f06f 0201 	mvn.w	r2, #1
 80052be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7fc fcb7 	bl	8001c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00c      	beq.n	80052ea <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d007      	beq.n	80052ea <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80052e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f983 	bl	80055f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00c      	beq.n	800530e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d007      	beq.n	800530e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f834 	bl	8005376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00c      	beq.n	8005332 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 0320 	and.w	r3, r3, #32
 800531e:	2b00      	cmp	r3, #0
 8005320:	d007      	beq.n	8005332 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f06f 0220 	mvn.w	r2, #32
 800532a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f955 	bl	80055dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005332:	bf00      	nop
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a46      	ldr	r2, [pc, #280]	@ (80054b8 <TIM_Base_SetConfig+0x12c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d013      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053aa:	d00f      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a43      	ldr	r2, [pc, #268]	@ (80054bc <TIM_Base_SetConfig+0x130>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00b      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a42      	ldr	r2, [pc, #264]	@ (80054c0 <TIM_Base_SetConfig+0x134>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d007      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a41      	ldr	r2, [pc, #260]	@ (80054c4 <TIM_Base_SetConfig+0x138>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a40      	ldr	r2, [pc, #256]	@ (80054c8 <TIM_Base_SetConfig+0x13c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d108      	bne.n	80053de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a35      	ldr	r2, [pc, #212]	@ (80054b8 <TIM_Base_SetConfig+0x12c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d02b      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ec:	d027      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a32      	ldr	r2, [pc, #200]	@ (80054bc <TIM_Base_SetConfig+0x130>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d023      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a31      	ldr	r2, [pc, #196]	@ (80054c0 <TIM_Base_SetConfig+0x134>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d01f      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a30      	ldr	r2, [pc, #192]	@ (80054c4 <TIM_Base_SetConfig+0x138>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d01b      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a2f      	ldr	r2, [pc, #188]	@ (80054c8 <TIM_Base_SetConfig+0x13c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d017      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a2e      	ldr	r2, [pc, #184]	@ (80054cc <TIM_Base_SetConfig+0x140>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d013      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a2d      	ldr	r2, [pc, #180]	@ (80054d0 <TIM_Base_SetConfig+0x144>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00f      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a2c      	ldr	r2, [pc, #176]	@ (80054d4 <TIM_Base_SetConfig+0x148>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00b      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2b      	ldr	r2, [pc, #172]	@ (80054d8 <TIM_Base_SetConfig+0x14c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d007      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2a      	ldr	r2, [pc, #168]	@ (80054dc <TIM_Base_SetConfig+0x150>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d003      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a29      	ldr	r2, [pc, #164]	@ (80054e0 <TIM_Base_SetConfig+0x154>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d108      	bne.n	8005450 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a10      	ldr	r2, [pc, #64]	@ (80054b8 <TIM_Base_SetConfig+0x12c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_Base_SetConfig+0xf8>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a12      	ldr	r2, [pc, #72]	@ (80054c8 <TIM_Base_SetConfig+0x13c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d103      	bne.n	800548c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b01      	cmp	r3, #1
 800549c:	d105      	bne.n	80054aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f023 0201 	bic.w	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	611a      	str	r2, [r3, #16]
  }
}
 80054aa:	bf00      	nop
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40010000 	.word	0x40010000
 80054bc:	40000400 	.word	0x40000400
 80054c0:	40000800 	.word	0x40000800
 80054c4:	40000c00 	.word	0x40000c00
 80054c8:	40010400 	.word	0x40010400
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40014400 	.word	0x40014400
 80054d4:	40014800 	.word	0x40014800
 80054d8:	40001800 	.word	0x40001800
 80054dc:	40001c00 	.word	0x40001c00
 80054e0:	40002000 	.word	0x40002000

080054e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e05a      	b.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a21      	ldr	r2, [pc, #132]	@ (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d022      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005548:	d01d      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1d      	ldr	r2, [pc, #116]	@ (80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d018      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1b      	ldr	r2, [pc, #108]	@ (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1a      	ldr	r2, [pc, #104]	@ (80055cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00e      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a18      	ldr	r2, [pc, #96]	@ (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d009      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a17      	ldr	r2, [pc, #92]	@ (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d004      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a15      	ldr	r2, [pc, #84]	@ (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d10c      	bne.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800558c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	4313      	orrs	r3, r2
 8005596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40000400 	.word	0x40000400
 80055c8:	40000800 	.word	0x40000800
 80055cc:	40000c00 	.word	0x40000c00
 80055d0:	40010400 	.word	0x40010400
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40001800 	.word	0x40001800

080055dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e042      	b.n	800569c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fc fec8 	bl	80023c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2224      	movs	r2, #36	@ 0x24
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f82b 	bl	80056a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800565c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695a      	ldr	r2, [r3, #20]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800566c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800567c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056a8:	b0c0      	sub	sp, #256	@ 0x100
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c0:	68d9      	ldr	r1, [r3, #12]
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	ea40 0301 	orr.w	r3, r0, r1
 80056cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	431a      	orrs	r2, r3
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056fc:	f021 010c 	bic.w	r1, r1, #12
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800570a:	430b      	orrs	r3, r1
 800570c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800570e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800571a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571e:	6999      	ldr	r1, [r3, #24]
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	ea40 0301 	orr.w	r3, r0, r1
 800572a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	4b8f      	ldr	r3, [pc, #572]	@ (8005970 <UART_SetConfig+0x2cc>)
 8005734:	429a      	cmp	r2, r3
 8005736:	d005      	beq.n	8005744 <UART_SetConfig+0xa0>
 8005738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4b8d      	ldr	r3, [pc, #564]	@ (8005974 <UART_SetConfig+0x2d0>)
 8005740:	429a      	cmp	r2, r3
 8005742:	d104      	bne.n	800574e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005744:	f7fe fc8e 	bl	8004064 <HAL_RCC_GetPCLK2Freq>
 8005748:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800574c:	e003      	b.n	8005756 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800574e:	f7fe fc75 	bl	800403c <HAL_RCC_GetPCLK1Freq>
 8005752:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005760:	f040 810c 	bne.w	800597c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005768:	2200      	movs	r2, #0
 800576a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800576e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005772:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005776:	4622      	mov	r2, r4
 8005778:	462b      	mov	r3, r5
 800577a:	1891      	adds	r1, r2, r2
 800577c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800577e:	415b      	adcs	r3, r3
 8005780:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005782:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005786:	4621      	mov	r1, r4
 8005788:	eb12 0801 	adds.w	r8, r2, r1
 800578c:	4629      	mov	r1, r5
 800578e:	eb43 0901 	adc.w	r9, r3, r1
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	f04f 0300 	mov.w	r3, #0
 800579a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800579e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057a6:	4690      	mov	r8, r2
 80057a8:	4699      	mov	r9, r3
 80057aa:	4623      	mov	r3, r4
 80057ac:	eb18 0303 	adds.w	r3, r8, r3
 80057b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057b4:	462b      	mov	r3, r5
 80057b6:	eb49 0303 	adc.w	r3, r9, r3
 80057ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80057ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80057ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80057d2:	460b      	mov	r3, r1
 80057d4:	18db      	adds	r3, r3, r3
 80057d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80057d8:	4613      	mov	r3, r2
 80057da:	eb42 0303 	adc.w	r3, r2, r3
 80057de:	657b      	str	r3, [r7, #84]	@ 0x54
 80057e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057e8:	f7fa fd62 	bl	80002b0 <__aeabi_uldivmod>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4b61      	ldr	r3, [pc, #388]	@ (8005978 <UART_SetConfig+0x2d4>)
 80057f2:	fba3 2302 	umull	r2, r3, r3, r2
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	011c      	lsls	r4, r3, #4
 80057fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005804:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005808:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800580c:	4642      	mov	r2, r8
 800580e:	464b      	mov	r3, r9
 8005810:	1891      	adds	r1, r2, r2
 8005812:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005814:	415b      	adcs	r3, r3
 8005816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005818:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800581c:	4641      	mov	r1, r8
 800581e:	eb12 0a01 	adds.w	sl, r2, r1
 8005822:	4649      	mov	r1, r9
 8005824:	eb43 0b01 	adc.w	fp, r3, r1
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005834:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800583c:	4692      	mov	sl, r2
 800583e:	469b      	mov	fp, r3
 8005840:	4643      	mov	r3, r8
 8005842:	eb1a 0303 	adds.w	r3, sl, r3
 8005846:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800584a:	464b      	mov	r3, r9
 800584c:	eb4b 0303 	adc.w	r3, fp, r3
 8005850:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005860:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005864:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005868:	460b      	mov	r3, r1
 800586a:	18db      	adds	r3, r3, r3
 800586c:	643b      	str	r3, [r7, #64]	@ 0x40
 800586e:	4613      	mov	r3, r2
 8005870:	eb42 0303 	adc.w	r3, r2, r3
 8005874:	647b      	str	r3, [r7, #68]	@ 0x44
 8005876:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800587a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800587e:	f7fa fd17 	bl	80002b0 <__aeabi_uldivmod>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4611      	mov	r1, r2
 8005888:	4b3b      	ldr	r3, [pc, #236]	@ (8005978 <UART_SetConfig+0x2d4>)
 800588a:	fba3 2301 	umull	r2, r3, r3, r1
 800588e:	095b      	lsrs	r3, r3, #5
 8005890:	2264      	movs	r2, #100	@ 0x64
 8005892:	fb02 f303 	mul.w	r3, r2, r3
 8005896:	1acb      	subs	r3, r1, r3
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800589e:	4b36      	ldr	r3, [pc, #216]	@ (8005978 <UART_SetConfig+0x2d4>)
 80058a0:	fba3 2302 	umull	r2, r3, r3, r2
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80058ac:	441c      	add	r4, r3
 80058ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058b2:	2200      	movs	r2, #0
 80058b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80058bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80058c0:	4642      	mov	r2, r8
 80058c2:	464b      	mov	r3, r9
 80058c4:	1891      	adds	r1, r2, r2
 80058c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80058c8:	415b      	adcs	r3, r3
 80058ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058d0:	4641      	mov	r1, r8
 80058d2:	1851      	adds	r1, r2, r1
 80058d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80058d6:	4649      	mov	r1, r9
 80058d8:	414b      	adcs	r3, r1
 80058da:	637b      	str	r3, [r7, #52]	@ 0x34
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	f04f 0300 	mov.w	r3, #0
 80058e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058e8:	4659      	mov	r1, fp
 80058ea:	00cb      	lsls	r3, r1, #3
 80058ec:	4651      	mov	r1, sl
 80058ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058f2:	4651      	mov	r1, sl
 80058f4:	00ca      	lsls	r2, r1, #3
 80058f6:	4610      	mov	r0, r2
 80058f8:	4619      	mov	r1, r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	4642      	mov	r2, r8
 80058fe:	189b      	adds	r3, r3, r2
 8005900:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005904:	464b      	mov	r3, r9
 8005906:	460a      	mov	r2, r1
 8005908:	eb42 0303 	adc.w	r3, r2, r3
 800590c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800591c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005920:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005924:	460b      	mov	r3, r1
 8005926:	18db      	adds	r3, r3, r3
 8005928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800592a:	4613      	mov	r3, r2
 800592c:	eb42 0303 	adc.w	r3, r2, r3
 8005930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005936:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800593a:	f7fa fcb9 	bl	80002b0 <__aeabi_uldivmod>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	4b0d      	ldr	r3, [pc, #52]	@ (8005978 <UART_SetConfig+0x2d4>)
 8005944:	fba3 1302 	umull	r1, r3, r3, r2
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	2164      	movs	r1, #100	@ 0x64
 800594c:	fb01 f303 	mul.w	r3, r1, r3
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	3332      	adds	r3, #50	@ 0x32
 8005956:	4a08      	ldr	r2, [pc, #32]	@ (8005978 <UART_SetConfig+0x2d4>)
 8005958:	fba2 2303 	umull	r2, r3, r2, r3
 800595c:	095b      	lsrs	r3, r3, #5
 800595e:	f003 0207 	and.w	r2, r3, #7
 8005962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4422      	add	r2, r4
 800596a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800596c:	e106      	b.n	8005b7c <UART_SetConfig+0x4d8>
 800596e:	bf00      	nop
 8005970:	40011000 	.word	0x40011000
 8005974:	40011400 	.word	0x40011400
 8005978:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800597c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005980:	2200      	movs	r2, #0
 8005982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005986:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800598a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800598e:	4642      	mov	r2, r8
 8005990:	464b      	mov	r3, r9
 8005992:	1891      	adds	r1, r2, r2
 8005994:	6239      	str	r1, [r7, #32]
 8005996:	415b      	adcs	r3, r3
 8005998:	627b      	str	r3, [r7, #36]	@ 0x24
 800599a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800599e:	4641      	mov	r1, r8
 80059a0:	1854      	adds	r4, r2, r1
 80059a2:	4649      	mov	r1, r9
 80059a4:	eb43 0501 	adc.w	r5, r3, r1
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	00eb      	lsls	r3, r5, #3
 80059b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059b6:	00e2      	lsls	r2, r4, #3
 80059b8:	4614      	mov	r4, r2
 80059ba:	461d      	mov	r5, r3
 80059bc:	4643      	mov	r3, r8
 80059be:	18e3      	adds	r3, r4, r3
 80059c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059c4:	464b      	mov	r3, r9
 80059c6:	eb45 0303 	adc.w	r3, r5, r3
 80059ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059de:	f04f 0200 	mov.w	r2, #0
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059ea:	4629      	mov	r1, r5
 80059ec:	008b      	lsls	r3, r1, #2
 80059ee:	4621      	mov	r1, r4
 80059f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059f4:	4621      	mov	r1, r4
 80059f6:	008a      	lsls	r2, r1, #2
 80059f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059fc:	f7fa fc58 	bl	80002b0 <__aeabi_uldivmod>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	4b60      	ldr	r3, [pc, #384]	@ (8005b88 <UART_SetConfig+0x4e4>)
 8005a06:	fba3 2302 	umull	r2, r3, r3, r2
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	011c      	lsls	r4, r3, #4
 8005a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a20:	4642      	mov	r2, r8
 8005a22:	464b      	mov	r3, r9
 8005a24:	1891      	adds	r1, r2, r2
 8005a26:	61b9      	str	r1, [r7, #24]
 8005a28:	415b      	adcs	r3, r3
 8005a2a:	61fb      	str	r3, [r7, #28]
 8005a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a30:	4641      	mov	r1, r8
 8005a32:	1851      	adds	r1, r2, r1
 8005a34:	6139      	str	r1, [r7, #16]
 8005a36:	4649      	mov	r1, r9
 8005a38:	414b      	adcs	r3, r1
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a48:	4659      	mov	r1, fp
 8005a4a:	00cb      	lsls	r3, r1, #3
 8005a4c:	4651      	mov	r1, sl
 8005a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a52:	4651      	mov	r1, sl
 8005a54:	00ca      	lsls	r2, r1, #3
 8005a56:	4610      	mov	r0, r2
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	4642      	mov	r2, r8
 8005a5e:	189b      	adds	r3, r3, r2
 8005a60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a64:	464b      	mov	r3, r9
 8005a66:	460a      	mov	r2, r1
 8005a68:	eb42 0303 	adc.w	r3, r2, r3
 8005a6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a88:	4649      	mov	r1, r9
 8005a8a:	008b      	lsls	r3, r1, #2
 8005a8c:	4641      	mov	r1, r8
 8005a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a92:	4641      	mov	r1, r8
 8005a94:	008a      	lsls	r2, r1, #2
 8005a96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a9a:	f7fa fc09 	bl	80002b0 <__aeabi_uldivmod>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4b38      	ldr	r3, [pc, #224]	@ (8005b88 <UART_SetConfig+0x4e4>)
 8005aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	2264      	movs	r2, #100	@ 0x64
 8005aae:	fb02 f303 	mul.w	r3, r2, r3
 8005ab2:	1acb      	subs	r3, r1, r3
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	3332      	adds	r3, #50	@ 0x32
 8005ab8:	4a33      	ldr	r2, [pc, #204]	@ (8005b88 <UART_SetConfig+0x4e4>)
 8005aba:	fba2 2303 	umull	r2, r3, r2, r3
 8005abe:	095b      	lsrs	r3, r3, #5
 8005ac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ac4:	441c      	add	r4, r3
 8005ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aca:	2200      	movs	r2, #0
 8005acc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ace:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ad0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ad4:	4642      	mov	r2, r8
 8005ad6:	464b      	mov	r3, r9
 8005ad8:	1891      	adds	r1, r2, r2
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	415b      	adcs	r3, r3
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ae4:	4641      	mov	r1, r8
 8005ae6:	1851      	adds	r1, r2, r1
 8005ae8:	6039      	str	r1, [r7, #0]
 8005aea:	4649      	mov	r1, r9
 8005aec:	414b      	adcs	r3, r1
 8005aee:	607b      	str	r3, [r7, #4]
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005afc:	4659      	mov	r1, fp
 8005afe:	00cb      	lsls	r3, r1, #3
 8005b00:	4651      	mov	r1, sl
 8005b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b06:	4651      	mov	r1, sl
 8005b08:	00ca      	lsls	r2, r1, #3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4642      	mov	r2, r8
 8005b12:	189b      	adds	r3, r3, r2
 8005b14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b16:	464b      	mov	r3, r9
 8005b18:	460a      	mov	r2, r1
 8005b1a:	eb42 0303 	adc.w	r3, r2, r3
 8005b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b38:	4649      	mov	r1, r9
 8005b3a:	008b      	lsls	r3, r1, #2
 8005b3c:	4641      	mov	r1, r8
 8005b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b42:	4641      	mov	r1, r8
 8005b44:	008a      	lsls	r2, r1, #2
 8005b46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b4a:	f7fa fbb1 	bl	80002b0 <__aeabi_uldivmod>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4b0d      	ldr	r3, [pc, #52]	@ (8005b88 <UART_SetConfig+0x4e4>)
 8005b54:	fba3 1302 	umull	r1, r3, r3, r2
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	2164      	movs	r1, #100	@ 0x64
 8005b5c:	fb01 f303 	mul.w	r3, r1, r3
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	3332      	adds	r3, #50	@ 0x32
 8005b66:	4a08      	ldr	r2, [pc, #32]	@ (8005b88 <UART_SetConfig+0x4e4>)
 8005b68:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	f003 020f 	and.w	r2, r3, #15
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4422      	add	r2, r4
 8005b7a:	609a      	str	r2, [r3, #8]
}
 8005b7c:	bf00      	nop
 8005b7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b82:	46bd      	mov	sp, r7
 8005b84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b88:	51eb851f 	.word	0x51eb851f

08005b8c <srand>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4b10      	ldr	r3, [pc, #64]	@ (8005bd0 <srand+0x44>)
 8005b90:	681d      	ldr	r5, [r3, #0]
 8005b92:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005b94:	4604      	mov	r4, r0
 8005b96:	b9b3      	cbnz	r3, 8005bc6 <srand+0x3a>
 8005b98:	2018      	movs	r0, #24
 8005b9a:	f000 fb85 	bl	80062a8 <malloc>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	6328      	str	r0, [r5, #48]	@ 0x30
 8005ba2:	b920      	cbnz	r0, 8005bae <srand+0x22>
 8005ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd4 <srand+0x48>)
 8005ba6:	480c      	ldr	r0, [pc, #48]	@ (8005bd8 <srand+0x4c>)
 8005ba8:	2146      	movs	r1, #70	@ 0x46
 8005baa:	f000 fb15 	bl	80061d8 <__assert_func>
 8005bae:	490b      	ldr	r1, [pc, #44]	@ (8005bdc <srand+0x50>)
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <srand+0x54>)
 8005bb2:	e9c0 1300 	strd	r1, r3, [r0]
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005be4 <srand+0x58>)
 8005bb8:	6083      	str	r3, [r0, #8]
 8005bba:	230b      	movs	r3, #11
 8005bbc:	8183      	strh	r3, [r0, #12]
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005bc6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005bc8:	2200      	movs	r2, #0
 8005bca:	611c      	str	r4, [r3, #16]
 8005bcc:	615a      	str	r2, [r3, #20]
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
 8005bd0:	2000002c 	.word	0x2000002c
 8005bd4:	080092ec 	.word	0x080092ec
 8005bd8:	08009303 	.word	0x08009303
 8005bdc:	abcd330e 	.word	0xabcd330e
 8005be0:	e66d1234 	.word	0xe66d1234
 8005be4:	0005deec 	.word	0x0005deec

08005be8 <rand>:
 8005be8:	4b16      	ldr	r3, [pc, #88]	@ (8005c44 <rand+0x5c>)
 8005bea:	b510      	push	{r4, lr}
 8005bec:	681c      	ldr	r4, [r3, #0]
 8005bee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005bf0:	b9b3      	cbnz	r3, 8005c20 <rand+0x38>
 8005bf2:	2018      	movs	r0, #24
 8005bf4:	f000 fb58 	bl	80062a8 <malloc>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	6320      	str	r0, [r4, #48]	@ 0x30
 8005bfc:	b920      	cbnz	r0, 8005c08 <rand+0x20>
 8005bfe:	4b12      	ldr	r3, [pc, #72]	@ (8005c48 <rand+0x60>)
 8005c00:	4812      	ldr	r0, [pc, #72]	@ (8005c4c <rand+0x64>)
 8005c02:	2152      	movs	r1, #82	@ 0x52
 8005c04:	f000 fae8 	bl	80061d8 <__assert_func>
 8005c08:	4911      	ldr	r1, [pc, #68]	@ (8005c50 <rand+0x68>)
 8005c0a:	4b12      	ldr	r3, [pc, #72]	@ (8005c54 <rand+0x6c>)
 8005c0c:	e9c0 1300 	strd	r1, r3, [r0]
 8005c10:	4b11      	ldr	r3, [pc, #68]	@ (8005c58 <rand+0x70>)
 8005c12:	6083      	str	r3, [r0, #8]
 8005c14:	230b      	movs	r3, #11
 8005c16:	8183      	strh	r3, [r0, #12]
 8005c18:	2100      	movs	r1, #0
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005c20:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005c22:	480e      	ldr	r0, [pc, #56]	@ (8005c5c <rand+0x74>)
 8005c24:	690b      	ldr	r3, [r1, #16]
 8005c26:	694c      	ldr	r4, [r1, #20]
 8005c28:	4a0d      	ldr	r2, [pc, #52]	@ (8005c60 <rand+0x78>)
 8005c2a:	4358      	muls	r0, r3
 8005c2c:	fb02 0004 	mla	r0, r2, r4, r0
 8005c30:	fba3 3202 	umull	r3, r2, r3, r2
 8005c34:	3301      	adds	r3, #1
 8005c36:	eb40 0002 	adc.w	r0, r0, r2
 8005c3a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005c3e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005c42:	bd10      	pop	{r4, pc}
 8005c44:	2000002c 	.word	0x2000002c
 8005c48:	080092ec 	.word	0x080092ec
 8005c4c:	08009303 	.word	0x08009303
 8005c50:	abcd330e 	.word	0xabcd330e
 8005c54:	e66d1234 	.word	0xe66d1234
 8005c58:	0005deec 	.word	0x0005deec
 8005c5c:	5851f42d 	.word	0x5851f42d
 8005c60:	4c957f2d 	.word	0x4c957f2d

08005c64 <std>:
 8005c64:	2300      	movs	r3, #0
 8005c66:	b510      	push	{r4, lr}
 8005c68:	4604      	mov	r4, r0
 8005c6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c72:	6083      	str	r3, [r0, #8]
 8005c74:	8181      	strh	r1, [r0, #12]
 8005c76:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c78:	81c2      	strh	r2, [r0, #14]
 8005c7a:	6183      	str	r3, [r0, #24]
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	2208      	movs	r2, #8
 8005c80:	305c      	adds	r0, #92	@ 0x5c
 8005c82:	f000 fa2d 	bl	80060e0 <memset>
 8005c86:	4b0d      	ldr	r3, [pc, #52]	@ (8005cbc <std+0x58>)
 8005c88:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc0 <std+0x5c>)
 8005c8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc4 <std+0x60>)
 8005c90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c92:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc8 <std+0x64>)
 8005c94:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c96:	4b0d      	ldr	r3, [pc, #52]	@ (8005ccc <std+0x68>)
 8005c98:	6224      	str	r4, [r4, #32]
 8005c9a:	429c      	cmp	r4, r3
 8005c9c:	d006      	beq.n	8005cac <std+0x48>
 8005c9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ca2:	4294      	cmp	r4, r2
 8005ca4:	d002      	beq.n	8005cac <std+0x48>
 8005ca6:	33d0      	adds	r3, #208	@ 0xd0
 8005ca8:	429c      	cmp	r4, r3
 8005caa:	d105      	bne.n	8005cb8 <std+0x54>
 8005cac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb4:	f000 ba8c 	b.w	80061d0 <__retarget_lock_init_recursive>
 8005cb8:	bd10      	pop	{r4, pc}
 8005cba:	bf00      	nop
 8005cbc:	08005f31 	.word	0x08005f31
 8005cc0:	08005f53 	.word	0x08005f53
 8005cc4:	08005f8b 	.word	0x08005f8b
 8005cc8:	08005faf 	.word	0x08005faf
 8005ccc:	20000318 	.word	0x20000318

08005cd0 <stdio_exit_handler>:
 8005cd0:	4a02      	ldr	r2, [pc, #8]	@ (8005cdc <stdio_exit_handler+0xc>)
 8005cd2:	4903      	ldr	r1, [pc, #12]	@ (8005ce0 <stdio_exit_handler+0x10>)
 8005cd4:	4803      	ldr	r0, [pc, #12]	@ (8005ce4 <stdio_exit_handler+0x14>)
 8005cd6:	f000 b869 	b.w	8005dac <_fwalk_sglue>
 8005cda:	bf00      	nop
 8005cdc:	20000020 	.word	0x20000020
 8005ce0:	08006d6d 	.word	0x08006d6d
 8005ce4:	20000030 	.word	0x20000030

08005ce8 <cleanup_stdio>:
 8005ce8:	6841      	ldr	r1, [r0, #4]
 8005cea:	4b0c      	ldr	r3, [pc, #48]	@ (8005d1c <cleanup_stdio+0x34>)
 8005cec:	4299      	cmp	r1, r3
 8005cee:	b510      	push	{r4, lr}
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	d001      	beq.n	8005cf8 <cleanup_stdio+0x10>
 8005cf4:	f001 f83a 	bl	8006d6c <_fflush_r>
 8005cf8:	68a1      	ldr	r1, [r4, #8]
 8005cfa:	4b09      	ldr	r3, [pc, #36]	@ (8005d20 <cleanup_stdio+0x38>)
 8005cfc:	4299      	cmp	r1, r3
 8005cfe:	d002      	beq.n	8005d06 <cleanup_stdio+0x1e>
 8005d00:	4620      	mov	r0, r4
 8005d02:	f001 f833 	bl	8006d6c <_fflush_r>
 8005d06:	68e1      	ldr	r1, [r4, #12]
 8005d08:	4b06      	ldr	r3, [pc, #24]	@ (8005d24 <cleanup_stdio+0x3c>)
 8005d0a:	4299      	cmp	r1, r3
 8005d0c:	d004      	beq.n	8005d18 <cleanup_stdio+0x30>
 8005d0e:	4620      	mov	r0, r4
 8005d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d14:	f001 b82a 	b.w	8006d6c <_fflush_r>
 8005d18:	bd10      	pop	{r4, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000318 	.word	0x20000318
 8005d20:	20000380 	.word	0x20000380
 8005d24:	200003e8 	.word	0x200003e8

08005d28 <global_stdio_init.part.0>:
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d58 <global_stdio_init.part.0+0x30>)
 8005d2c:	4c0b      	ldr	r4, [pc, #44]	@ (8005d5c <global_stdio_init.part.0+0x34>)
 8005d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8005d60 <global_stdio_init.part.0+0x38>)
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	4620      	mov	r0, r4
 8005d34:	2200      	movs	r2, #0
 8005d36:	2104      	movs	r1, #4
 8005d38:	f7ff ff94 	bl	8005c64 <std>
 8005d3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d40:	2201      	movs	r2, #1
 8005d42:	2109      	movs	r1, #9
 8005d44:	f7ff ff8e 	bl	8005c64 <std>
 8005d48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d52:	2112      	movs	r1, #18
 8005d54:	f7ff bf86 	b.w	8005c64 <std>
 8005d58:	20000450 	.word	0x20000450
 8005d5c:	20000318 	.word	0x20000318
 8005d60:	08005cd1 	.word	0x08005cd1

08005d64 <__sfp_lock_acquire>:
 8005d64:	4801      	ldr	r0, [pc, #4]	@ (8005d6c <__sfp_lock_acquire+0x8>)
 8005d66:	f000 ba34 	b.w	80061d2 <__retarget_lock_acquire_recursive>
 8005d6a:	bf00      	nop
 8005d6c:	20000459 	.word	0x20000459

08005d70 <__sfp_lock_release>:
 8005d70:	4801      	ldr	r0, [pc, #4]	@ (8005d78 <__sfp_lock_release+0x8>)
 8005d72:	f000 ba2f 	b.w	80061d4 <__retarget_lock_release_recursive>
 8005d76:	bf00      	nop
 8005d78:	20000459 	.word	0x20000459

08005d7c <__sinit>:
 8005d7c:	b510      	push	{r4, lr}
 8005d7e:	4604      	mov	r4, r0
 8005d80:	f7ff fff0 	bl	8005d64 <__sfp_lock_acquire>
 8005d84:	6a23      	ldr	r3, [r4, #32]
 8005d86:	b11b      	cbz	r3, 8005d90 <__sinit+0x14>
 8005d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d8c:	f7ff bff0 	b.w	8005d70 <__sfp_lock_release>
 8005d90:	4b04      	ldr	r3, [pc, #16]	@ (8005da4 <__sinit+0x28>)
 8005d92:	6223      	str	r3, [r4, #32]
 8005d94:	4b04      	ldr	r3, [pc, #16]	@ (8005da8 <__sinit+0x2c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1f5      	bne.n	8005d88 <__sinit+0xc>
 8005d9c:	f7ff ffc4 	bl	8005d28 <global_stdio_init.part.0>
 8005da0:	e7f2      	b.n	8005d88 <__sinit+0xc>
 8005da2:	bf00      	nop
 8005da4:	08005ce9 	.word	0x08005ce9
 8005da8:	20000450 	.word	0x20000450

08005dac <_fwalk_sglue>:
 8005dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005db0:	4607      	mov	r7, r0
 8005db2:	4688      	mov	r8, r1
 8005db4:	4614      	mov	r4, r2
 8005db6:	2600      	movs	r6, #0
 8005db8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dbc:	f1b9 0901 	subs.w	r9, r9, #1
 8005dc0:	d505      	bpl.n	8005dce <_fwalk_sglue+0x22>
 8005dc2:	6824      	ldr	r4, [r4, #0]
 8005dc4:	2c00      	cmp	r4, #0
 8005dc6:	d1f7      	bne.n	8005db8 <_fwalk_sglue+0xc>
 8005dc8:	4630      	mov	r0, r6
 8005dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dce:	89ab      	ldrh	r3, [r5, #12]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d907      	bls.n	8005de4 <_fwalk_sglue+0x38>
 8005dd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	d003      	beq.n	8005de4 <_fwalk_sglue+0x38>
 8005ddc:	4629      	mov	r1, r5
 8005dde:	4638      	mov	r0, r7
 8005de0:	47c0      	blx	r8
 8005de2:	4306      	orrs	r6, r0
 8005de4:	3568      	adds	r5, #104	@ 0x68
 8005de6:	e7e9      	b.n	8005dbc <_fwalk_sglue+0x10>

08005de8 <iprintf>:
 8005de8:	b40f      	push	{r0, r1, r2, r3}
 8005dea:	b507      	push	{r0, r1, r2, lr}
 8005dec:	4906      	ldr	r1, [pc, #24]	@ (8005e08 <iprintf+0x20>)
 8005dee:	ab04      	add	r3, sp, #16
 8005df0:	6808      	ldr	r0, [r1, #0]
 8005df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005df6:	6881      	ldr	r1, [r0, #8]
 8005df8:	9301      	str	r3, [sp, #4]
 8005dfa:	f000 fc8d 	bl	8006718 <_vfiprintf_r>
 8005dfe:	b003      	add	sp, #12
 8005e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e04:	b004      	add	sp, #16
 8005e06:	4770      	bx	lr
 8005e08:	2000002c 	.word	0x2000002c

08005e0c <_puts_r>:
 8005e0c:	6a03      	ldr	r3, [r0, #32]
 8005e0e:	b570      	push	{r4, r5, r6, lr}
 8005e10:	6884      	ldr	r4, [r0, #8]
 8005e12:	4605      	mov	r5, r0
 8005e14:	460e      	mov	r6, r1
 8005e16:	b90b      	cbnz	r3, 8005e1c <_puts_r+0x10>
 8005e18:	f7ff ffb0 	bl	8005d7c <__sinit>
 8005e1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e1e:	07db      	lsls	r3, r3, #31
 8005e20:	d405      	bmi.n	8005e2e <_puts_r+0x22>
 8005e22:	89a3      	ldrh	r3, [r4, #12]
 8005e24:	0598      	lsls	r0, r3, #22
 8005e26:	d402      	bmi.n	8005e2e <_puts_r+0x22>
 8005e28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e2a:	f000 f9d2 	bl	80061d2 <__retarget_lock_acquire_recursive>
 8005e2e:	89a3      	ldrh	r3, [r4, #12]
 8005e30:	0719      	lsls	r1, r3, #28
 8005e32:	d502      	bpl.n	8005e3a <_puts_r+0x2e>
 8005e34:	6923      	ldr	r3, [r4, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d135      	bne.n	8005ea6 <_puts_r+0x9a>
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	f000 f8f9 	bl	8006034 <__swsetup_r>
 8005e42:	b380      	cbz	r0, 8005ea6 <_puts_r+0x9a>
 8005e44:	f04f 35ff 	mov.w	r5, #4294967295
 8005e48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e4a:	07da      	lsls	r2, r3, #31
 8005e4c:	d405      	bmi.n	8005e5a <_puts_r+0x4e>
 8005e4e:	89a3      	ldrh	r3, [r4, #12]
 8005e50:	059b      	lsls	r3, r3, #22
 8005e52:	d402      	bmi.n	8005e5a <_puts_r+0x4e>
 8005e54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e56:	f000 f9bd 	bl	80061d4 <__retarget_lock_release_recursive>
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	bd70      	pop	{r4, r5, r6, pc}
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	da04      	bge.n	8005e6c <_puts_r+0x60>
 8005e62:	69a2      	ldr	r2, [r4, #24]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	dc17      	bgt.n	8005e98 <_puts_r+0x8c>
 8005e68:	290a      	cmp	r1, #10
 8005e6a:	d015      	beq.n	8005e98 <_puts_r+0x8c>
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	6022      	str	r2, [r4, #0]
 8005e72:	7019      	strb	r1, [r3, #0]
 8005e74:	68a3      	ldr	r3, [r4, #8]
 8005e76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	60a3      	str	r3, [r4, #8]
 8005e7e:	2900      	cmp	r1, #0
 8005e80:	d1ed      	bne.n	8005e5e <_puts_r+0x52>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	da11      	bge.n	8005eaa <_puts_r+0x9e>
 8005e86:	4622      	mov	r2, r4
 8005e88:	210a      	movs	r1, #10
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f000 f893 	bl	8005fb6 <__swbuf_r>
 8005e90:	3001      	adds	r0, #1
 8005e92:	d0d7      	beq.n	8005e44 <_puts_r+0x38>
 8005e94:	250a      	movs	r5, #10
 8005e96:	e7d7      	b.n	8005e48 <_puts_r+0x3c>
 8005e98:	4622      	mov	r2, r4
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	f000 f88b 	bl	8005fb6 <__swbuf_r>
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d1e7      	bne.n	8005e74 <_puts_r+0x68>
 8005ea4:	e7ce      	b.n	8005e44 <_puts_r+0x38>
 8005ea6:	3e01      	subs	r6, #1
 8005ea8:	e7e4      	b.n	8005e74 <_puts_r+0x68>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	6022      	str	r2, [r4, #0]
 8005eb0:	220a      	movs	r2, #10
 8005eb2:	701a      	strb	r2, [r3, #0]
 8005eb4:	e7ee      	b.n	8005e94 <_puts_r+0x88>
	...

08005eb8 <puts>:
 8005eb8:	4b02      	ldr	r3, [pc, #8]	@ (8005ec4 <puts+0xc>)
 8005eba:	4601      	mov	r1, r0
 8005ebc:	6818      	ldr	r0, [r3, #0]
 8005ebe:	f7ff bfa5 	b.w	8005e0c <_puts_r>
 8005ec2:	bf00      	nop
 8005ec4:	2000002c 	.word	0x2000002c

08005ec8 <sniprintf>:
 8005ec8:	b40c      	push	{r2, r3}
 8005eca:	b530      	push	{r4, r5, lr}
 8005ecc:	4b17      	ldr	r3, [pc, #92]	@ (8005f2c <sniprintf+0x64>)
 8005ece:	1e0c      	subs	r4, r1, #0
 8005ed0:	681d      	ldr	r5, [r3, #0]
 8005ed2:	b09d      	sub	sp, #116	@ 0x74
 8005ed4:	da08      	bge.n	8005ee8 <sniprintf+0x20>
 8005ed6:	238b      	movs	r3, #139	@ 0x8b
 8005ed8:	602b      	str	r3, [r5, #0]
 8005eda:	f04f 30ff 	mov.w	r0, #4294967295
 8005ede:	b01d      	add	sp, #116	@ 0x74
 8005ee0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ee4:	b002      	add	sp, #8
 8005ee6:	4770      	bx	lr
 8005ee8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005eec:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ef0:	bf14      	ite	ne
 8005ef2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005ef6:	4623      	moveq	r3, r4
 8005ef8:	9304      	str	r3, [sp, #16]
 8005efa:	9307      	str	r3, [sp, #28]
 8005efc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f00:	9002      	str	r0, [sp, #8]
 8005f02:	9006      	str	r0, [sp, #24]
 8005f04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f08:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005f0a:	ab21      	add	r3, sp, #132	@ 0x84
 8005f0c:	a902      	add	r1, sp, #8
 8005f0e:	4628      	mov	r0, r5
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	f000 fadb 	bl	80064cc <_svfiprintf_r>
 8005f16:	1c43      	adds	r3, r0, #1
 8005f18:	bfbc      	itt	lt
 8005f1a:	238b      	movlt	r3, #139	@ 0x8b
 8005f1c:	602b      	strlt	r3, [r5, #0]
 8005f1e:	2c00      	cmp	r4, #0
 8005f20:	d0dd      	beq.n	8005ede <sniprintf+0x16>
 8005f22:	9b02      	ldr	r3, [sp, #8]
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	e7d9      	b.n	8005ede <sniprintf+0x16>
 8005f2a:	bf00      	nop
 8005f2c:	2000002c 	.word	0x2000002c

08005f30 <__sread>:
 8005f30:	b510      	push	{r4, lr}
 8005f32:	460c      	mov	r4, r1
 8005f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f38:	f000 f8fc 	bl	8006134 <_read_r>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	bfab      	itete	ge
 8005f40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f42:	89a3      	ldrhlt	r3, [r4, #12]
 8005f44:	181b      	addge	r3, r3, r0
 8005f46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f4a:	bfac      	ite	ge
 8005f4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f4e:	81a3      	strhlt	r3, [r4, #12]
 8005f50:	bd10      	pop	{r4, pc}

08005f52 <__swrite>:
 8005f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f56:	461f      	mov	r7, r3
 8005f58:	898b      	ldrh	r3, [r1, #12]
 8005f5a:	05db      	lsls	r3, r3, #23
 8005f5c:	4605      	mov	r5, r0
 8005f5e:	460c      	mov	r4, r1
 8005f60:	4616      	mov	r6, r2
 8005f62:	d505      	bpl.n	8005f70 <__swrite+0x1e>
 8005f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f68:	2302      	movs	r3, #2
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f000 f8d0 	bl	8006110 <_lseek_r>
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f7a:	81a3      	strh	r3, [r4, #12]
 8005f7c:	4632      	mov	r2, r6
 8005f7e:	463b      	mov	r3, r7
 8005f80:	4628      	mov	r0, r5
 8005f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f86:	f000 b8e7 	b.w	8006158 <_write_r>

08005f8a <__sseek>:
 8005f8a:	b510      	push	{r4, lr}
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f92:	f000 f8bd 	bl	8006110 <_lseek_r>
 8005f96:	1c43      	adds	r3, r0, #1
 8005f98:	89a3      	ldrh	r3, [r4, #12]
 8005f9a:	bf15      	itete	ne
 8005f9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005fa2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005fa6:	81a3      	strheq	r3, [r4, #12]
 8005fa8:	bf18      	it	ne
 8005faa:	81a3      	strhne	r3, [r4, #12]
 8005fac:	bd10      	pop	{r4, pc}

08005fae <__sclose>:
 8005fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb2:	f000 b89d 	b.w	80060f0 <_close_r>

08005fb6 <__swbuf_r>:
 8005fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb8:	460e      	mov	r6, r1
 8005fba:	4614      	mov	r4, r2
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	b118      	cbz	r0, 8005fc8 <__swbuf_r+0x12>
 8005fc0:	6a03      	ldr	r3, [r0, #32]
 8005fc2:	b90b      	cbnz	r3, 8005fc8 <__swbuf_r+0x12>
 8005fc4:	f7ff feda 	bl	8005d7c <__sinit>
 8005fc8:	69a3      	ldr	r3, [r4, #24]
 8005fca:	60a3      	str	r3, [r4, #8]
 8005fcc:	89a3      	ldrh	r3, [r4, #12]
 8005fce:	071a      	lsls	r2, r3, #28
 8005fd0:	d501      	bpl.n	8005fd6 <__swbuf_r+0x20>
 8005fd2:	6923      	ldr	r3, [r4, #16]
 8005fd4:	b943      	cbnz	r3, 8005fe8 <__swbuf_r+0x32>
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4628      	mov	r0, r5
 8005fda:	f000 f82b 	bl	8006034 <__swsetup_r>
 8005fde:	b118      	cbz	r0, 8005fe8 <__swbuf_r+0x32>
 8005fe0:	f04f 37ff 	mov.w	r7, #4294967295
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	6922      	ldr	r2, [r4, #16]
 8005fec:	1a98      	subs	r0, r3, r2
 8005fee:	6963      	ldr	r3, [r4, #20]
 8005ff0:	b2f6      	uxtb	r6, r6
 8005ff2:	4283      	cmp	r3, r0
 8005ff4:	4637      	mov	r7, r6
 8005ff6:	dc05      	bgt.n	8006004 <__swbuf_r+0x4e>
 8005ff8:	4621      	mov	r1, r4
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f000 feb6 	bl	8006d6c <_fflush_r>
 8006000:	2800      	cmp	r0, #0
 8006002:	d1ed      	bne.n	8005fe0 <__swbuf_r+0x2a>
 8006004:	68a3      	ldr	r3, [r4, #8]
 8006006:	3b01      	subs	r3, #1
 8006008:	60a3      	str	r3, [r4, #8]
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	6022      	str	r2, [r4, #0]
 8006010:	701e      	strb	r6, [r3, #0]
 8006012:	6962      	ldr	r2, [r4, #20]
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	429a      	cmp	r2, r3
 8006018:	d004      	beq.n	8006024 <__swbuf_r+0x6e>
 800601a:	89a3      	ldrh	r3, [r4, #12]
 800601c:	07db      	lsls	r3, r3, #31
 800601e:	d5e1      	bpl.n	8005fe4 <__swbuf_r+0x2e>
 8006020:	2e0a      	cmp	r6, #10
 8006022:	d1df      	bne.n	8005fe4 <__swbuf_r+0x2e>
 8006024:	4621      	mov	r1, r4
 8006026:	4628      	mov	r0, r5
 8006028:	f000 fea0 	bl	8006d6c <_fflush_r>
 800602c:	2800      	cmp	r0, #0
 800602e:	d0d9      	beq.n	8005fe4 <__swbuf_r+0x2e>
 8006030:	e7d6      	b.n	8005fe0 <__swbuf_r+0x2a>
	...

08006034 <__swsetup_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	4b29      	ldr	r3, [pc, #164]	@ (80060dc <__swsetup_r+0xa8>)
 8006038:	4605      	mov	r5, r0
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	460c      	mov	r4, r1
 800603e:	b118      	cbz	r0, 8006048 <__swsetup_r+0x14>
 8006040:	6a03      	ldr	r3, [r0, #32]
 8006042:	b90b      	cbnz	r3, 8006048 <__swsetup_r+0x14>
 8006044:	f7ff fe9a 	bl	8005d7c <__sinit>
 8006048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800604c:	0719      	lsls	r1, r3, #28
 800604e:	d422      	bmi.n	8006096 <__swsetup_r+0x62>
 8006050:	06da      	lsls	r2, r3, #27
 8006052:	d407      	bmi.n	8006064 <__swsetup_r+0x30>
 8006054:	2209      	movs	r2, #9
 8006056:	602a      	str	r2, [r5, #0]
 8006058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800605c:	81a3      	strh	r3, [r4, #12]
 800605e:	f04f 30ff 	mov.w	r0, #4294967295
 8006062:	e033      	b.n	80060cc <__swsetup_r+0x98>
 8006064:	0758      	lsls	r0, r3, #29
 8006066:	d512      	bpl.n	800608e <__swsetup_r+0x5a>
 8006068:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800606a:	b141      	cbz	r1, 800607e <__swsetup_r+0x4a>
 800606c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006070:	4299      	cmp	r1, r3
 8006072:	d002      	beq.n	800607a <__swsetup_r+0x46>
 8006074:	4628      	mov	r0, r5
 8006076:	f000 f8cd 	bl	8006214 <_free_r>
 800607a:	2300      	movs	r3, #0
 800607c:	6363      	str	r3, [r4, #52]	@ 0x34
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006084:	81a3      	strh	r3, [r4, #12]
 8006086:	2300      	movs	r3, #0
 8006088:	6063      	str	r3, [r4, #4]
 800608a:	6923      	ldr	r3, [r4, #16]
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	89a3      	ldrh	r3, [r4, #12]
 8006090:	f043 0308 	orr.w	r3, r3, #8
 8006094:	81a3      	strh	r3, [r4, #12]
 8006096:	6923      	ldr	r3, [r4, #16]
 8006098:	b94b      	cbnz	r3, 80060ae <__swsetup_r+0x7a>
 800609a:	89a3      	ldrh	r3, [r4, #12]
 800609c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80060a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060a4:	d003      	beq.n	80060ae <__swsetup_r+0x7a>
 80060a6:	4621      	mov	r1, r4
 80060a8:	4628      	mov	r0, r5
 80060aa:	f000 febf 	bl	8006e2c <__smakebuf_r>
 80060ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060b2:	f013 0201 	ands.w	r2, r3, #1
 80060b6:	d00a      	beq.n	80060ce <__swsetup_r+0x9a>
 80060b8:	2200      	movs	r2, #0
 80060ba:	60a2      	str	r2, [r4, #8]
 80060bc:	6962      	ldr	r2, [r4, #20]
 80060be:	4252      	negs	r2, r2
 80060c0:	61a2      	str	r2, [r4, #24]
 80060c2:	6922      	ldr	r2, [r4, #16]
 80060c4:	b942      	cbnz	r2, 80060d8 <__swsetup_r+0xa4>
 80060c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80060ca:	d1c5      	bne.n	8006058 <__swsetup_r+0x24>
 80060cc:	bd38      	pop	{r3, r4, r5, pc}
 80060ce:	0799      	lsls	r1, r3, #30
 80060d0:	bf58      	it	pl
 80060d2:	6962      	ldrpl	r2, [r4, #20]
 80060d4:	60a2      	str	r2, [r4, #8]
 80060d6:	e7f4      	b.n	80060c2 <__swsetup_r+0x8e>
 80060d8:	2000      	movs	r0, #0
 80060da:	e7f7      	b.n	80060cc <__swsetup_r+0x98>
 80060dc:	2000002c 	.word	0x2000002c

080060e0 <memset>:
 80060e0:	4402      	add	r2, r0
 80060e2:	4603      	mov	r3, r0
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d100      	bne.n	80060ea <memset+0xa>
 80060e8:	4770      	bx	lr
 80060ea:	f803 1b01 	strb.w	r1, [r3], #1
 80060ee:	e7f9      	b.n	80060e4 <memset+0x4>

080060f0 <_close_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4d06      	ldr	r5, [pc, #24]	@ (800610c <_close_r+0x1c>)
 80060f4:	2300      	movs	r3, #0
 80060f6:	4604      	mov	r4, r0
 80060f8:	4608      	mov	r0, r1
 80060fa:	602b      	str	r3, [r5, #0]
 80060fc:	f7fb ff42 	bl	8001f84 <_close>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d102      	bne.n	800610a <_close_r+0x1a>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	b103      	cbz	r3, 800610a <_close_r+0x1a>
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	20000454 	.word	0x20000454

08006110 <_lseek_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4d07      	ldr	r5, [pc, #28]	@ (8006130 <_lseek_r+0x20>)
 8006114:	4604      	mov	r4, r0
 8006116:	4608      	mov	r0, r1
 8006118:	4611      	mov	r1, r2
 800611a:	2200      	movs	r2, #0
 800611c:	602a      	str	r2, [r5, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	f7fb ff57 	bl	8001fd2 <_lseek>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_lseek_r+0x1e>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	b103      	cbz	r3, 800612e <_lseek_r+0x1e>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	20000454 	.word	0x20000454

08006134 <_read_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4d07      	ldr	r5, [pc, #28]	@ (8006154 <_read_r+0x20>)
 8006138:	4604      	mov	r4, r0
 800613a:	4608      	mov	r0, r1
 800613c:	4611      	mov	r1, r2
 800613e:	2200      	movs	r2, #0
 8006140:	602a      	str	r2, [r5, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	f7fb ff01 	bl	8001f4a <_read>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d102      	bne.n	8006152 <_read_r+0x1e>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	b103      	cbz	r3, 8006152 <_read_r+0x1e>
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	20000454 	.word	0x20000454

08006158 <_write_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4d07      	ldr	r5, [pc, #28]	@ (8006178 <_write_r+0x20>)
 800615c:	4604      	mov	r4, r0
 800615e:	4608      	mov	r0, r1
 8006160:	4611      	mov	r1, r2
 8006162:	2200      	movs	r2, #0
 8006164:	602a      	str	r2, [r5, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	f7fb fd9e 	bl	8001ca8 <_write>
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	d102      	bne.n	8006176 <_write_r+0x1e>
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	b103      	cbz	r3, 8006176 <_write_r+0x1e>
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	bd38      	pop	{r3, r4, r5, pc}
 8006178:	20000454 	.word	0x20000454

0800617c <__errno>:
 800617c:	4b01      	ldr	r3, [pc, #4]	@ (8006184 <__errno+0x8>)
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	2000002c 	.word	0x2000002c

08006188 <__libc_init_array>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	4d0d      	ldr	r5, [pc, #52]	@ (80061c0 <__libc_init_array+0x38>)
 800618c:	4c0d      	ldr	r4, [pc, #52]	@ (80061c4 <__libc_init_array+0x3c>)
 800618e:	1b64      	subs	r4, r4, r5
 8006190:	10a4      	asrs	r4, r4, #2
 8006192:	2600      	movs	r6, #0
 8006194:	42a6      	cmp	r6, r4
 8006196:	d109      	bne.n	80061ac <__libc_init_array+0x24>
 8006198:	4d0b      	ldr	r5, [pc, #44]	@ (80061c8 <__libc_init_array+0x40>)
 800619a:	4c0c      	ldr	r4, [pc, #48]	@ (80061cc <__libc_init_array+0x44>)
 800619c:	f000 ff5e 	bl	800705c <_init>
 80061a0:	1b64      	subs	r4, r4, r5
 80061a2:	10a4      	asrs	r4, r4, #2
 80061a4:	2600      	movs	r6, #0
 80061a6:	42a6      	cmp	r6, r4
 80061a8:	d105      	bne.n	80061b6 <__libc_init_array+0x2e>
 80061aa:	bd70      	pop	{r4, r5, r6, pc}
 80061ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80061b0:	4798      	blx	r3
 80061b2:	3601      	adds	r6, #1
 80061b4:	e7ee      	b.n	8006194 <__libc_init_array+0xc>
 80061b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ba:	4798      	blx	r3
 80061bc:	3601      	adds	r6, #1
 80061be:	e7f2      	b.n	80061a6 <__libc_init_array+0x1e>
 80061c0:	080093d4 	.word	0x080093d4
 80061c4:	080093d4 	.word	0x080093d4
 80061c8:	080093d4 	.word	0x080093d4
 80061cc:	080093d8 	.word	0x080093d8

080061d0 <__retarget_lock_init_recursive>:
 80061d0:	4770      	bx	lr

080061d2 <__retarget_lock_acquire_recursive>:
 80061d2:	4770      	bx	lr

080061d4 <__retarget_lock_release_recursive>:
 80061d4:	4770      	bx	lr
	...

080061d8 <__assert_func>:
 80061d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061da:	4614      	mov	r4, r2
 80061dc:	461a      	mov	r2, r3
 80061de:	4b09      	ldr	r3, [pc, #36]	@ (8006204 <__assert_func+0x2c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4605      	mov	r5, r0
 80061e4:	68d8      	ldr	r0, [r3, #12]
 80061e6:	b954      	cbnz	r4, 80061fe <__assert_func+0x26>
 80061e8:	4b07      	ldr	r3, [pc, #28]	@ (8006208 <__assert_func+0x30>)
 80061ea:	461c      	mov	r4, r3
 80061ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061f0:	9100      	str	r1, [sp, #0]
 80061f2:	462b      	mov	r3, r5
 80061f4:	4905      	ldr	r1, [pc, #20]	@ (800620c <__assert_func+0x34>)
 80061f6:	f000 fde1 	bl	8006dbc <fiprintf>
 80061fa:	f000 fead 	bl	8006f58 <abort>
 80061fe:	4b04      	ldr	r3, [pc, #16]	@ (8006210 <__assert_func+0x38>)
 8006200:	e7f4      	b.n	80061ec <__assert_func+0x14>
 8006202:	bf00      	nop
 8006204:	2000002c 	.word	0x2000002c
 8006208:	08009396 	.word	0x08009396
 800620c:	08009368 	.word	0x08009368
 8006210:	0800935b 	.word	0x0800935b

08006214 <_free_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4605      	mov	r5, r0
 8006218:	2900      	cmp	r1, #0
 800621a:	d041      	beq.n	80062a0 <_free_r+0x8c>
 800621c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006220:	1f0c      	subs	r4, r1, #4
 8006222:	2b00      	cmp	r3, #0
 8006224:	bfb8      	it	lt
 8006226:	18e4      	addlt	r4, r4, r3
 8006228:	f000 f8e8 	bl	80063fc <__malloc_lock>
 800622c:	4a1d      	ldr	r2, [pc, #116]	@ (80062a4 <_free_r+0x90>)
 800622e:	6813      	ldr	r3, [r2, #0]
 8006230:	b933      	cbnz	r3, 8006240 <_free_r+0x2c>
 8006232:	6063      	str	r3, [r4, #4]
 8006234:	6014      	str	r4, [r2, #0]
 8006236:	4628      	mov	r0, r5
 8006238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800623c:	f000 b8e4 	b.w	8006408 <__malloc_unlock>
 8006240:	42a3      	cmp	r3, r4
 8006242:	d908      	bls.n	8006256 <_free_r+0x42>
 8006244:	6820      	ldr	r0, [r4, #0]
 8006246:	1821      	adds	r1, r4, r0
 8006248:	428b      	cmp	r3, r1
 800624a:	bf01      	itttt	eq
 800624c:	6819      	ldreq	r1, [r3, #0]
 800624e:	685b      	ldreq	r3, [r3, #4]
 8006250:	1809      	addeq	r1, r1, r0
 8006252:	6021      	streq	r1, [r4, #0]
 8006254:	e7ed      	b.n	8006232 <_free_r+0x1e>
 8006256:	461a      	mov	r2, r3
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	b10b      	cbz	r3, 8006260 <_free_r+0x4c>
 800625c:	42a3      	cmp	r3, r4
 800625e:	d9fa      	bls.n	8006256 <_free_r+0x42>
 8006260:	6811      	ldr	r1, [r2, #0]
 8006262:	1850      	adds	r0, r2, r1
 8006264:	42a0      	cmp	r0, r4
 8006266:	d10b      	bne.n	8006280 <_free_r+0x6c>
 8006268:	6820      	ldr	r0, [r4, #0]
 800626a:	4401      	add	r1, r0
 800626c:	1850      	adds	r0, r2, r1
 800626e:	4283      	cmp	r3, r0
 8006270:	6011      	str	r1, [r2, #0]
 8006272:	d1e0      	bne.n	8006236 <_free_r+0x22>
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	6053      	str	r3, [r2, #4]
 800627a:	4408      	add	r0, r1
 800627c:	6010      	str	r0, [r2, #0]
 800627e:	e7da      	b.n	8006236 <_free_r+0x22>
 8006280:	d902      	bls.n	8006288 <_free_r+0x74>
 8006282:	230c      	movs	r3, #12
 8006284:	602b      	str	r3, [r5, #0]
 8006286:	e7d6      	b.n	8006236 <_free_r+0x22>
 8006288:	6820      	ldr	r0, [r4, #0]
 800628a:	1821      	adds	r1, r4, r0
 800628c:	428b      	cmp	r3, r1
 800628e:	bf04      	itt	eq
 8006290:	6819      	ldreq	r1, [r3, #0]
 8006292:	685b      	ldreq	r3, [r3, #4]
 8006294:	6063      	str	r3, [r4, #4]
 8006296:	bf04      	itt	eq
 8006298:	1809      	addeq	r1, r1, r0
 800629a:	6021      	streq	r1, [r4, #0]
 800629c:	6054      	str	r4, [r2, #4]
 800629e:	e7ca      	b.n	8006236 <_free_r+0x22>
 80062a0:	bd38      	pop	{r3, r4, r5, pc}
 80062a2:	bf00      	nop
 80062a4:	20000460 	.word	0x20000460

080062a8 <malloc>:
 80062a8:	4b02      	ldr	r3, [pc, #8]	@ (80062b4 <malloc+0xc>)
 80062aa:	4601      	mov	r1, r0
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	f000 b825 	b.w	80062fc <_malloc_r>
 80062b2:	bf00      	nop
 80062b4:	2000002c 	.word	0x2000002c

080062b8 <sbrk_aligned>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	4e0f      	ldr	r6, [pc, #60]	@ (80062f8 <sbrk_aligned+0x40>)
 80062bc:	460c      	mov	r4, r1
 80062be:	6831      	ldr	r1, [r6, #0]
 80062c0:	4605      	mov	r5, r0
 80062c2:	b911      	cbnz	r1, 80062ca <sbrk_aligned+0x12>
 80062c4:	f000 fe2a 	bl	8006f1c <_sbrk_r>
 80062c8:	6030      	str	r0, [r6, #0]
 80062ca:	4621      	mov	r1, r4
 80062cc:	4628      	mov	r0, r5
 80062ce:	f000 fe25 	bl	8006f1c <_sbrk_r>
 80062d2:	1c43      	adds	r3, r0, #1
 80062d4:	d103      	bne.n	80062de <sbrk_aligned+0x26>
 80062d6:	f04f 34ff 	mov.w	r4, #4294967295
 80062da:	4620      	mov	r0, r4
 80062dc:	bd70      	pop	{r4, r5, r6, pc}
 80062de:	1cc4      	adds	r4, r0, #3
 80062e0:	f024 0403 	bic.w	r4, r4, #3
 80062e4:	42a0      	cmp	r0, r4
 80062e6:	d0f8      	beq.n	80062da <sbrk_aligned+0x22>
 80062e8:	1a21      	subs	r1, r4, r0
 80062ea:	4628      	mov	r0, r5
 80062ec:	f000 fe16 	bl	8006f1c <_sbrk_r>
 80062f0:	3001      	adds	r0, #1
 80062f2:	d1f2      	bne.n	80062da <sbrk_aligned+0x22>
 80062f4:	e7ef      	b.n	80062d6 <sbrk_aligned+0x1e>
 80062f6:	bf00      	nop
 80062f8:	2000045c 	.word	0x2000045c

080062fc <_malloc_r>:
 80062fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006300:	1ccd      	adds	r5, r1, #3
 8006302:	f025 0503 	bic.w	r5, r5, #3
 8006306:	3508      	adds	r5, #8
 8006308:	2d0c      	cmp	r5, #12
 800630a:	bf38      	it	cc
 800630c:	250c      	movcc	r5, #12
 800630e:	2d00      	cmp	r5, #0
 8006310:	4606      	mov	r6, r0
 8006312:	db01      	blt.n	8006318 <_malloc_r+0x1c>
 8006314:	42a9      	cmp	r1, r5
 8006316:	d904      	bls.n	8006322 <_malloc_r+0x26>
 8006318:	230c      	movs	r3, #12
 800631a:	6033      	str	r3, [r6, #0]
 800631c:	2000      	movs	r0, #0
 800631e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063f8 <_malloc_r+0xfc>
 8006326:	f000 f869 	bl	80063fc <__malloc_lock>
 800632a:	f8d8 3000 	ldr.w	r3, [r8]
 800632e:	461c      	mov	r4, r3
 8006330:	bb44      	cbnz	r4, 8006384 <_malloc_r+0x88>
 8006332:	4629      	mov	r1, r5
 8006334:	4630      	mov	r0, r6
 8006336:	f7ff ffbf 	bl	80062b8 <sbrk_aligned>
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	4604      	mov	r4, r0
 800633e:	d158      	bne.n	80063f2 <_malloc_r+0xf6>
 8006340:	f8d8 4000 	ldr.w	r4, [r8]
 8006344:	4627      	mov	r7, r4
 8006346:	2f00      	cmp	r7, #0
 8006348:	d143      	bne.n	80063d2 <_malloc_r+0xd6>
 800634a:	2c00      	cmp	r4, #0
 800634c:	d04b      	beq.n	80063e6 <_malloc_r+0xea>
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	4639      	mov	r1, r7
 8006352:	4630      	mov	r0, r6
 8006354:	eb04 0903 	add.w	r9, r4, r3
 8006358:	f000 fde0 	bl	8006f1c <_sbrk_r>
 800635c:	4581      	cmp	r9, r0
 800635e:	d142      	bne.n	80063e6 <_malloc_r+0xea>
 8006360:	6821      	ldr	r1, [r4, #0]
 8006362:	1a6d      	subs	r5, r5, r1
 8006364:	4629      	mov	r1, r5
 8006366:	4630      	mov	r0, r6
 8006368:	f7ff ffa6 	bl	80062b8 <sbrk_aligned>
 800636c:	3001      	adds	r0, #1
 800636e:	d03a      	beq.n	80063e6 <_malloc_r+0xea>
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	442b      	add	r3, r5
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	f8d8 3000 	ldr.w	r3, [r8]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	bb62      	cbnz	r2, 80063d8 <_malloc_r+0xdc>
 800637e:	f8c8 7000 	str.w	r7, [r8]
 8006382:	e00f      	b.n	80063a4 <_malloc_r+0xa8>
 8006384:	6822      	ldr	r2, [r4, #0]
 8006386:	1b52      	subs	r2, r2, r5
 8006388:	d420      	bmi.n	80063cc <_malloc_r+0xd0>
 800638a:	2a0b      	cmp	r2, #11
 800638c:	d917      	bls.n	80063be <_malloc_r+0xc2>
 800638e:	1961      	adds	r1, r4, r5
 8006390:	42a3      	cmp	r3, r4
 8006392:	6025      	str	r5, [r4, #0]
 8006394:	bf18      	it	ne
 8006396:	6059      	strne	r1, [r3, #4]
 8006398:	6863      	ldr	r3, [r4, #4]
 800639a:	bf08      	it	eq
 800639c:	f8c8 1000 	streq.w	r1, [r8]
 80063a0:	5162      	str	r2, [r4, r5]
 80063a2:	604b      	str	r3, [r1, #4]
 80063a4:	4630      	mov	r0, r6
 80063a6:	f000 f82f 	bl	8006408 <__malloc_unlock>
 80063aa:	f104 000b 	add.w	r0, r4, #11
 80063ae:	1d23      	adds	r3, r4, #4
 80063b0:	f020 0007 	bic.w	r0, r0, #7
 80063b4:	1ac2      	subs	r2, r0, r3
 80063b6:	bf1c      	itt	ne
 80063b8:	1a1b      	subne	r3, r3, r0
 80063ba:	50a3      	strne	r3, [r4, r2]
 80063bc:	e7af      	b.n	800631e <_malloc_r+0x22>
 80063be:	6862      	ldr	r2, [r4, #4]
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	bf0c      	ite	eq
 80063c4:	f8c8 2000 	streq.w	r2, [r8]
 80063c8:	605a      	strne	r2, [r3, #4]
 80063ca:	e7eb      	b.n	80063a4 <_malloc_r+0xa8>
 80063cc:	4623      	mov	r3, r4
 80063ce:	6864      	ldr	r4, [r4, #4]
 80063d0:	e7ae      	b.n	8006330 <_malloc_r+0x34>
 80063d2:	463c      	mov	r4, r7
 80063d4:	687f      	ldr	r7, [r7, #4]
 80063d6:	e7b6      	b.n	8006346 <_malloc_r+0x4a>
 80063d8:	461a      	mov	r2, r3
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	42a3      	cmp	r3, r4
 80063de:	d1fb      	bne.n	80063d8 <_malloc_r+0xdc>
 80063e0:	2300      	movs	r3, #0
 80063e2:	6053      	str	r3, [r2, #4]
 80063e4:	e7de      	b.n	80063a4 <_malloc_r+0xa8>
 80063e6:	230c      	movs	r3, #12
 80063e8:	6033      	str	r3, [r6, #0]
 80063ea:	4630      	mov	r0, r6
 80063ec:	f000 f80c 	bl	8006408 <__malloc_unlock>
 80063f0:	e794      	b.n	800631c <_malloc_r+0x20>
 80063f2:	6005      	str	r5, [r0, #0]
 80063f4:	e7d6      	b.n	80063a4 <_malloc_r+0xa8>
 80063f6:	bf00      	nop
 80063f8:	20000460 	.word	0x20000460

080063fc <__malloc_lock>:
 80063fc:	4801      	ldr	r0, [pc, #4]	@ (8006404 <__malloc_lock+0x8>)
 80063fe:	f7ff bee8 	b.w	80061d2 <__retarget_lock_acquire_recursive>
 8006402:	bf00      	nop
 8006404:	20000458 	.word	0x20000458

08006408 <__malloc_unlock>:
 8006408:	4801      	ldr	r0, [pc, #4]	@ (8006410 <__malloc_unlock+0x8>)
 800640a:	f7ff bee3 	b.w	80061d4 <__retarget_lock_release_recursive>
 800640e:	bf00      	nop
 8006410:	20000458 	.word	0x20000458

08006414 <__ssputs_r>:
 8006414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006418:	688e      	ldr	r6, [r1, #8]
 800641a:	461f      	mov	r7, r3
 800641c:	42be      	cmp	r6, r7
 800641e:	680b      	ldr	r3, [r1, #0]
 8006420:	4682      	mov	sl, r0
 8006422:	460c      	mov	r4, r1
 8006424:	4690      	mov	r8, r2
 8006426:	d82d      	bhi.n	8006484 <__ssputs_r+0x70>
 8006428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800642c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006430:	d026      	beq.n	8006480 <__ssputs_r+0x6c>
 8006432:	6965      	ldr	r5, [r4, #20]
 8006434:	6909      	ldr	r1, [r1, #16]
 8006436:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800643a:	eba3 0901 	sub.w	r9, r3, r1
 800643e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006442:	1c7b      	adds	r3, r7, #1
 8006444:	444b      	add	r3, r9
 8006446:	106d      	asrs	r5, r5, #1
 8006448:	429d      	cmp	r5, r3
 800644a:	bf38      	it	cc
 800644c:	461d      	movcc	r5, r3
 800644e:	0553      	lsls	r3, r2, #21
 8006450:	d527      	bpl.n	80064a2 <__ssputs_r+0x8e>
 8006452:	4629      	mov	r1, r5
 8006454:	f7ff ff52 	bl	80062fc <_malloc_r>
 8006458:	4606      	mov	r6, r0
 800645a:	b360      	cbz	r0, 80064b6 <__ssputs_r+0xa2>
 800645c:	6921      	ldr	r1, [r4, #16]
 800645e:	464a      	mov	r2, r9
 8006460:	f000 fd6c 	bl	8006f3c <memcpy>
 8006464:	89a3      	ldrh	r3, [r4, #12]
 8006466:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800646a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800646e:	81a3      	strh	r3, [r4, #12]
 8006470:	6126      	str	r6, [r4, #16]
 8006472:	6165      	str	r5, [r4, #20]
 8006474:	444e      	add	r6, r9
 8006476:	eba5 0509 	sub.w	r5, r5, r9
 800647a:	6026      	str	r6, [r4, #0]
 800647c:	60a5      	str	r5, [r4, #8]
 800647e:	463e      	mov	r6, r7
 8006480:	42be      	cmp	r6, r7
 8006482:	d900      	bls.n	8006486 <__ssputs_r+0x72>
 8006484:	463e      	mov	r6, r7
 8006486:	6820      	ldr	r0, [r4, #0]
 8006488:	4632      	mov	r2, r6
 800648a:	4641      	mov	r1, r8
 800648c:	f000 fd0a 	bl	8006ea4 <memmove>
 8006490:	68a3      	ldr	r3, [r4, #8]
 8006492:	1b9b      	subs	r3, r3, r6
 8006494:	60a3      	str	r3, [r4, #8]
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	4433      	add	r3, r6
 800649a:	6023      	str	r3, [r4, #0]
 800649c:	2000      	movs	r0, #0
 800649e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a2:	462a      	mov	r2, r5
 80064a4:	f000 fd5f 	bl	8006f66 <_realloc_r>
 80064a8:	4606      	mov	r6, r0
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d1e0      	bne.n	8006470 <__ssputs_r+0x5c>
 80064ae:	6921      	ldr	r1, [r4, #16]
 80064b0:	4650      	mov	r0, sl
 80064b2:	f7ff feaf 	bl	8006214 <_free_r>
 80064b6:	230c      	movs	r3, #12
 80064b8:	f8ca 3000 	str.w	r3, [sl]
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064c2:	81a3      	strh	r3, [r4, #12]
 80064c4:	f04f 30ff 	mov.w	r0, #4294967295
 80064c8:	e7e9      	b.n	800649e <__ssputs_r+0x8a>
	...

080064cc <_svfiprintf_r>:
 80064cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d0:	4698      	mov	r8, r3
 80064d2:	898b      	ldrh	r3, [r1, #12]
 80064d4:	061b      	lsls	r3, r3, #24
 80064d6:	b09d      	sub	sp, #116	@ 0x74
 80064d8:	4607      	mov	r7, r0
 80064da:	460d      	mov	r5, r1
 80064dc:	4614      	mov	r4, r2
 80064de:	d510      	bpl.n	8006502 <_svfiprintf_r+0x36>
 80064e0:	690b      	ldr	r3, [r1, #16]
 80064e2:	b973      	cbnz	r3, 8006502 <_svfiprintf_r+0x36>
 80064e4:	2140      	movs	r1, #64	@ 0x40
 80064e6:	f7ff ff09 	bl	80062fc <_malloc_r>
 80064ea:	6028      	str	r0, [r5, #0]
 80064ec:	6128      	str	r0, [r5, #16]
 80064ee:	b930      	cbnz	r0, 80064fe <_svfiprintf_r+0x32>
 80064f0:	230c      	movs	r3, #12
 80064f2:	603b      	str	r3, [r7, #0]
 80064f4:	f04f 30ff 	mov.w	r0, #4294967295
 80064f8:	b01d      	add	sp, #116	@ 0x74
 80064fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fe:	2340      	movs	r3, #64	@ 0x40
 8006500:	616b      	str	r3, [r5, #20]
 8006502:	2300      	movs	r3, #0
 8006504:	9309      	str	r3, [sp, #36]	@ 0x24
 8006506:	2320      	movs	r3, #32
 8006508:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800650c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006510:	2330      	movs	r3, #48	@ 0x30
 8006512:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80066b0 <_svfiprintf_r+0x1e4>
 8006516:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800651a:	f04f 0901 	mov.w	r9, #1
 800651e:	4623      	mov	r3, r4
 8006520:	469a      	mov	sl, r3
 8006522:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006526:	b10a      	cbz	r2, 800652c <_svfiprintf_r+0x60>
 8006528:	2a25      	cmp	r2, #37	@ 0x25
 800652a:	d1f9      	bne.n	8006520 <_svfiprintf_r+0x54>
 800652c:	ebba 0b04 	subs.w	fp, sl, r4
 8006530:	d00b      	beq.n	800654a <_svfiprintf_r+0x7e>
 8006532:	465b      	mov	r3, fp
 8006534:	4622      	mov	r2, r4
 8006536:	4629      	mov	r1, r5
 8006538:	4638      	mov	r0, r7
 800653a:	f7ff ff6b 	bl	8006414 <__ssputs_r>
 800653e:	3001      	adds	r0, #1
 8006540:	f000 80a7 	beq.w	8006692 <_svfiprintf_r+0x1c6>
 8006544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006546:	445a      	add	r2, fp
 8006548:	9209      	str	r2, [sp, #36]	@ 0x24
 800654a:	f89a 3000 	ldrb.w	r3, [sl]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 809f 	beq.w	8006692 <_svfiprintf_r+0x1c6>
 8006554:	2300      	movs	r3, #0
 8006556:	f04f 32ff 	mov.w	r2, #4294967295
 800655a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800655e:	f10a 0a01 	add.w	sl, sl, #1
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	9307      	str	r3, [sp, #28]
 8006566:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800656a:	931a      	str	r3, [sp, #104]	@ 0x68
 800656c:	4654      	mov	r4, sl
 800656e:	2205      	movs	r2, #5
 8006570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006574:	484e      	ldr	r0, [pc, #312]	@ (80066b0 <_svfiprintf_r+0x1e4>)
 8006576:	f7f9 fe4b 	bl	8000210 <memchr>
 800657a:	9a04      	ldr	r2, [sp, #16]
 800657c:	b9d8      	cbnz	r0, 80065b6 <_svfiprintf_r+0xea>
 800657e:	06d0      	lsls	r0, r2, #27
 8006580:	bf44      	itt	mi
 8006582:	2320      	movmi	r3, #32
 8006584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006588:	0711      	lsls	r1, r2, #28
 800658a:	bf44      	itt	mi
 800658c:	232b      	movmi	r3, #43	@ 0x2b
 800658e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006592:	f89a 3000 	ldrb.w	r3, [sl]
 8006596:	2b2a      	cmp	r3, #42	@ 0x2a
 8006598:	d015      	beq.n	80065c6 <_svfiprintf_r+0xfa>
 800659a:	9a07      	ldr	r2, [sp, #28]
 800659c:	4654      	mov	r4, sl
 800659e:	2000      	movs	r0, #0
 80065a0:	f04f 0c0a 	mov.w	ip, #10
 80065a4:	4621      	mov	r1, r4
 80065a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065aa:	3b30      	subs	r3, #48	@ 0x30
 80065ac:	2b09      	cmp	r3, #9
 80065ae:	d94b      	bls.n	8006648 <_svfiprintf_r+0x17c>
 80065b0:	b1b0      	cbz	r0, 80065e0 <_svfiprintf_r+0x114>
 80065b2:	9207      	str	r2, [sp, #28]
 80065b4:	e014      	b.n	80065e0 <_svfiprintf_r+0x114>
 80065b6:	eba0 0308 	sub.w	r3, r0, r8
 80065ba:	fa09 f303 	lsl.w	r3, r9, r3
 80065be:	4313      	orrs	r3, r2
 80065c0:	9304      	str	r3, [sp, #16]
 80065c2:	46a2      	mov	sl, r4
 80065c4:	e7d2      	b.n	800656c <_svfiprintf_r+0xa0>
 80065c6:	9b03      	ldr	r3, [sp, #12]
 80065c8:	1d19      	adds	r1, r3, #4
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	9103      	str	r1, [sp, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	bfbb      	ittet	lt
 80065d2:	425b      	neglt	r3, r3
 80065d4:	f042 0202 	orrlt.w	r2, r2, #2
 80065d8:	9307      	strge	r3, [sp, #28]
 80065da:	9307      	strlt	r3, [sp, #28]
 80065dc:	bfb8      	it	lt
 80065de:	9204      	strlt	r2, [sp, #16]
 80065e0:	7823      	ldrb	r3, [r4, #0]
 80065e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80065e4:	d10a      	bne.n	80065fc <_svfiprintf_r+0x130>
 80065e6:	7863      	ldrb	r3, [r4, #1]
 80065e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80065ea:	d132      	bne.n	8006652 <_svfiprintf_r+0x186>
 80065ec:	9b03      	ldr	r3, [sp, #12]
 80065ee:	1d1a      	adds	r2, r3, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	9203      	str	r2, [sp, #12]
 80065f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065f8:	3402      	adds	r4, #2
 80065fa:	9305      	str	r3, [sp, #20]
 80065fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80066c0 <_svfiprintf_r+0x1f4>
 8006600:	7821      	ldrb	r1, [r4, #0]
 8006602:	2203      	movs	r2, #3
 8006604:	4650      	mov	r0, sl
 8006606:	f7f9 fe03 	bl	8000210 <memchr>
 800660a:	b138      	cbz	r0, 800661c <_svfiprintf_r+0x150>
 800660c:	9b04      	ldr	r3, [sp, #16]
 800660e:	eba0 000a 	sub.w	r0, r0, sl
 8006612:	2240      	movs	r2, #64	@ 0x40
 8006614:	4082      	lsls	r2, r0
 8006616:	4313      	orrs	r3, r2
 8006618:	3401      	adds	r4, #1
 800661a:	9304      	str	r3, [sp, #16]
 800661c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006620:	4824      	ldr	r0, [pc, #144]	@ (80066b4 <_svfiprintf_r+0x1e8>)
 8006622:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006626:	2206      	movs	r2, #6
 8006628:	f7f9 fdf2 	bl	8000210 <memchr>
 800662c:	2800      	cmp	r0, #0
 800662e:	d036      	beq.n	800669e <_svfiprintf_r+0x1d2>
 8006630:	4b21      	ldr	r3, [pc, #132]	@ (80066b8 <_svfiprintf_r+0x1ec>)
 8006632:	bb1b      	cbnz	r3, 800667c <_svfiprintf_r+0x1b0>
 8006634:	9b03      	ldr	r3, [sp, #12]
 8006636:	3307      	adds	r3, #7
 8006638:	f023 0307 	bic.w	r3, r3, #7
 800663c:	3308      	adds	r3, #8
 800663e:	9303      	str	r3, [sp, #12]
 8006640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006642:	4433      	add	r3, r6
 8006644:	9309      	str	r3, [sp, #36]	@ 0x24
 8006646:	e76a      	b.n	800651e <_svfiprintf_r+0x52>
 8006648:	fb0c 3202 	mla	r2, ip, r2, r3
 800664c:	460c      	mov	r4, r1
 800664e:	2001      	movs	r0, #1
 8006650:	e7a8      	b.n	80065a4 <_svfiprintf_r+0xd8>
 8006652:	2300      	movs	r3, #0
 8006654:	3401      	adds	r4, #1
 8006656:	9305      	str	r3, [sp, #20]
 8006658:	4619      	mov	r1, r3
 800665a:	f04f 0c0a 	mov.w	ip, #10
 800665e:	4620      	mov	r0, r4
 8006660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006664:	3a30      	subs	r2, #48	@ 0x30
 8006666:	2a09      	cmp	r2, #9
 8006668:	d903      	bls.n	8006672 <_svfiprintf_r+0x1a6>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0c6      	beq.n	80065fc <_svfiprintf_r+0x130>
 800666e:	9105      	str	r1, [sp, #20]
 8006670:	e7c4      	b.n	80065fc <_svfiprintf_r+0x130>
 8006672:	fb0c 2101 	mla	r1, ip, r1, r2
 8006676:	4604      	mov	r4, r0
 8006678:	2301      	movs	r3, #1
 800667a:	e7f0      	b.n	800665e <_svfiprintf_r+0x192>
 800667c:	ab03      	add	r3, sp, #12
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	462a      	mov	r2, r5
 8006682:	4b0e      	ldr	r3, [pc, #56]	@ (80066bc <_svfiprintf_r+0x1f0>)
 8006684:	a904      	add	r1, sp, #16
 8006686:	4638      	mov	r0, r7
 8006688:	f3af 8000 	nop.w
 800668c:	1c42      	adds	r2, r0, #1
 800668e:	4606      	mov	r6, r0
 8006690:	d1d6      	bne.n	8006640 <_svfiprintf_r+0x174>
 8006692:	89ab      	ldrh	r3, [r5, #12]
 8006694:	065b      	lsls	r3, r3, #25
 8006696:	f53f af2d 	bmi.w	80064f4 <_svfiprintf_r+0x28>
 800669a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800669c:	e72c      	b.n	80064f8 <_svfiprintf_r+0x2c>
 800669e:	ab03      	add	r3, sp, #12
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	462a      	mov	r2, r5
 80066a4:	4b05      	ldr	r3, [pc, #20]	@ (80066bc <_svfiprintf_r+0x1f0>)
 80066a6:	a904      	add	r1, sp, #16
 80066a8:	4638      	mov	r0, r7
 80066aa:	f000 f9bb 	bl	8006a24 <_printf_i>
 80066ae:	e7ed      	b.n	800668c <_svfiprintf_r+0x1c0>
 80066b0:	08009397 	.word	0x08009397
 80066b4:	080093a1 	.word	0x080093a1
 80066b8:	00000000 	.word	0x00000000
 80066bc:	08006415 	.word	0x08006415
 80066c0:	0800939d 	.word	0x0800939d

080066c4 <__sfputc_r>:
 80066c4:	6893      	ldr	r3, [r2, #8]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	b410      	push	{r4}
 80066cc:	6093      	str	r3, [r2, #8]
 80066ce:	da08      	bge.n	80066e2 <__sfputc_r+0x1e>
 80066d0:	6994      	ldr	r4, [r2, #24]
 80066d2:	42a3      	cmp	r3, r4
 80066d4:	db01      	blt.n	80066da <__sfputc_r+0x16>
 80066d6:	290a      	cmp	r1, #10
 80066d8:	d103      	bne.n	80066e2 <__sfputc_r+0x1e>
 80066da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066de:	f7ff bc6a 	b.w	8005fb6 <__swbuf_r>
 80066e2:	6813      	ldr	r3, [r2, #0]
 80066e4:	1c58      	adds	r0, r3, #1
 80066e6:	6010      	str	r0, [r2, #0]
 80066e8:	7019      	strb	r1, [r3, #0]
 80066ea:	4608      	mov	r0, r1
 80066ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <__sfputs_r>:
 80066f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f4:	4606      	mov	r6, r0
 80066f6:	460f      	mov	r7, r1
 80066f8:	4614      	mov	r4, r2
 80066fa:	18d5      	adds	r5, r2, r3
 80066fc:	42ac      	cmp	r4, r5
 80066fe:	d101      	bne.n	8006704 <__sfputs_r+0x12>
 8006700:	2000      	movs	r0, #0
 8006702:	e007      	b.n	8006714 <__sfputs_r+0x22>
 8006704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006708:	463a      	mov	r2, r7
 800670a:	4630      	mov	r0, r6
 800670c:	f7ff ffda 	bl	80066c4 <__sfputc_r>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d1f3      	bne.n	80066fc <__sfputs_r+0xa>
 8006714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006718 <_vfiprintf_r>:
 8006718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	460d      	mov	r5, r1
 800671e:	b09d      	sub	sp, #116	@ 0x74
 8006720:	4614      	mov	r4, r2
 8006722:	4698      	mov	r8, r3
 8006724:	4606      	mov	r6, r0
 8006726:	b118      	cbz	r0, 8006730 <_vfiprintf_r+0x18>
 8006728:	6a03      	ldr	r3, [r0, #32]
 800672a:	b90b      	cbnz	r3, 8006730 <_vfiprintf_r+0x18>
 800672c:	f7ff fb26 	bl	8005d7c <__sinit>
 8006730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006732:	07d9      	lsls	r1, r3, #31
 8006734:	d405      	bmi.n	8006742 <_vfiprintf_r+0x2a>
 8006736:	89ab      	ldrh	r3, [r5, #12]
 8006738:	059a      	lsls	r2, r3, #22
 800673a:	d402      	bmi.n	8006742 <_vfiprintf_r+0x2a>
 800673c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800673e:	f7ff fd48 	bl	80061d2 <__retarget_lock_acquire_recursive>
 8006742:	89ab      	ldrh	r3, [r5, #12]
 8006744:	071b      	lsls	r3, r3, #28
 8006746:	d501      	bpl.n	800674c <_vfiprintf_r+0x34>
 8006748:	692b      	ldr	r3, [r5, #16]
 800674a:	b99b      	cbnz	r3, 8006774 <_vfiprintf_r+0x5c>
 800674c:	4629      	mov	r1, r5
 800674e:	4630      	mov	r0, r6
 8006750:	f7ff fc70 	bl	8006034 <__swsetup_r>
 8006754:	b170      	cbz	r0, 8006774 <_vfiprintf_r+0x5c>
 8006756:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006758:	07dc      	lsls	r4, r3, #31
 800675a:	d504      	bpl.n	8006766 <_vfiprintf_r+0x4e>
 800675c:	f04f 30ff 	mov.w	r0, #4294967295
 8006760:	b01d      	add	sp, #116	@ 0x74
 8006762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006766:	89ab      	ldrh	r3, [r5, #12]
 8006768:	0598      	lsls	r0, r3, #22
 800676a:	d4f7      	bmi.n	800675c <_vfiprintf_r+0x44>
 800676c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800676e:	f7ff fd31 	bl	80061d4 <__retarget_lock_release_recursive>
 8006772:	e7f3      	b.n	800675c <_vfiprintf_r+0x44>
 8006774:	2300      	movs	r3, #0
 8006776:	9309      	str	r3, [sp, #36]	@ 0x24
 8006778:	2320      	movs	r3, #32
 800677a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800677e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006782:	2330      	movs	r3, #48	@ 0x30
 8006784:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006934 <_vfiprintf_r+0x21c>
 8006788:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800678c:	f04f 0901 	mov.w	r9, #1
 8006790:	4623      	mov	r3, r4
 8006792:	469a      	mov	sl, r3
 8006794:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006798:	b10a      	cbz	r2, 800679e <_vfiprintf_r+0x86>
 800679a:	2a25      	cmp	r2, #37	@ 0x25
 800679c:	d1f9      	bne.n	8006792 <_vfiprintf_r+0x7a>
 800679e:	ebba 0b04 	subs.w	fp, sl, r4
 80067a2:	d00b      	beq.n	80067bc <_vfiprintf_r+0xa4>
 80067a4:	465b      	mov	r3, fp
 80067a6:	4622      	mov	r2, r4
 80067a8:	4629      	mov	r1, r5
 80067aa:	4630      	mov	r0, r6
 80067ac:	f7ff ffa1 	bl	80066f2 <__sfputs_r>
 80067b0:	3001      	adds	r0, #1
 80067b2:	f000 80a7 	beq.w	8006904 <_vfiprintf_r+0x1ec>
 80067b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067b8:	445a      	add	r2, fp
 80067ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80067bc:	f89a 3000 	ldrb.w	r3, [sl]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 809f 	beq.w	8006904 <_vfiprintf_r+0x1ec>
 80067c6:	2300      	movs	r3, #0
 80067c8:	f04f 32ff 	mov.w	r2, #4294967295
 80067cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067d0:	f10a 0a01 	add.w	sl, sl, #1
 80067d4:	9304      	str	r3, [sp, #16]
 80067d6:	9307      	str	r3, [sp, #28]
 80067d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80067de:	4654      	mov	r4, sl
 80067e0:	2205      	movs	r2, #5
 80067e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e6:	4853      	ldr	r0, [pc, #332]	@ (8006934 <_vfiprintf_r+0x21c>)
 80067e8:	f7f9 fd12 	bl	8000210 <memchr>
 80067ec:	9a04      	ldr	r2, [sp, #16]
 80067ee:	b9d8      	cbnz	r0, 8006828 <_vfiprintf_r+0x110>
 80067f0:	06d1      	lsls	r1, r2, #27
 80067f2:	bf44      	itt	mi
 80067f4:	2320      	movmi	r3, #32
 80067f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067fa:	0713      	lsls	r3, r2, #28
 80067fc:	bf44      	itt	mi
 80067fe:	232b      	movmi	r3, #43	@ 0x2b
 8006800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006804:	f89a 3000 	ldrb.w	r3, [sl]
 8006808:	2b2a      	cmp	r3, #42	@ 0x2a
 800680a:	d015      	beq.n	8006838 <_vfiprintf_r+0x120>
 800680c:	9a07      	ldr	r2, [sp, #28]
 800680e:	4654      	mov	r4, sl
 8006810:	2000      	movs	r0, #0
 8006812:	f04f 0c0a 	mov.w	ip, #10
 8006816:	4621      	mov	r1, r4
 8006818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800681c:	3b30      	subs	r3, #48	@ 0x30
 800681e:	2b09      	cmp	r3, #9
 8006820:	d94b      	bls.n	80068ba <_vfiprintf_r+0x1a2>
 8006822:	b1b0      	cbz	r0, 8006852 <_vfiprintf_r+0x13a>
 8006824:	9207      	str	r2, [sp, #28]
 8006826:	e014      	b.n	8006852 <_vfiprintf_r+0x13a>
 8006828:	eba0 0308 	sub.w	r3, r0, r8
 800682c:	fa09 f303 	lsl.w	r3, r9, r3
 8006830:	4313      	orrs	r3, r2
 8006832:	9304      	str	r3, [sp, #16]
 8006834:	46a2      	mov	sl, r4
 8006836:	e7d2      	b.n	80067de <_vfiprintf_r+0xc6>
 8006838:	9b03      	ldr	r3, [sp, #12]
 800683a:	1d19      	adds	r1, r3, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	9103      	str	r1, [sp, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	bfbb      	ittet	lt
 8006844:	425b      	neglt	r3, r3
 8006846:	f042 0202 	orrlt.w	r2, r2, #2
 800684a:	9307      	strge	r3, [sp, #28]
 800684c:	9307      	strlt	r3, [sp, #28]
 800684e:	bfb8      	it	lt
 8006850:	9204      	strlt	r2, [sp, #16]
 8006852:	7823      	ldrb	r3, [r4, #0]
 8006854:	2b2e      	cmp	r3, #46	@ 0x2e
 8006856:	d10a      	bne.n	800686e <_vfiprintf_r+0x156>
 8006858:	7863      	ldrb	r3, [r4, #1]
 800685a:	2b2a      	cmp	r3, #42	@ 0x2a
 800685c:	d132      	bne.n	80068c4 <_vfiprintf_r+0x1ac>
 800685e:	9b03      	ldr	r3, [sp, #12]
 8006860:	1d1a      	adds	r2, r3, #4
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	9203      	str	r2, [sp, #12]
 8006866:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800686a:	3402      	adds	r4, #2
 800686c:	9305      	str	r3, [sp, #20]
 800686e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006944 <_vfiprintf_r+0x22c>
 8006872:	7821      	ldrb	r1, [r4, #0]
 8006874:	2203      	movs	r2, #3
 8006876:	4650      	mov	r0, sl
 8006878:	f7f9 fcca 	bl	8000210 <memchr>
 800687c:	b138      	cbz	r0, 800688e <_vfiprintf_r+0x176>
 800687e:	9b04      	ldr	r3, [sp, #16]
 8006880:	eba0 000a 	sub.w	r0, r0, sl
 8006884:	2240      	movs	r2, #64	@ 0x40
 8006886:	4082      	lsls	r2, r0
 8006888:	4313      	orrs	r3, r2
 800688a:	3401      	adds	r4, #1
 800688c:	9304      	str	r3, [sp, #16]
 800688e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006892:	4829      	ldr	r0, [pc, #164]	@ (8006938 <_vfiprintf_r+0x220>)
 8006894:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006898:	2206      	movs	r2, #6
 800689a:	f7f9 fcb9 	bl	8000210 <memchr>
 800689e:	2800      	cmp	r0, #0
 80068a0:	d03f      	beq.n	8006922 <_vfiprintf_r+0x20a>
 80068a2:	4b26      	ldr	r3, [pc, #152]	@ (800693c <_vfiprintf_r+0x224>)
 80068a4:	bb1b      	cbnz	r3, 80068ee <_vfiprintf_r+0x1d6>
 80068a6:	9b03      	ldr	r3, [sp, #12]
 80068a8:	3307      	adds	r3, #7
 80068aa:	f023 0307 	bic.w	r3, r3, #7
 80068ae:	3308      	adds	r3, #8
 80068b0:	9303      	str	r3, [sp, #12]
 80068b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b4:	443b      	add	r3, r7
 80068b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80068b8:	e76a      	b.n	8006790 <_vfiprintf_r+0x78>
 80068ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80068be:	460c      	mov	r4, r1
 80068c0:	2001      	movs	r0, #1
 80068c2:	e7a8      	b.n	8006816 <_vfiprintf_r+0xfe>
 80068c4:	2300      	movs	r3, #0
 80068c6:	3401      	adds	r4, #1
 80068c8:	9305      	str	r3, [sp, #20]
 80068ca:	4619      	mov	r1, r3
 80068cc:	f04f 0c0a 	mov.w	ip, #10
 80068d0:	4620      	mov	r0, r4
 80068d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068d6:	3a30      	subs	r2, #48	@ 0x30
 80068d8:	2a09      	cmp	r2, #9
 80068da:	d903      	bls.n	80068e4 <_vfiprintf_r+0x1cc>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0c6      	beq.n	800686e <_vfiprintf_r+0x156>
 80068e0:	9105      	str	r1, [sp, #20]
 80068e2:	e7c4      	b.n	800686e <_vfiprintf_r+0x156>
 80068e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80068e8:	4604      	mov	r4, r0
 80068ea:	2301      	movs	r3, #1
 80068ec:	e7f0      	b.n	80068d0 <_vfiprintf_r+0x1b8>
 80068ee:	ab03      	add	r3, sp, #12
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	462a      	mov	r2, r5
 80068f4:	4b12      	ldr	r3, [pc, #72]	@ (8006940 <_vfiprintf_r+0x228>)
 80068f6:	a904      	add	r1, sp, #16
 80068f8:	4630      	mov	r0, r6
 80068fa:	f3af 8000 	nop.w
 80068fe:	4607      	mov	r7, r0
 8006900:	1c78      	adds	r0, r7, #1
 8006902:	d1d6      	bne.n	80068b2 <_vfiprintf_r+0x19a>
 8006904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006906:	07d9      	lsls	r1, r3, #31
 8006908:	d405      	bmi.n	8006916 <_vfiprintf_r+0x1fe>
 800690a:	89ab      	ldrh	r3, [r5, #12]
 800690c:	059a      	lsls	r2, r3, #22
 800690e:	d402      	bmi.n	8006916 <_vfiprintf_r+0x1fe>
 8006910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006912:	f7ff fc5f 	bl	80061d4 <__retarget_lock_release_recursive>
 8006916:	89ab      	ldrh	r3, [r5, #12]
 8006918:	065b      	lsls	r3, r3, #25
 800691a:	f53f af1f 	bmi.w	800675c <_vfiprintf_r+0x44>
 800691e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006920:	e71e      	b.n	8006760 <_vfiprintf_r+0x48>
 8006922:	ab03      	add	r3, sp, #12
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	462a      	mov	r2, r5
 8006928:	4b05      	ldr	r3, [pc, #20]	@ (8006940 <_vfiprintf_r+0x228>)
 800692a:	a904      	add	r1, sp, #16
 800692c:	4630      	mov	r0, r6
 800692e:	f000 f879 	bl	8006a24 <_printf_i>
 8006932:	e7e4      	b.n	80068fe <_vfiprintf_r+0x1e6>
 8006934:	08009397 	.word	0x08009397
 8006938:	080093a1 	.word	0x080093a1
 800693c:	00000000 	.word	0x00000000
 8006940:	080066f3 	.word	0x080066f3
 8006944:	0800939d 	.word	0x0800939d

08006948 <_printf_common>:
 8006948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800694c:	4616      	mov	r6, r2
 800694e:	4698      	mov	r8, r3
 8006950:	688a      	ldr	r2, [r1, #8]
 8006952:	690b      	ldr	r3, [r1, #16]
 8006954:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006958:	4293      	cmp	r3, r2
 800695a:	bfb8      	it	lt
 800695c:	4613      	movlt	r3, r2
 800695e:	6033      	str	r3, [r6, #0]
 8006960:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006964:	4607      	mov	r7, r0
 8006966:	460c      	mov	r4, r1
 8006968:	b10a      	cbz	r2, 800696e <_printf_common+0x26>
 800696a:	3301      	adds	r3, #1
 800696c:	6033      	str	r3, [r6, #0]
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	0699      	lsls	r1, r3, #26
 8006972:	bf42      	ittt	mi
 8006974:	6833      	ldrmi	r3, [r6, #0]
 8006976:	3302      	addmi	r3, #2
 8006978:	6033      	strmi	r3, [r6, #0]
 800697a:	6825      	ldr	r5, [r4, #0]
 800697c:	f015 0506 	ands.w	r5, r5, #6
 8006980:	d106      	bne.n	8006990 <_printf_common+0x48>
 8006982:	f104 0a19 	add.w	sl, r4, #25
 8006986:	68e3      	ldr	r3, [r4, #12]
 8006988:	6832      	ldr	r2, [r6, #0]
 800698a:	1a9b      	subs	r3, r3, r2
 800698c:	42ab      	cmp	r3, r5
 800698e:	dc26      	bgt.n	80069de <_printf_common+0x96>
 8006990:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006994:	6822      	ldr	r2, [r4, #0]
 8006996:	3b00      	subs	r3, #0
 8006998:	bf18      	it	ne
 800699a:	2301      	movne	r3, #1
 800699c:	0692      	lsls	r2, r2, #26
 800699e:	d42b      	bmi.n	80069f8 <_printf_common+0xb0>
 80069a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069a4:	4641      	mov	r1, r8
 80069a6:	4638      	mov	r0, r7
 80069a8:	47c8      	blx	r9
 80069aa:	3001      	adds	r0, #1
 80069ac:	d01e      	beq.n	80069ec <_printf_common+0xa4>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	6922      	ldr	r2, [r4, #16]
 80069b2:	f003 0306 	and.w	r3, r3, #6
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	bf02      	ittt	eq
 80069ba:	68e5      	ldreq	r5, [r4, #12]
 80069bc:	6833      	ldreq	r3, [r6, #0]
 80069be:	1aed      	subeq	r5, r5, r3
 80069c0:	68a3      	ldr	r3, [r4, #8]
 80069c2:	bf0c      	ite	eq
 80069c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069c8:	2500      	movne	r5, #0
 80069ca:	4293      	cmp	r3, r2
 80069cc:	bfc4      	itt	gt
 80069ce:	1a9b      	subgt	r3, r3, r2
 80069d0:	18ed      	addgt	r5, r5, r3
 80069d2:	2600      	movs	r6, #0
 80069d4:	341a      	adds	r4, #26
 80069d6:	42b5      	cmp	r5, r6
 80069d8:	d11a      	bne.n	8006a10 <_printf_common+0xc8>
 80069da:	2000      	movs	r0, #0
 80069dc:	e008      	b.n	80069f0 <_printf_common+0xa8>
 80069de:	2301      	movs	r3, #1
 80069e0:	4652      	mov	r2, sl
 80069e2:	4641      	mov	r1, r8
 80069e4:	4638      	mov	r0, r7
 80069e6:	47c8      	blx	r9
 80069e8:	3001      	adds	r0, #1
 80069ea:	d103      	bne.n	80069f4 <_printf_common+0xac>
 80069ec:	f04f 30ff 	mov.w	r0, #4294967295
 80069f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f4:	3501      	adds	r5, #1
 80069f6:	e7c6      	b.n	8006986 <_printf_common+0x3e>
 80069f8:	18e1      	adds	r1, r4, r3
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	2030      	movs	r0, #48	@ 0x30
 80069fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a02:	4422      	add	r2, r4
 8006a04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a0c:	3302      	adds	r3, #2
 8006a0e:	e7c7      	b.n	80069a0 <_printf_common+0x58>
 8006a10:	2301      	movs	r3, #1
 8006a12:	4622      	mov	r2, r4
 8006a14:	4641      	mov	r1, r8
 8006a16:	4638      	mov	r0, r7
 8006a18:	47c8      	blx	r9
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	d0e6      	beq.n	80069ec <_printf_common+0xa4>
 8006a1e:	3601      	adds	r6, #1
 8006a20:	e7d9      	b.n	80069d6 <_printf_common+0x8e>
	...

08006a24 <_printf_i>:
 8006a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a28:	7e0f      	ldrb	r7, [r1, #24]
 8006a2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a2c:	2f78      	cmp	r7, #120	@ 0x78
 8006a2e:	4691      	mov	r9, r2
 8006a30:	4680      	mov	r8, r0
 8006a32:	460c      	mov	r4, r1
 8006a34:	469a      	mov	sl, r3
 8006a36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a3a:	d807      	bhi.n	8006a4c <_printf_i+0x28>
 8006a3c:	2f62      	cmp	r7, #98	@ 0x62
 8006a3e:	d80a      	bhi.n	8006a56 <_printf_i+0x32>
 8006a40:	2f00      	cmp	r7, #0
 8006a42:	f000 80d2 	beq.w	8006bea <_printf_i+0x1c6>
 8006a46:	2f58      	cmp	r7, #88	@ 0x58
 8006a48:	f000 80b9 	beq.w	8006bbe <_printf_i+0x19a>
 8006a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a54:	e03a      	b.n	8006acc <_printf_i+0xa8>
 8006a56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a5a:	2b15      	cmp	r3, #21
 8006a5c:	d8f6      	bhi.n	8006a4c <_printf_i+0x28>
 8006a5e:	a101      	add	r1, pc, #4	@ (adr r1, 8006a64 <_printf_i+0x40>)
 8006a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a64:	08006abd 	.word	0x08006abd
 8006a68:	08006ad1 	.word	0x08006ad1
 8006a6c:	08006a4d 	.word	0x08006a4d
 8006a70:	08006a4d 	.word	0x08006a4d
 8006a74:	08006a4d 	.word	0x08006a4d
 8006a78:	08006a4d 	.word	0x08006a4d
 8006a7c:	08006ad1 	.word	0x08006ad1
 8006a80:	08006a4d 	.word	0x08006a4d
 8006a84:	08006a4d 	.word	0x08006a4d
 8006a88:	08006a4d 	.word	0x08006a4d
 8006a8c:	08006a4d 	.word	0x08006a4d
 8006a90:	08006bd1 	.word	0x08006bd1
 8006a94:	08006afb 	.word	0x08006afb
 8006a98:	08006b8b 	.word	0x08006b8b
 8006a9c:	08006a4d 	.word	0x08006a4d
 8006aa0:	08006a4d 	.word	0x08006a4d
 8006aa4:	08006bf3 	.word	0x08006bf3
 8006aa8:	08006a4d 	.word	0x08006a4d
 8006aac:	08006afb 	.word	0x08006afb
 8006ab0:	08006a4d 	.word	0x08006a4d
 8006ab4:	08006a4d 	.word	0x08006a4d
 8006ab8:	08006b93 	.word	0x08006b93
 8006abc:	6833      	ldr	r3, [r6, #0]
 8006abe:	1d1a      	adds	r2, r3, #4
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6032      	str	r2, [r6, #0]
 8006ac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ac8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006acc:	2301      	movs	r3, #1
 8006ace:	e09d      	b.n	8006c0c <_printf_i+0x1e8>
 8006ad0:	6833      	ldr	r3, [r6, #0]
 8006ad2:	6820      	ldr	r0, [r4, #0]
 8006ad4:	1d19      	adds	r1, r3, #4
 8006ad6:	6031      	str	r1, [r6, #0]
 8006ad8:	0606      	lsls	r6, r0, #24
 8006ada:	d501      	bpl.n	8006ae0 <_printf_i+0xbc>
 8006adc:	681d      	ldr	r5, [r3, #0]
 8006ade:	e003      	b.n	8006ae8 <_printf_i+0xc4>
 8006ae0:	0645      	lsls	r5, r0, #25
 8006ae2:	d5fb      	bpl.n	8006adc <_printf_i+0xb8>
 8006ae4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ae8:	2d00      	cmp	r5, #0
 8006aea:	da03      	bge.n	8006af4 <_printf_i+0xd0>
 8006aec:	232d      	movs	r3, #45	@ 0x2d
 8006aee:	426d      	negs	r5, r5
 8006af0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006af4:	4859      	ldr	r0, [pc, #356]	@ (8006c5c <_printf_i+0x238>)
 8006af6:	230a      	movs	r3, #10
 8006af8:	e011      	b.n	8006b1e <_printf_i+0xfa>
 8006afa:	6821      	ldr	r1, [r4, #0]
 8006afc:	6833      	ldr	r3, [r6, #0]
 8006afe:	0608      	lsls	r0, r1, #24
 8006b00:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b04:	d402      	bmi.n	8006b0c <_printf_i+0xe8>
 8006b06:	0649      	lsls	r1, r1, #25
 8006b08:	bf48      	it	mi
 8006b0a:	b2ad      	uxthmi	r5, r5
 8006b0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b0e:	4853      	ldr	r0, [pc, #332]	@ (8006c5c <_printf_i+0x238>)
 8006b10:	6033      	str	r3, [r6, #0]
 8006b12:	bf14      	ite	ne
 8006b14:	230a      	movne	r3, #10
 8006b16:	2308      	moveq	r3, #8
 8006b18:	2100      	movs	r1, #0
 8006b1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b1e:	6866      	ldr	r6, [r4, #4]
 8006b20:	60a6      	str	r6, [r4, #8]
 8006b22:	2e00      	cmp	r6, #0
 8006b24:	bfa2      	ittt	ge
 8006b26:	6821      	ldrge	r1, [r4, #0]
 8006b28:	f021 0104 	bicge.w	r1, r1, #4
 8006b2c:	6021      	strge	r1, [r4, #0]
 8006b2e:	b90d      	cbnz	r5, 8006b34 <_printf_i+0x110>
 8006b30:	2e00      	cmp	r6, #0
 8006b32:	d04b      	beq.n	8006bcc <_printf_i+0x1a8>
 8006b34:	4616      	mov	r6, r2
 8006b36:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b3a:	fb03 5711 	mls	r7, r3, r1, r5
 8006b3e:	5dc7      	ldrb	r7, [r0, r7]
 8006b40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b44:	462f      	mov	r7, r5
 8006b46:	42bb      	cmp	r3, r7
 8006b48:	460d      	mov	r5, r1
 8006b4a:	d9f4      	bls.n	8006b36 <_printf_i+0x112>
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d10b      	bne.n	8006b68 <_printf_i+0x144>
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	07df      	lsls	r7, r3, #31
 8006b54:	d508      	bpl.n	8006b68 <_printf_i+0x144>
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	6861      	ldr	r1, [r4, #4]
 8006b5a:	4299      	cmp	r1, r3
 8006b5c:	bfde      	ittt	le
 8006b5e:	2330      	movle	r3, #48	@ 0x30
 8006b60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b68:	1b92      	subs	r2, r2, r6
 8006b6a:	6122      	str	r2, [r4, #16]
 8006b6c:	f8cd a000 	str.w	sl, [sp]
 8006b70:	464b      	mov	r3, r9
 8006b72:	aa03      	add	r2, sp, #12
 8006b74:	4621      	mov	r1, r4
 8006b76:	4640      	mov	r0, r8
 8006b78:	f7ff fee6 	bl	8006948 <_printf_common>
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d14a      	bne.n	8006c16 <_printf_i+0x1f2>
 8006b80:	f04f 30ff 	mov.w	r0, #4294967295
 8006b84:	b004      	add	sp, #16
 8006b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	f043 0320 	orr.w	r3, r3, #32
 8006b90:	6023      	str	r3, [r4, #0]
 8006b92:	4833      	ldr	r0, [pc, #204]	@ (8006c60 <_printf_i+0x23c>)
 8006b94:	2778      	movs	r7, #120	@ 0x78
 8006b96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	6831      	ldr	r1, [r6, #0]
 8006b9e:	061f      	lsls	r7, r3, #24
 8006ba0:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ba4:	d402      	bmi.n	8006bac <_printf_i+0x188>
 8006ba6:	065f      	lsls	r7, r3, #25
 8006ba8:	bf48      	it	mi
 8006baa:	b2ad      	uxthmi	r5, r5
 8006bac:	6031      	str	r1, [r6, #0]
 8006bae:	07d9      	lsls	r1, r3, #31
 8006bb0:	bf44      	itt	mi
 8006bb2:	f043 0320 	orrmi.w	r3, r3, #32
 8006bb6:	6023      	strmi	r3, [r4, #0]
 8006bb8:	b11d      	cbz	r5, 8006bc2 <_printf_i+0x19e>
 8006bba:	2310      	movs	r3, #16
 8006bbc:	e7ac      	b.n	8006b18 <_printf_i+0xf4>
 8006bbe:	4827      	ldr	r0, [pc, #156]	@ (8006c5c <_printf_i+0x238>)
 8006bc0:	e7e9      	b.n	8006b96 <_printf_i+0x172>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	f023 0320 	bic.w	r3, r3, #32
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	e7f6      	b.n	8006bba <_printf_i+0x196>
 8006bcc:	4616      	mov	r6, r2
 8006bce:	e7bd      	b.n	8006b4c <_printf_i+0x128>
 8006bd0:	6833      	ldr	r3, [r6, #0]
 8006bd2:	6825      	ldr	r5, [r4, #0]
 8006bd4:	6961      	ldr	r1, [r4, #20]
 8006bd6:	1d18      	adds	r0, r3, #4
 8006bd8:	6030      	str	r0, [r6, #0]
 8006bda:	062e      	lsls	r6, r5, #24
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	d501      	bpl.n	8006be4 <_printf_i+0x1c0>
 8006be0:	6019      	str	r1, [r3, #0]
 8006be2:	e002      	b.n	8006bea <_printf_i+0x1c6>
 8006be4:	0668      	lsls	r0, r5, #25
 8006be6:	d5fb      	bpl.n	8006be0 <_printf_i+0x1bc>
 8006be8:	8019      	strh	r1, [r3, #0]
 8006bea:	2300      	movs	r3, #0
 8006bec:	6123      	str	r3, [r4, #16]
 8006bee:	4616      	mov	r6, r2
 8006bf0:	e7bc      	b.n	8006b6c <_printf_i+0x148>
 8006bf2:	6833      	ldr	r3, [r6, #0]
 8006bf4:	1d1a      	adds	r2, r3, #4
 8006bf6:	6032      	str	r2, [r6, #0]
 8006bf8:	681e      	ldr	r6, [r3, #0]
 8006bfa:	6862      	ldr	r2, [r4, #4]
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	4630      	mov	r0, r6
 8006c00:	f7f9 fb06 	bl	8000210 <memchr>
 8006c04:	b108      	cbz	r0, 8006c0a <_printf_i+0x1e6>
 8006c06:	1b80      	subs	r0, r0, r6
 8006c08:	6060      	str	r0, [r4, #4]
 8006c0a:	6863      	ldr	r3, [r4, #4]
 8006c0c:	6123      	str	r3, [r4, #16]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c14:	e7aa      	b.n	8006b6c <_printf_i+0x148>
 8006c16:	6923      	ldr	r3, [r4, #16]
 8006c18:	4632      	mov	r2, r6
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	4640      	mov	r0, r8
 8006c1e:	47d0      	blx	sl
 8006c20:	3001      	adds	r0, #1
 8006c22:	d0ad      	beq.n	8006b80 <_printf_i+0x15c>
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	079b      	lsls	r3, r3, #30
 8006c28:	d413      	bmi.n	8006c52 <_printf_i+0x22e>
 8006c2a:	68e0      	ldr	r0, [r4, #12]
 8006c2c:	9b03      	ldr	r3, [sp, #12]
 8006c2e:	4298      	cmp	r0, r3
 8006c30:	bfb8      	it	lt
 8006c32:	4618      	movlt	r0, r3
 8006c34:	e7a6      	b.n	8006b84 <_printf_i+0x160>
 8006c36:	2301      	movs	r3, #1
 8006c38:	4632      	mov	r2, r6
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	4640      	mov	r0, r8
 8006c3e:	47d0      	blx	sl
 8006c40:	3001      	adds	r0, #1
 8006c42:	d09d      	beq.n	8006b80 <_printf_i+0x15c>
 8006c44:	3501      	adds	r5, #1
 8006c46:	68e3      	ldr	r3, [r4, #12]
 8006c48:	9903      	ldr	r1, [sp, #12]
 8006c4a:	1a5b      	subs	r3, r3, r1
 8006c4c:	42ab      	cmp	r3, r5
 8006c4e:	dcf2      	bgt.n	8006c36 <_printf_i+0x212>
 8006c50:	e7eb      	b.n	8006c2a <_printf_i+0x206>
 8006c52:	2500      	movs	r5, #0
 8006c54:	f104 0619 	add.w	r6, r4, #25
 8006c58:	e7f5      	b.n	8006c46 <_printf_i+0x222>
 8006c5a:	bf00      	nop
 8006c5c:	080093a8 	.word	0x080093a8
 8006c60:	080093b9 	.word	0x080093b9

08006c64 <__sflush_r>:
 8006c64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6c:	0716      	lsls	r6, r2, #28
 8006c6e:	4605      	mov	r5, r0
 8006c70:	460c      	mov	r4, r1
 8006c72:	d454      	bmi.n	8006d1e <__sflush_r+0xba>
 8006c74:	684b      	ldr	r3, [r1, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	dc02      	bgt.n	8006c80 <__sflush_r+0x1c>
 8006c7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	dd48      	ble.n	8006d12 <__sflush_r+0xae>
 8006c80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c82:	2e00      	cmp	r6, #0
 8006c84:	d045      	beq.n	8006d12 <__sflush_r+0xae>
 8006c86:	2300      	movs	r3, #0
 8006c88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c8c:	682f      	ldr	r7, [r5, #0]
 8006c8e:	6a21      	ldr	r1, [r4, #32]
 8006c90:	602b      	str	r3, [r5, #0]
 8006c92:	d030      	beq.n	8006cf6 <__sflush_r+0x92>
 8006c94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	0759      	lsls	r1, r3, #29
 8006c9a:	d505      	bpl.n	8006ca8 <__sflush_r+0x44>
 8006c9c:	6863      	ldr	r3, [r4, #4]
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ca2:	b10b      	cbz	r3, 8006ca8 <__sflush_r+0x44>
 8006ca4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ca6:	1ad2      	subs	r2, r2, r3
 8006ca8:	2300      	movs	r3, #0
 8006caa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cac:	6a21      	ldr	r1, [r4, #32]
 8006cae:	4628      	mov	r0, r5
 8006cb0:	47b0      	blx	r6
 8006cb2:	1c43      	adds	r3, r0, #1
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	d106      	bne.n	8006cc6 <__sflush_r+0x62>
 8006cb8:	6829      	ldr	r1, [r5, #0]
 8006cba:	291d      	cmp	r1, #29
 8006cbc:	d82b      	bhi.n	8006d16 <__sflush_r+0xb2>
 8006cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8006d68 <__sflush_r+0x104>)
 8006cc0:	410a      	asrs	r2, r1
 8006cc2:	07d6      	lsls	r6, r2, #31
 8006cc4:	d427      	bmi.n	8006d16 <__sflush_r+0xb2>
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	6062      	str	r2, [r4, #4]
 8006cca:	04d9      	lsls	r1, r3, #19
 8006ccc:	6922      	ldr	r2, [r4, #16]
 8006cce:	6022      	str	r2, [r4, #0]
 8006cd0:	d504      	bpl.n	8006cdc <__sflush_r+0x78>
 8006cd2:	1c42      	adds	r2, r0, #1
 8006cd4:	d101      	bne.n	8006cda <__sflush_r+0x76>
 8006cd6:	682b      	ldr	r3, [r5, #0]
 8006cd8:	b903      	cbnz	r3, 8006cdc <__sflush_r+0x78>
 8006cda:	6560      	str	r0, [r4, #84]	@ 0x54
 8006cdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cde:	602f      	str	r7, [r5, #0]
 8006ce0:	b1b9      	cbz	r1, 8006d12 <__sflush_r+0xae>
 8006ce2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ce6:	4299      	cmp	r1, r3
 8006ce8:	d002      	beq.n	8006cf0 <__sflush_r+0x8c>
 8006cea:	4628      	mov	r0, r5
 8006cec:	f7ff fa92 	bl	8006214 <_free_r>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cf4:	e00d      	b.n	8006d12 <__sflush_r+0xae>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	47b0      	blx	r6
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	1c50      	adds	r0, r2, #1
 8006d00:	d1c9      	bne.n	8006c96 <__sflush_r+0x32>
 8006d02:	682b      	ldr	r3, [r5, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0c6      	beq.n	8006c96 <__sflush_r+0x32>
 8006d08:	2b1d      	cmp	r3, #29
 8006d0a:	d001      	beq.n	8006d10 <__sflush_r+0xac>
 8006d0c:	2b16      	cmp	r3, #22
 8006d0e:	d11e      	bne.n	8006d4e <__sflush_r+0xea>
 8006d10:	602f      	str	r7, [r5, #0]
 8006d12:	2000      	movs	r0, #0
 8006d14:	e022      	b.n	8006d5c <__sflush_r+0xf8>
 8006d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d1a:	b21b      	sxth	r3, r3
 8006d1c:	e01b      	b.n	8006d56 <__sflush_r+0xf2>
 8006d1e:	690f      	ldr	r7, [r1, #16]
 8006d20:	2f00      	cmp	r7, #0
 8006d22:	d0f6      	beq.n	8006d12 <__sflush_r+0xae>
 8006d24:	0793      	lsls	r3, r2, #30
 8006d26:	680e      	ldr	r6, [r1, #0]
 8006d28:	bf08      	it	eq
 8006d2a:	694b      	ldreq	r3, [r1, #20]
 8006d2c:	600f      	str	r7, [r1, #0]
 8006d2e:	bf18      	it	ne
 8006d30:	2300      	movne	r3, #0
 8006d32:	eba6 0807 	sub.w	r8, r6, r7
 8006d36:	608b      	str	r3, [r1, #8]
 8006d38:	f1b8 0f00 	cmp.w	r8, #0
 8006d3c:	dde9      	ble.n	8006d12 <__sflush_r+0xae>
 8006d3e:	6a21      	ldr	r1, [r4, #32]
 8006d40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d42:	4643      	mov	r3, r8
 8006d44:	463a      	mov	r2, r7
 8006d46:	4628      	mov	r0, r5
 8006d48:	47b0      	blx	r6
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	dc08      	bgt.n	8006d60 <__sflush_r+0xfc>
 8006d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d56:	81a3      	strh	r3, [r4, #12]
 8006d58:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d60:	4407      	add	r7, r0
 8006d62:	eba8 0800 	sub.w	r8, r8, r0
 8006d66:	e7e7      	b.n	8006d38 <__sflush_r+0xd4>
 8006d68:	dfbffffe 	.word	0xdfbffffe

08006d6c <_fflush_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	690b      	ldr	r3, [r1, #16]
 8006d70:	4605      	mov	r5, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	b913      	cbnz	r3, 8006d7c <_fflush_r+0x10>
 8006d76:	2500      	movs	r5, #0
 8006d78:	4628      	mov	r0, r5
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	b118      	cbz	r0, 8006d86 <_fflush_r+0x1a>
 8006d7e:	6a03      	ldr	r3, [r0, #32]
 8006d80:	b90b      	cbnz	r3, 8006d86 <_fflush_r+0x1a>
 8006d82:	f7fe fffb 	bl	8005d7c <__sinit>
 8006d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f3      	beq.n	8006d76 <_fflush_r+0xa>
 8006d8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d90:	07d0      	lsls	r0, r2, #31
 8006d92:	d404      	bmi.n	8006d9e <_fflush_r+0x32>
 8006d94:	0599      	lsls	r1, r3, #22
 8006d96:	d402      	bmi.n	8006d9e <_fflush_r+0x32>
 8006d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d9a:	f7ff fa1a 	bl	80061d2 <__retarget_lock_acquire_recursive>
 8006d9e:	4628      	mov	r0, r5
 8006da0:	4621      	mov	r1, r4
 8006da2:	f7ff ff5f 	bl	8006c64 <__sflush_r>
 8006da6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006da8:	07da      	lsls	r2, r3, #31
 8006daa:	4605      	mov	r5, r0
 8006dac:	d4e4      	bmi.n	8006d78 <_fflush_r+0xc>
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	059b      	lsls	r3, r3, #22
 8006db2:	d4e1      	bmi.n	8006d78 <_fflush_r+0xc>
 8006db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006db6:	f7ff fa0d 	bl	80061d4 <__retarget_lock_release_recursive>
 8006dba:	e7dd      	b.n	8006d78 <_fflush_r+0xc>

08006dbc <fiprintf>:
 8006dbc:	b40e      	push	{r1, r2, r3}
 8006dbe:	b503      	push	{r0, r1, lr}
 8006dc0:	4601      	mov	r1, r0
 8006dc2:	ab03      	add	r3, sp, #12
 8006dc4:	4805      	ldr	r0, [pc, #20]	@ (8006ddc <fiprintf+0x20>)
 8006dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dca:	6800      	ldr	r0, [r0, #0]
 8006dcc:	9301      	str	r3, [sp, #4]
 8006dce:	f7ff fca3 	bl	8006718 <_vfiprintf_r>
 8006dd2:	b002      	add	sp, #8
 8006dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dd8:	b003      	add	sp, #12
 8006dda:	4770      	bx	lr
 8006ddc:	2000002c 	.word	0x2000002c

08006de0 <__swhatbuf_r>:
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	460c      	mov	r4, r1
 8006de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de8:	2900      	cmp	r1, #0
 8006dea:	b096      	sub	sp, #88	@ 0x58
 8006dec:	4615      	mov	r5, r2
 8006dee:	461e      	mov	r6, r3
 8006df0:	da0d      	bge.n	8006e0e <__swhatbuf_r+0x2e>
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006df8:	f04f 0100 	mov.w	r1, #0
 8006dfc:	bf14      	ite	ne
 8006dfe:	2340      	movne	r3, #64	@ 0x40
 8006e00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e04:	2000      	movs	r0, #0
 8006e06:	6031      	str	r1, [r6, #0]
 8006e08:	602b      	str	r3, [r5, #0]
 8006e0a:	b016      	add	sp, #88	@ 0x58
 8006e0c:	bd70      	pop	{r4, r5, r6, pc}
 8006e0e:	466a      	mov	r2, sp
 8006e10:	f000 f862 	bl	8006ed8 <_fstat_r>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	dbec      	blt.n	8006df2 <__swhatbuf_r+0x12>
 8006e18:	9901      	ldr	r1, [sp, #4]
 8006e1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e22:	4259      	negs	r1, r3
 8006e24:	4159      	adcs	r1, r3
 8006e26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e2a:	e7eb      	b.n	8006e04 <__swhatbuf_r+0x24>

08006e2c <__smakebuf_r>:
 8006e2c:	898b      	ldrh	r3, [r1, #12]
 8006e2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e30:	079d      	lsls	r5, r3, #30
 8006e32:	4606      	mov	r6, r0
 8006e34:	460c      	mov	r4, r1
 8006e36:	d507      	bpl.n	8006e48 <__smakebuf_r+0x1c>
 8006e38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	6123      	str	r3, [r4, #16]
 8006e40:	2301      	movs	r3, #1
 8006e42:	6163      	str	r3, [r4, #20]
 8006e44:	b003      	add	sp, #12
 8006e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e48:	ab01      	add	r3, sp, #4
 8006e4a:	466a      	mov	r2, sp
 8006e4c:	f7ff ffc8 	bl	8006de0 <__swhatbuf_r>
 8006e50:	9f00      	ldr	r7, [sp, #0]
 8006e52:	4605      	mov	r5, r0
 8006e54:	4639      	mov	r1, r7
 8006e56:	4630      	mov	r0, r6
 8006e58:	f7ff fa50 	bl	80062fc <_malloc_r>
 8006e5c:	b948      	cbnz	r0, 8006e72 <__smakebuf_r+0x46>
 8006e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e62:	059a      	lsls	r2, r3, #22
 8006e64:	d4ee      	bmi.n	8006e44 <__smakebuf_r+0x18>
 8006e66:	f023 0303 	bic.w	r3, r3, #3
 8006e6a:	f043 0302 	orr.w	r3, r3, #2
 8006e6e:	81a3      	strh	r3, [r4, #12]
 8006e70:	e7e2      	b.n	8006e38 <__smakebuf_r+0xc>
 8006e72:	89a3      	ldrh	r3, [r4, #12]
 8006e74:	6020      	str	r0, [r4, #0]
 8006e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e7a:	81a3      	strh	r3, [r4, #12]
 8006e7c:	9b01      	ldr	r3, [sp, #4]
 8006e7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006e82:	b15b      	cbz	r3, 8006e9c <__smakebuf_r+0x70>
 8006e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f000 f837 	bl	8006efc <_isatty_r>
 8006e8e:	b128      	cbz	r0, 8006e9c <__smakebuf_r+0x70>
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	f023 0303 	bic.w	r3, r3, #3
 8006e96:	f043 0301 	orr.w	r3, r3, #1
 8006e9a:	81a3      	strh	r3, [r4, #12]
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	431d      	orrs	r5, r3
 8006ea0:	81a5      	strh	r5, [r4, #12]
 8006ea2:	e7cf      	b.n	8006e44 <__smakebuf_r+0x18>

08006ea4 <memmove>:
 8006ea4:	4288      	cmp	r0, r1
 8006ea6:	b510      	push	{r4, lr}
 8006ea8:	eb01 0402 	add.w	r4, r1, r2
 8006eac:	d902      	bls.n	8006eb4 <memmove+0x10>
 8006eae:	4284      	cmp	r4, r0
 8006eb0:	4623      	mov	r3, r4
 8006eb2:	d807      	bhi.n	8006ec4 <memmove+0x20>
 8006eb4:	1e43      	subs	r3, r0, #1
 8006eb6:	42a1      	cmp	r1, r4
 8006eb8:	d008      	beq.n	8006ecc <memmove+0x28>
 8006eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ec2:	e7f8      	b.n	8006eb6 <memmove+0x12>
 8006ec4:	4402      	add	r2, r0
 8006ec6:	4601      	mov	r1, r0
 8006ec8:	428a      	cmp	r2, r1
 8006eca:	d100      	bne.n	8006ece <memmove+0x2a>
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ed6:	e7f7      	b.n	8006ec8 <memmove+0x24>

08006ed8 <_fstat_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4d07      	ldr	r5, [pc, #28]	@ (8006ef8 <_fstat_r+0x20>)
 8006edc:	2300      	movs	r3, #0
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	602b      	str	r3, [r5, #0]
 8006ee6:	f7fb f859 	bl	8001f9c <_fstat>
 8006eea:	1c43      	adds	r3, r0, #1
 8006eec:	d102      	bne.n	8006ef4 <_fstat_r+0x1c>
 8006eee:	682b      	ldr	r3, [r5, #0]
 8006ef0:	b103      	cbz	r3, 8006ef4 <_fstat_r+0x1c>
 8006ef2:	6023      	str	r3, [r4, #0]
 8006ef4:	bd38      	pop	{r3, r4, r5, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000454 	.word	0x20000454

08006efc <_isatty_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	4d06      	ldr	r5, [pc, #24]	@ (8006f18 <_isatty_r+0x1c>)
 8006f00:	2300      	movs	r3, #0
 8006f02:	4604      	mov	r4, r0
 8006f04:	4608      	mov	r0, r1
 8006f06:	602b      	str	r3, [r5, #0]
 8006f08:	f7fb f858 	bl	8001fbc <_isatty>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_isatty_r+0x1a>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_isatty_r+0x1a>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	20000454 	.word	0x20000454

08006f1c <_sbrk_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4d06      	ldr	r5, [pc, #24]	@ (8006f38 <_sbrk_r+0x1c>)
 8006f20:	2300      	movs	r3, #0
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	602b      	str	r3, [r5, #0]
 8006f28:	f7fb f860 	bl	8001fec <_sbrk>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d102      	bne.n	8006f36 <_sbrk_r+0x1a>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	b103      	cbz	r3, 8006f36 <_sbrk_r+0x1a>
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	bd38      	pop	{r3, r4, r5, pc}
 8006f38:	20000454 	.word	0x20000454

08006f3c <memcpy>:
 8006f3c:	440a      	add	r2, r1
 8006f3e:	4291      	cmp	r1, r2
 8006f40:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f44:	d100      	bne.n	8006f48 <memcpy+0xc>
 8006f46:	4770      	bx	lr
 8006f48:	b510      	push	{r4, lr}
 8006f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f52:	4291      	cmp	r1, r2
 8006f54:	d1f9      	bne.n	8006f4a <memcpy+0xe>
 8006f56:	bd10      	pop	{r4, pc}

08006f58 <abort>:
 8006f58:	b508      	push	{r3, lr}
 8006f5a:	2006      	movs	r0, #6
 8006f5c:	f000 f85a 	bl	8007014 <raise>
 8006f60:	2001      	movs	r0, #1
 8006f62:	f7fa ffe7 	bl	8001f34 <_exit>

08006f66 <_realloc_r>:
 8006f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f6a:	4680      	mov	r8, r0
 8006f6c:	4615      	mov	r5, r2
 8006f6e:	460c      	mov	r4, r1
 8006f70:	b921      	cbnz	r1, 8006f7c <_realloc_r+0x16>
 8006f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f76:	4611      	mov	r1, r2
 8006f78:	f7ff b9c0 	b.w	80062fc <_malloc_r>
 8006f7c:	b92a      	cbnz	r2, 8006f8a <_realloc_r+0x24>
 8006f7e:	f7ff f949 	bl	8006214 <_free_r>
 8006f82:	2400      	movs	r4, #0
 8006f84:	4620      	mov	r0, r4
 8006f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f8a:	f000 f85f 	bl	800704c <_malloc_usable_size_r>
 8006f8e:	4285      	cmp	r5, r0
 8006f90:	4606      	mov	r6, r0
 8006f92:	d802      	bhi.n	8006f9a <_realloc_r+0x34>
 8006f94:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006f98:	d8f4      	bhi.n	8006f84 <_realloc_r+0x1e>
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	f7ff f9ad 	bl	80062fc <_malloc_r>
 8006fa2:	4607      	mov	r7, r0
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d0ec      	beq.n	8006f82 <_realloc_r+0x1c>
 8006fa8:	42b5      	cmp	r5, r6
 8006faa:	462a      	mov	r2, r5
 8006fac:	4621      	mov	r1, r4
 8006fae:	bf28      	it	cs
 8006fb0:	4632      	movcs	r2, r6
 8006fb2:	f7ff ffc3 	bl	8006f3c <memcpy>
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	4640      	mov	r0, r8
 8006fba:	f7ff f92b 	bl	8006214 <_free_r>
 8006fbe:	463c      	mov	r4, r7
 8006fc0:	e7e0      	b.n	8006f84 <_realloc_r+0x1e>

08006fc2 <_raise_r>:
 8006fc2:	291f      	cmp	r1, #31
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4605      	mov	r5, r0
 8006fc8:	460c      	mov	r4, r1
 8006fca:	d904      	bls.n	8006fd6 <_raise_r+0x14>
 8006fcc:	2316      	movs	r3, #22
 8006fce:	6003      	str	r3, [r0, #0]
 8006fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd4:	bd38      	pop	{r3, r4, r5, pc}
 8006fd6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006fd8:	b112      	cbz	r2, 8006fe0 <_raise_r+0x1e>
 8006fda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fde:	b94b      	cbnz	r3, 8006ff4 <_raise_r+0x32>
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f000 f831 	bl	8007048 <_getpid_r>
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	4601      	mov	r1, r0
 8006fea:	4628      	mov	r0, r5
 8006fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ff0:	f000 b818 	b.w	8007024 <_kill_r>
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d00a      	beq.n	800700e <_raise_r+0x4c>
 8006ff8:	1c59      	adds	r1, r3, #1
 8006ffa:	d103      	bne.n	8007004 <_raise_r+0x42>
 8006ffc:	2316      	movs	r3, #22
 8006ffe:	6003      	str	r3, [r0, #0]
 8007000:	2001      	movs	r0, #1
 8007002:	e7e7      	b.n	8006fd4 <_raise_r+0x12>
 8007004:	2100      	movs	r1, #0
 8007006:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800700a:	4620      	mov	r0, r4
 800700c:	4798      	blx	r3
 800700e:	2000      	movs	r0, #0
 8007010:	e7e0      	b.n	8006fd4 <_raise_r+0x12>
	...

08007014 <raise>:
 8007014:	4b02      	ldr	r3, [pc, #8]	@ (8007020 <raise+0xc>)
 8007016:	4601      	mov	r1, r0
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	f7ff bfd2 	b.w	8006fc2 <_raise_r>
 800701e:	bf00      	nop
 8007020:	2000002c 	.word	0x2000002c

08007024 <_kill_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4d07      	ldr	r5, [pc, #28]	@ (8007044 <_kill_r+0x20>)
 8007028:	2300      	movs	r3, #0
 800702a:	4604      	mov	r4, r0
 800702c:	4608      	mov	r0, r1
 800702e:	4611      	mov	r1, r2
 8007030:	602b      	str	r3, [r5, #0]
 8007032:	f7fa ff6f 	bl	8001f14 <_kill>
 8007036:	1c43      	adds	r3, r0, #1
 8007038:	d102      	bne.n	8007040 <_kill_r+0x1c>
 800703a:	682b      	ldr	r3, [r5, #0]
 800703c:	b103      	cbz	r3, 8007040 <_kill_r+0x1c>
 800703e:	6023      	str	r3, [r4, #0]
 8007040:	bd38      	pop	{r3, r4, r5, pc}
 8007042:	bf00      	nop
 8007044:	20000454 	.word	0x20000454

08007048 <_getpid_r>:
 8007048:	f7fa bf5c 	b.w	8001f04 <_getpid>

0800704c <_malloc_usable_size_r>:
 800704c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007050:	1f18      	subs	r0, r3, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	bfbc      	itt	lt
 8007056:	580b      	ldrlt	r3, [r1, r0]
 8007058:	18c0      	addlt	r0, r0, r3
 800705a:	4770      	bx	lr

0800705c <_init>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	bf00      	nop
 8007060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007062:	bc08      	pop	{r3}
 8007064:	469e      	mov	lr, r3
 8007066:	4770      	bx	lr

08007068 <_fini>:
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706a:	bf00      	nop
 800706c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706e:	bc08      	pop	{r3}
 8007070:	469e      	mov	lr, r3
 8007072:	4770      	bx	lr
