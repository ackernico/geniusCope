
trabalhoSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e68  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b34  08008038  08008038  00009038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab6c  0800ab6c  0000c080  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab6c  0800ab6c  0000bb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab74  0800ab74  0000c080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab74  0800ab74  0000bb74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab78  0800ab78  0000bb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800ab7c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000080  0800abfc  0000c080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  0800abfc  0000c470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001717a  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037e4  00000000  00000000  0002322a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  00026a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001063  00000000  00000000  00027f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253de  00000000  00000000  00028f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c2c2  00000000  00000000  0004e359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d871f  00000000  00000000  0006a61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142d3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000635c  00000000  00000000  00142d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  001490dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008020 	.word	0x08008020

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08008020 	.word	0x08008020

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
 80005ba:	460b      	mov	r3, r1
 80005bc:	80bb      	strh	r3, [r7, #4]
 80005be:	4613      	mov	r3, r2
 80005c0:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	88b9      	ldrh	r1, [r7, #4]
 80005c6:	887a      	ldrh	r2, [r7, #2]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fe11 	bl	80011f0 <ST7735_DrawPixel>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80005d6:	b590      	push	{r4, r7, lr}
 80005d8:	b085      	sub	sp, #20
 80005da:	af02      	add	r7, sp, #8
 80005dc:	4604      	mov	r4, r0
 80005de:	4608      	mov	r0, r1
 80005e0:	4611      	mov	r1, r2
 80005e2:	461a      	mov	r2, r3
 80005e4:	4623      	mov	r3, r4
 80005e6:	80fb      	strh	r3, [r7, #6]
 80005e8:	4603      	mov	r3, r0
 80005ea:	80bb      	strh	r3, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	807b      	strh	r3, [r7, #2]
 80005f0:	4613      	mov	r3, r2
 80005f2:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80005f4:	88f8      	ldrh	r0, [r7, #6]
 80005f6:	88b9      	ldrh	r1, [r7, #4]
 80005f8:	887a      	ldrh	r2, [r7, #2]
 80005fa:	883c      	ldrh	r4, [r7, #0]
 80005fc:	8b3b      	ldrh	r3, [r7, #24]
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	4623      	mov	r3, r4
 8000602:	f000 feff 	bl	8001404 <ST7735_FillRectangle>
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bd90      	pop	{r4, r7, pc}

0800060e <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
 8000614:	4603      	mov	r3, r0
 8000616:	80fb      	strh	r3, [r7, #6]
 8000618:	460b      	mov	r3, r1
 800061a:	80bb      	strh	r3, [r7, #4]
 800061c:	4613      	mov	r3, r2
 800061e:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8000620:	887a      	ldrh	r2, [r7, #2]
 8000622:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffc0 	bl	80005b0 <drawPixel>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b089      	sub	sp, #36	@ 0x24
 800063c:	af00      	add	r7, sp, #0
 800063e:	4604      	mov	r4, r0
 8000640:	4608      	mov	r0, r1
 8000642:	4611      	mov	r1, r2
 8000644:	461a      	mov	r2, r3
 8000646:	4623      	mov	r3, r4
 8000648:	80fb      	strh	r3, [r7, #6]
 800064a:	4603      	mov	r3, r0
 800064c:	80bb      	strh	r3, [r7, #4]
 800064e:	460b      	mov	r3, r1
 8000650:	807b      	strh	r3, [r7, #2]
 8000652:	4613      	mov	r3, r2
 8000654:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000656:	f9b7 2000 	ldrsh.w	r2, [r7]
 800065a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000664:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000668:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800066c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000670:	1acb      	subs	r3, r1, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	bfb8      	it	lt
 8000676:	425b      	neglt	r3, r3
 8000678:	429a      	cmp	r2, r3
 800067a:	bfcc      	ite	gt
 800067c:	2301      	movgt	r3, #1
 800067e:	2300      	movle	r3, #0
 8000680:	b2db      	uxtb	r3, r3
 8000682:	837b      	strh	r3, [r7, #26]
    if (steep) {
 8000684:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00b      	beq.n	80006a4 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 800068c:	88fb      	ldrh	r3, [r7, #6]
 800068e:	833b      	strh	r3, [r7, #24]
 8000690:	88bb      	ldrh	r3, [r7, #4]
 8000692:	80fb      	strh	r3, [r7, #6]
 8000694:	8b3b      	ldrh	r3, [r7, #24]
 8000696:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	82fb      	strh	r3, [r7, #22]
 800069c:	883b      	ldrh	r3, [r7, #0]
 800069e:	807b      	strh	r3, [r7, #2]
 80006a0:	8afb      	ldrh	r3, [r7, #22]
 80006a2:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80006a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	dd0b      	ble.n	80006c8 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	82bb      	strh	r3, [r7, #20]
 80006b4:	887b      	ldrh	r3, [r7, #2]
 80006b6:	80fb      	strh	r3, [r7, #6]
 80006b8:	8abb      	ldrh	r3, [r7, #20]
 80006ba:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80006bc:	88bb      	ldrh	r3, [r7, #4]
 80006be:	827b      	strh	r3, [r7, #18]
 80006c0:	883b      	ldrh	r3, [r7, #0]
 80006c2:	80bb      	strh	r3, [r7, #4]
 80006c4:	8a7b      	ldrh	r3, [r7, #18]
 80006c6:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80006c8:	887a      	ldrh	r2, [r7, #2]
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 80006d2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80006d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	bfb8      	it	lt
 80006e0:	425b      	neglt	r3, r3
 80006e2:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 80006e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80006e8:	0fda      	lsrs	r2, r3, #31
 80006ea:	4413      	add	r3, r2
 80006ec:	105b      	asrs	r3, r3, #1
 80006ee:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 80006f0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80006f4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	da02      	bge.n	8000702 <writeLine+0xca>
        ystep = 1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	83bb      	strh	r3, [r7, #28]
 8000700:	e031      	b.n	8000766 <writeLine+0x12e>
    } else {
        ystep = -1;
 8000702:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000706:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8000708:	e02d      	b.n	8000766 <writeLine+0x12e>
        if (steep) {
 800070a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d008      	beq.n	8000724 <writeLine+0xec>
            writePixel(y0, x0, color);
 8000712:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000714:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000718:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff76 	bl	800060e <writePixel>
 8000722:	e007      	b.n	8000734 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8000724:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000726:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800072a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff6d 	bl	800060e <writePixel>
        }
        err -= dy;
 8000734:	8bfa      	ldrh	r2, [r7, #30]
 8000736:	89fb      	ldrh	r3, [r7, #14]
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	b29b      	uxth	r3, r3
 800073c:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 800073e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000742:	2b00      	cmp	r3, #0
 8000744:	da09      	bge.n	800075a <writeLine+0x122>
            y0 += ystep;
 8000746:	88ba      	ldrh	r2, [r7, #4]
 8000748:	8bbb      	ldrh	r3, [r7, #28]
 800074a:	4413      	add	r3, r2
 800074c:	b29b      	uxth	r3, r3
 800074e:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8000750:	8bfa      	ldrh	r2, [r7, #30]
 8000752:	8a3b      	ldrh	r3, [r7, #16]
 8000754:	4413      	add	r3, r2
 8000756:	b29b      	uxth	r3, r3
 8000758:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 800075a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800075e:	b29b      	uxth	r3, r3
 8000760:	3301      	adds	r3, #1
 8000762:	b29b      	uxth	r3, r3
 8000764:	80fb      	strh	r3, [r7, #6]
 8000766:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800076a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800076e:	429a      	cmp	r2, r3
 8000770:	ddcb      	ble.n	800070a <writeLine+0xd2>
        }
    }
}
 8000772:	bf00      	nop
 8000774:	bf00      	nop
 8000776:	3724      	adds	r7, #36	@ 0x24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd90      	pop	{r4, r7, pc}

0800077c <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b085      	sub	sp, #20
 8000780:	af02      	add	r7, sp, #8
 8000782:	4604      	mov	r4, r0
 8000784:	4608      	mov	r0, r1
 8000786:	4611      	mov	r1, r2
 8000788:	461a      	mov	r2, r3
 800078a:	4623      	mov	r3, r4
 800078c:	80fb      	strh	r3, [r7, #6]
 800078e:	4603      	mov	r3, r0
 8000790:	80bb      	strh	r3, [r7, #4]
 8000792:	460b      	mov	r3, r1
 8000794:	807b      	strh	r3, [r7, #2]
 8000796:	4613      	mov	r3, r2
 8000798:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 800079a:	88ba      	ldrh	r2, [r7, #4]
 800079c:	887b      	ldrh	r3, [r7, #2]
 800079e:	4413      	add	r3, r2
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	3b01      	subs	r3, #1
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	b21c      	sxth	r4, r3
 80007a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007ac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007b0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007b4:	883b      	ldrh	r3, [r7, #0]
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	4623      	mov	r3, r4
 80007ba:	f7ff ff3d 	bl	8000638 <writeLine>
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd90      	pop	{r4, r7, pc}

080007c6 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80007c6:	b590      	push	{r4, r7, lr}
 80007c8:	b085      	sub	sp, #20
 80007ca:	af02      	add	r7, sp, #8
 80007cc:	4604      	mov	r4, r0
 80007ce:	4608      	mov	r0, r1
 80007d0:	4611      	mov	r1, r2
 80007d2:	461a      	mov	r2, r3
 80007d4:	4623      	mov	r3, r4
 80007d6:	80fb      	strh	r3, [r7, #6]
 80007d8:	4603      	mov	r3, r0
 80007da:	80bb      	strh	r3, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	807b      	strh	r3, [r7, #2]
 80007e0:	4613      	mov	r3, r2
 80007e2:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 80007e4:	88fa      	ldrh	r2, [r7, #6]
 80007e6:	887b      	ldrh	r3, [r7, #2]
 80007e8:	4413      	add	r3, r2
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	3b01      	subs	r3, #1
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80007f6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007fa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007fe:	883b      	ldrh	r3, [r7, #0]
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	4623      	mov	r3, r4
 8000804:	f7ff ff18 	bl	8000638 <writeLine>
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bd90      	pop	{r4, r7, pc}

08000810 <drawCircle>:
        writeLine(x0, y0, x1, y1, color);
    }
}

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	4604      	mov	r4, r0
 8000818:	4608      	mov	r0, r1
 800081a:	4611      	mov	r1, r2
 800081c:	461a      	mov	r2, r3
 800081e:	4623      	mov	r3, r4
 8000820:	80fb      	strh	r3, [r7, #6]
 8000822:	4603      	mov	r3, r0
 8000824:	80bb      	strh	r3, [r7, #4]
 8000826:	460b      	mov	r3, r1
 8000828:	807b      	strh	r3, [r7, #2]
 800082a:	4613      	mov	r3, r2
 800082c:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800082e:	887b      	ldrh	r3, [r7, #2]
 8000830:	f1c3 0301 	rsb	r3, r3, #1
 8000834:	b29b      	uxth	r3, r3
 8000836:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800083c:	887b      	ldrh	r3, [r7, #2]
 800083e:	461a      	mov	r2, r3
 8000840:	03d2      	lsls	r2, r2, #15
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	b29b      	uxth	r3, r3
 8000848:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800084e:	887b      	ldrh	r3, [r7, #2]
 8000850:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 8000852:	88ba      	ldrh	r2, [r7, #4]
 8000854:	887b      	ldrh	r3, [r7, #2]
 8000856:	4413      	add	r3, r2
 8000858:	b29b      	uxth	r3, r3
 800085a:	b219      	sxth	r1, r3
 800085c:	883a      	ldrh	r2, [r7, #0]
 800085e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fed3 	bl	800060e <writePixel>
    writePixel(x0  , y0-r, color);
 8000868:	88ba      	ldrh	r2, [r7, #4]
 800086a:	887b      	ldrh	r3, [r7, #2]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	b29b      	uxth	r3, r3
 8000870:	b219      	sxth	r1, r3
 8000872:	883a      	ldrh	r2, [r7, #0]
 8000874:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fec8 	bl	800060e <writePixel>
    writePixel(x0+r, y0  , color);
 800087e:	88fa      	ldrh	r2, [r7, #6]
 8000880:	887b      	ldrh	r3, [r7, #2]
 8000882:	4413      	add	r3, r2
 8000884:	b29b      	uxth	r3, r3
 8000886:	b21b      	sxth	r3, r3
 8000888:	883a      	ldrh	r2, [r7, #0]
 800088a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff febd 	bl	800060e <writePixel>
    writePixel(x0-r, y0  , color);
 8000894:	88fa      	ldrh	r2, [r7, #6]
 8000896:	887b      	ldrh	r3, [r7, #2]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	b29b      	uxth	r3, r3
 800089c:	b21b      	sxth	r3, r3
 800089e:	883a      	ldrh	r2, [r7, #0]
 80008a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff feb2 	bl	800060e <writePixel>

    while (x<y) {
 80008aa:	e091      	b.n	80009d0 <drawCircle+0x1c0>
        if (f >= 0) {
 80008ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	db0e      	blt.n	80008d2 <drawCircle+0xc2>
            y--;
 80008b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	3b01      	subs	r3, #1
 80008bc:	b29b      	uxth	r3, r3
 80008be:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80008c0:	8a7b      	ldrh	r3, [r7, #18]
 80008c2:	3302      	adds	r3, #2
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80008c8:	8afa      	ldrh	r2, [r7, #22]
 80008ca:	8a7b      	ldrh	r3, [r7, #18]
 80008cc:	4413      	add	r3, r2
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80008d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	3301      	adds	r3, #1
 80008da:	b29b      	uxth	r3, r3
 80008dc:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80008de:	8abb      	ldrh	r3, [r7, #20]
 80008e0:	3302      	adds	r3, #2
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80008e6:	8afa      	ldrh	r2, [r7, #22]
 80008e8:	8abb      	ldrh	r3, [r7, #20]
 80008ea:	4413      	add	r3, r2
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 80008f0:	88fa      	ldrh	r2, [r7, #6]
 80008f2:	8a3b      	ldrh	r3, [r7, #16]
 80008f4:	4413      	add	r3, r2
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	b218      	sxth	r0, r3
 80008fa:	88ba      	ldrh	r2, [r7, #4]
 80008fc:	89fb      	ldrh	r3, [r7, #14]
 80008fe:	4413      	add	r3, r2
 8000900:	b29b      	uxth	r3, r3
 8000902:	b21b      	sxth	r3, r3
 8000904:	883a      	ldrh	r2, [r7, #0]
 8000906:	4619      	mov	r1, r3
 8000908:	f7ff fe81 	bl	800060e <writePixel>
        writePixel(x0 - x, y0 + y, color);
 800090c:	88fa      	ldrh	r2, [r7, #6]
 800090e:	8a3b      	ldrh	r3, [r7, #16]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	b29b      	uxth	r3, r3
 8000914:	b218      	sxth	r0, r3
 8000916:	88ba      	ldrh	r2, [r7, #4]
 8000918:	89fb      	ldrh	r3, [r7, #14]
 800091a:	4413      	add	r3, r2
 800091c:	b29b      	uxth	r3, r3
 800091e:	b21b      	sxth	r3, r3
 8000920:	883a      	ldrh	r2, [r7, #0]
 8000922:	4619      	mov	r1, r3
 8000924:	f7ff fe73 	bl	800060e <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8000928:	88fa      	ldrh	r2, [r7, #6]
 800092a:	8a3b      	ldrh	r3, [r7, #16]
 800092c:	4413      	add	r3, r2
 800092e:	b29b      	uxth	r3, r3
 8000930:	b218      	sxth	r0, r3
 8000932:	88ba      	ldrh	r2, [r7, #4]
 8000934:	89fb      	ldrh	r3, [r7, #14]
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	b29b      	uxth	r3, r3
 800093a:	b21b      	sxth	r3, r3
 800093c:	883a      	ldrh	r2, [r7, #0]
 800093e:	4619      	mov	r1, r3
 8000940:	f7ff fe65 	bl	800060e <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8000944:	88fa      	ldrh	r2, [r7, #6]
 8000946:	8a3b      	ldrh	r3, [r7, #16]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	b29b      	uxth	r3, r3
 800094c:	b218      	sxth	r0, r3
 800094e:	88ba      	ldrh	r2, [r7, #4]
 8000950:	89fb      	ldrh	r3, [r7, #14]
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	b29b      	uxth	r3, r3
 8000956:	b21b      	sxth	r3, r3
 8000958:	883a      	ldrh	r2, [r7, #0]
 800095a:	4619      	mov	r1, r3
 800095c:	f7ff fe57 	bl	800060e <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8000960:	88fa      	ldrh	r2, [r7, #6]
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	4413      	add	r3, r2
 8000966:	b29b      	uxth	r3, r3
 8000968:	b218      	sxth	r0, r3
 800096a:	88ba      	ldrh	r2, [r7, #4]
 800096c:	8a3b      	ldrh	r3, [r7, #16]
 800096e:	4413      	add	r3, r2
 8000970:	b29b      	uxth	r3, r3
 8000972:	b21b      	sxth	r3, r3
 8000974:	883a      	ldrh	r2, [r7, #0]
 8000976:	4619      	mov	r1, r3
 8000978:	f7ff fe49 	bl	800060e <writePixel>
        writePixel(x0 - y, y0 + x, color);
 800097c:	88fa      	ldrh	r2, [r7, #6]
 800097e:	89fb      	ldrh	r3, [r7, #14]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	b29b      	uxth	r3, r3
 8000984:	b218      	sxth	r0, r3
 8000986:	88ba      	ldrh	r2, [r7, #4]
 8000988:	8a3b      	ldrh	r3, [r7, #16]
 800098a:	4413      	add	r3, r2
 800098c:	b29b      	uxth	r3, r3
 800098e:	b21b      	sxth	r3, r3
 8000990:	883a      	ldrh	r2, [r7, #0]
 8000992:	4619      	mov	r1, r3
 8000994:	f7ff fe3b 	bl	800060e <writePixel>
        writePixel(x0 + y, y0 - x, color);
 8000998:	88fa      	ldrh	r2, [r7, #6]
 800099a:	89fb      	ldrh	r3, [r7, #14]
 800099c:	4413      	add	r3, r2
 800099e:	b29b      	uxth	r3, r3
 80009a0:	b218      	sxth	r0, r3
 80009a2:	88ba      	ldrh	r2, [r7, #4]
 80009a4:	8a3b      	ldrh	r3, [r7, #16]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	883a      	ldrh	r2, [r7, #0]
 80009ae:	4619      	mov	r1, r3
 80009b0:	f7ff fe2d 	bl	800060e <writePixel>
        writePixel(x0 - y, y0 - x, color);
 80009b4:	88fa      	ldrh	r2, [r7, #6]
 80009b6:	89fb      	ldrh	r3, [r7, #14]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	b218      	sxth	r0, r3
 80009be:	88ba      	ldrh	r2, [r7, #4]
 80009c0:	8a3b      	ldrh	r3, [r7, #16]
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	b21b      	sxth	r3, r3
 80009c8:	883a      	ldrh	r2, [r7, #0]
 80009ca:	4619      	mov	r1, r3
 80009cc:	f7ff fe1f 	bl	800060e <writePixel>
    while (x<y) {
 80009d0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80009d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009d8:	429a      	cmp	r2, r3
 80009da:	f6ff af67 	blt.w	80008ac <drawCircle+0x9c>
    }
}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	371c      	adds	r7, #28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd90      	pop	{r4, r7, pc}

080009e8 <fillCircleHelper>:
        }
    }
}

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b087      	sub	sp, #28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4604      	mov	r4, r0
 80009f0:	4608      	mov	r0, r1
 80009f2:	4611      	mov	r1, r2
 80009f4:	461a      	mov	r2, r3
 80009f6:	4623      	mov	r3, r4
 80009f8:	80fb      	strh	r3, [r7, #6]
 80009fa:	4603      	mov	r3, r0
 80009fc:	80bb      	strh	r3, [r7, #4]
 80009fe:	460b      	mov	r3, r1
 8000a00:	807b      	strh	r3, [r7, #2]
 8000a02:	4613      	mov	r3, r2
 8000a04:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8000a06:	887b      	ldrh	r3, [r7, #2]
 8000a08:	f1c3 0301 	rsb	r3, r3, #1
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000a14:	887b      	ldrh	r3, [r7, #2]
 8000a16:	461a      	mov	r2, r3
 8000a18:	03d2      	lsls	r2, r2, #15
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8000a26:	887b      	ldrh	r3, [r7, #2]
 8000a28:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8000a2a:	8a3b      	ldrh	r3, [r7, #16]
 8000a2c:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8000a2e:	89fb      	ldrh	r3, [r7, #14]
 8000a30:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8000a32:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	853b      	strh	r3, [r7, #40]	@ 0x28

    while(x < y) {
 8000a3e:	e095      	b.n	8000b6c <fillCircleHelper+0x184>
        if (f >= 0) {
 8000a40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db0e      	blt.n	8000a66 <fillCircleHelper+0x7e>
            y--;
 8000a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000a54:	8a7b      	ldrh	r3, [r7, #18]
 8000a56:	3302      	adds	r3, #2
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000a5c:	8afa      	ldrh	r2, [r7, #22]
 8000a5e:	8a7b      	ldrh	r3, [r7, #18]
 8000a60:	4413      	add	r3, r2
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000a66:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000a72:	8abb      	ldrh	r3, [r7, #20]
 8000a74:	3302      	adds	r3, #2
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8000a7a:	8afa      	ldrh	r2, [r7, #22]
 8000a7c:	8abb      	ldrh	r3, [r7, #20]
 8000a7e:	4413      	add	r3, r2
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8000a84:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a88:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	db31      	blt.n	8000af4 <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8000a90:	787b      	ldrb	r3, [r7, #1]
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d013      	beq.n	8000ac2 <fillCircleHelper+0xda>
 8000a9a:	88fa      	ldrh	r2, [r7, #6]
 8000a9c:	8a3b      	ldrh	r3, [r7, #16]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	b218      	sxth	r0, r3
 8000aa4:	88ba      	ldrh	r2, [r7, #4]
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	b219      	sxth	r1, r3
 8000aae:	89fb      	ldrh	r3, [r7, #14]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000ab6:	4413      	add	r3, r2
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000abe:	f7ff fe5d 	bl	800077c <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8000ac2:	787b      	ldrb	r3, [r7, #1]
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d013      	beq.n	8000af4 <fillCircleHelper+0x10c>
 8000acc:	88fa      	ldrh	r2, [r7, #6]
 8000ace:	8a3b      	ldrh	r3, [r7, #16]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	b218      	sxth	r0, r3
 8000ad6:	88ba      	ldrh	r2, [r7, #4]
 8000ad8:	89fb      	ldrh	r3, [r7, #14]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	b219      	sxth	r1, r3
 8000ae0:	89fb      	ldrh	r3, [r7, #14]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000ae8:	4413      	add	r3, r2
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	b21a      	sxth	r2, r3
 8000aee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000af0:	f7ff fe44 	bl	800077c <drawFastVLine>
        }
        if(y != py) {
 8000af4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000af8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d033      	beq.n	8000b68 <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8000b00:	787b      	ldrb	r3, [r7, #1]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d013      	beq.n	8000b32 <fillCircleHelper+0x14a>
 8000b0a:	88fa      	ldrh	r2, [r7, #6]
 8000b0c:	897b      	ldrh	r3, [r7, #10]
 8000b0e:	4413      	add	r3, r2
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	b218      	sxth	r0, r3
 8000b14:	88ba      	ldrh	r2, [r7, #4]
 8000b16:	89bb      	ldrh	r3, [r7, #12]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	b219      	sxth	r1, r3
 8000b1e:	89bb      	ldrh	r3, [r7, #12]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b26:	4413      	add	r3, r2
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	b21a      	sxth	r2, r3
 8000b2c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000b2e:	f7ff fe25 	bl	800077c <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8000b32:	787b      	ldrb	r3, [r7, #1]
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d013      	beq.n	8000b64 <fillCircleHelper+0x17c>
 8000b3c:	88fa      	ldrh	r2, [r7, #6]
 8000b3e:	897b      	ldrh	r3, [r7, #10]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	b218      	sxth	r0, r3
 8000b46:	88ba      	ldrh	r2, [r7, #4]
 8000b48:	89bb      	ldrh	r3, [r7, #12]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b219      	sxth	r1, r3
 8000b50:	89bb      	ldrh	r3, [r7, #12]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b58:	4413      	add	r3, r2
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	b21a      	sxth	r2, r3
 8000b5e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000b60:	f7ff fe0c 	bl	800077c <drawFastVLine>
            py = y;
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8000b68:	8a3b      	ldrh	r3, [r7, #16]
 8000b6a:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8000b6c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000b70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	f6ff af63 	blt.w	8000a40 <fillCircleHelper+0x58>
    }
}
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	371c      	adds	r7, #28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd90      	pop	{r4, r7, pc}

08000b84 <fillCircle>:

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	4611      	mov	r1, r2
 8000b90:	461a      	mov	r2, r3
 8000b92:	4623      	mov	r3, r4
 8000b94:	80fb      	strh	r3, [r7, #6]
 8000b96:	4603      	mov	r3, r0
 8000b98:	80bb      	strh	r3, [r7, #4]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	807b      	strh	r3, [r7, #2]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8000ba2:	88ba      	ldrh	r2, [r7, #4]
 8000ba4:	887b      	ldrh	r3, [r7, #2]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b219      	sxth	r1, r3
 8000bac:	887b      	ldrh	r3, [r7, #2]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	883b      	ldrh	r3, [r7, #0]
 8000bba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000bbe:	f7ff fddd 	bl	800077c <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8000bc2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000bc6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000bca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000bce:	883b      	ldrh	r3, [r7, #0]
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	f7ff ff06 	bl	80009e8 <fillCircleHelper>
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd90      	pop	{r4, r7, pc}

08000be4 <drawRect>:



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4604      	mov	r4, r0
 8000bec:	4608      	mov	r0, r1
 8000bee:	4611      	mov	r1, r2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4623      	mov	r3, r4
 8000bf4:	80fb      	strh	r3, [r7, #6]
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80bb      	strh	r3, [r7, #4]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	807b      	strh	r3, [r7, #2]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 8000c02:	8b3b      	ldrh	r3, [r7, #24]
 8000c04:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000c08:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000c0c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000c10:	f7ff fdd9 	bl	80007c6 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 8000c14:	88ba      	ldrh	r2, [r7, #4]
 8000c16:	883b      	ldrh	r3, [r7, #0]
 8000c18:	4413      	add	r3, r2
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	b219      	sxth	r1, r3
 8000c22:	8b3b      	ldrh	r3, [r7, #24]
 8000c24:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000c28:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000c2c:	f7ff fdcb 	bl	80007c6 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 8000c30:	8b3b      	ldrh	r3, [r7, #24]
 8000c32:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000c36:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000c3a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000c3e:	f7ff fd9d 	bl	800077c <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8000c42:	88fa      	ldrh	r2, [r7, #6]
 8000c44:	887b      	ldrh	r3, [r7, #2]
 8000c46:	4413      	add	r3, r2
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	b218      	sxth	r0, r3
 8000c50:	8b3b      	ldrh	r3, [r7, #24]
 8000c52:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000c56:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000c5a:	f7ff fd8f 	bl	800077c <drawFastVLine>
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd90      	pop	{r4, r7, pc}
	...

08000c68 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000c72:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <fillScreen+0x2c>)
 8000c74:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c78:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <fillScreen+0x30>)
 8000c7a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	460b      	mov	r3, r1
 8000c84:	2100      	movs	r1, #0
 8000c86:	2000      	movs	r0, #0
 8000c88:	f7ff fca5 	bl	80005d6 <fillRect>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	2000009c 	.word	0x2000009c
 8000c98:	2000009e 	.word	0x2000009e

08000c9c <MPU9250_Init>:

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart2;

void MPU9250_Init()
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b09e      	sub	sp, #120	@ 0x78
 8000ca0:	af04      	add	r7, sp, #16
	uint8_t writeConfig = FS_GYRO_500;
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	char message[100];

	/* Verifying if the device is ready */
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADRESS << 1) + 0, 1, 100);
 8000ca8:	2364      	movs	r3, #100	@ 0x64
 8000caa:	2201      	movs	r2, #1
 8000cac:	21d0      	movs	r1, #208	@ 0xd0
 8000cae:	4858      	ldr	r0, [pc, #352]	@ (8000e10 <MPU9250_Init+0x174>)
 8000cb0:	f002 fe4a 	bl	8003948 <HAL_I2C_IsDeviceReady>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if(ret == HAL_OK)
 8000cba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d106      	bne.n	8000cd0 <MPU9250_Init+0x34>
	{
		strncpy(message, "Device is ready to connect\r\n", sizeof(message));
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	2264      	movs	r2, #100	@ 0x64
 8000cc6:	4953      	ldr	r1, [pc, #332]	@ (8000e14 <MPU9250_Init+0x178>)
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f006 f94e 	bl	8006f6a <strncpy>
 8000cce:	e005      	b.n	8000cdc <MPU9250_Init+0x40>
	}
	else
	{
		strncpy(message, "Device is not ready to connect\r\n", sizeof(message));
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	2264      	movs	r2, #100	@ 0x64
 8000cd4:	4950      	ldr	r1, [pc, #320]	@ (8000e18 <MPU9250_Init+0x17c>)
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f006 f947 	bl	8006f6a <strncpy>
	}
	HAL_UART_Transmit(&huart2, message, strlen(message), 50);
 8000cdc:	463b      	mov	r3, r7
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fa96 	bl	8000210 <strlen>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4639      	mov	r1, r7
 8000cea:	2332      	movs	r3, #50	@ 0x32
 8000cec:	484b      	ldr	r0, [pc, #300]	@ (8000e1c <MPU9250_Init+0x180>)
 8000cee:	f004 ff33 	bl	8005b58 <HAL_UART_Transmit>

	/* Configurating Gyroscope */
	ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADRESS << 1) + 0, REG_CONFIG_GYRO, 1, &writeConfig, 1, 100);
 8000cf2:	2364      	movs	r3, #100	@ 0x64
 8000cf4:	9302      	str	r3, [sp, #8]
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	9301      	str	r3, [sp, #4]
 8000cfa:	f107 0366 	add.w	r3, r7, #102	@ 0x66
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2301      	movs	r3, #1
 8000d02:	221b      	movs	r2, #27
 8000d04:	21d0      	movs	r1, #208	@ 0xd0
 8000d06:	4842      	ldr	r0, [pc, #264]	@ (8000e10 <MPU9250_Init+0x174>)
 8000d08:	f002 faf2 	bl	80032f0 <HAL_I2C_Mem_Write>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if(ret == HAL_OK)
 8000d12:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d106      	bne.n	8000d28 <MPU9250_Init+0x8c>
	{
		strncpy(message, "Gyroscope configured successfully\r\n", sizeof(message));
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2264      	movs	r2, #100	@ 0x64
 8000d1e:	4940      	ldr	r1, [pc, #256]	@ (8000e20 <MPU9250_Init+0x184>)
 8000d20:	4618      	mov	r0, r3
 8000d22:	f006 f922 	bl	8006f6a <strncpy>
 8000d26:	e005      	b.n	8000d34 <MPU9250_Init+0x98>
	}
	else
	{
		strncpy(message, "Error while configuring gyroscope\r\n", sizeof(message));
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2264      	movs	r2, #100	@ 0x64
 8000d2c:	493d      	ldr	r1, [pc, #244]	@ (8000e24 <MPU9250_Init+0x188>)
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f006 f91b 	bl	8006f6a <strncpy>
	}
	HAL_UART_Transmit(&huart2, message, strlen(message), 50);
 8000d34:	463b      	mov	r3, r7
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fa6a 	bl	8000210 <strlen>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4639      	mov	r1, r7
 8000d42:	2332      	movs	r3, #50	@ 0x32
 8000d44:	4835      	ldr	r0, [pc, #212]	@ (8000e1c <MPU9250_Init+0x180>)
 8000d46:	f004 ff07 	bl	8005b58 <HAL_UART_Transmit>

	/* Configurating Accelerometer */
	writeConfig = FS_ACC_4G;
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADRESS << 1) + 0, REG_CONFIG_ACC, 1, &writeConfig, 1, 100);
 8000d50:	2364      	movs	r3, #100	@ 0x64
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	2301      	movs	r3, #1
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	f107 0366 	add.w	r3, r7, #102	@ 0x66
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	221c      	movs	r2, #28
 8000d62:	21d0      	movs	r1, #208	@ 0xd0
 8000d64:	482a      	ldr	r0, [pc, #168]	@ (8000e10 <MPU9250_Init+0x174>)
 8000d66:	f002 fac3 	bl	80032f0 <HAL_I2C_Mem_Write>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if(ret == HAL_OK)
 8000d70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d106      	bne.n	8000d86 <MPU9250_Init+0xea>
	{
		strncpy(message, "Accelerometer configured successfully\r\n", sizeof(message));
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2264      	movs	r2, #100	@ 0x64
 8000d7c:	492a      	ldr	r1, [pc, #168]	@ (8000e28 <MPU9250_Init+0x18c>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f006 f8f3 	bl	8006f6a <strncpy>
 8000d84:	e005      	b.n	8000d92 <MPU9250_Init+0xf6>
	}
	else
	{
		strncpy(message, "Error while configuring accelerometer\r\n", sizeof(message));
 8000d86:	463b      	mov	r3, r7
 8000d88:	2264      	movs	r2, #100	@ 0x64
 8000d8a:	4928      	ldr	r1, [pc, #160]	@ (8000e2c <MPU9250_Init+0x190>)
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f006 f8ec 	bl	8006f6a <strncpy>
	}
	HAL_UART_Transmit(&huart2, message, strlen(message), 50);
 8000d92:	463b      	mov	r3, r7
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fa3b 	bl	8000210 <strlen>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	4639      	mov	r1, r7
 8000da0:	2332      	movs	r3, #50	@ 0x32
 8000da2:	481e      	ldr	r0, [pc, #120]	@ (8000e1c <MPU9250_Init+0x180>)
 8000da4:	f004 fed8 	bl	8005b58 <HAL_UART_Transmit>
	/* Exiting from sleep mode */
	writeConfig = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADRESS << 1) + 0, REG_PWR_CTRL, 1, &writeConfig, 1, 100);
 8000dae:	2364      	movs	r3, #100	@ 0x64
 8000db0:	9302      	str	r3, [sp, #8]
 8000db2:	2301      	movs	r3, #1
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	f107 0366 	add.w	r3, r7, #102	@ 0x66
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	226b      	movs	r2, #107	@ 0x6b
 8000dc0:	21d0      	movs	r1, #208	@ 0xd0
 8000dc2:	4813      	ldr	r0, [pc, #76]	@ (8000e10 <MPU9250_Init+0x174>)
 8000dc4:	f002 fa94 	bl	80032f0 <HAL_I2C_Mem_Write>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if(ret == HAL_OK)
 8000dce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d106      	bne.n	8000de4 <MPU9250_Init+0x148>
	{
		strncpy(message, "Sleep mode disabled\r\n", sizeof(message));
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	2264      	movs	r2, #100	@ 0x64
 8000dda:	4915      	ldr	r1, [pc, #84]	@ (8000e30 <MPU9250_Init+0x194>)
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f006 f8c4 	bl	8006f6a <strncpy>
 8000de2:	e005      	b.n	8000df0 <MPU9250_Init+0x154>
	}
	else
	{
		strncpy(message, "Error while exiting from sleep mode\r\n", sizeof(message));
 8000de4:	463b      	mov	r3, r7
 8000de6:	2264      	movs	r2, #100	@ 0x64
 8000de8:	4912      	ldr	r1, [pc, #72]	@ (8000e34 <MPU9250_Init+0x198>)
 8000dea:	4618      	mov	r0, r3
 8000dec:	f006 f8bd 	bl	8006f6a <strncpy>
	}
	HAL_UART_Transmit(&huart2, message, strlen(message), 50);
 8000df0:	463b      	mov	r3, r7
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fa0c 	bl	8000210 <strlen>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	4639      	mov	r1, r7
 8000dfe:	2332      	movs	r3, #50	@ 0x32
 8000e00:	4806      	ldr	r0, [pc, #24]	@ (8000e1c <MPU9250_Init+0x180>)
 8000e02:	f004 fea9 	bl	8005b58 <HAL_UART_Transmit>
}
 8000e06:	bf00      	nop
 8000e08:	3768      	adds	r7, #104	@ 0x68
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200000ac 	.word	0x200000ac
 8000e14:	08008038 	.word	0x08008038
 8000e18:	08008058 	.word	0x08008058
 8000e1c:	200002d8 	.word	0x200002d8
 8000e20:	0800807c 	.word	0x0800807c
 8000e24:	080080a0 	.word	0x080080a0
 8000e28:	080080c4 	.word	0x080080c4
 8000e2c:	080080ec 	.word	0x080080ec
 8000e30:	08008114 	.word	0x08008114
 8000e34:	0800812c 	.word	0x0800812c

08000e38 <MPU9250_Gyro_ReadX>:

int MPU9250_Gyro_ReadX()
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af04      	add	r7, sp, #16
	uint8_t data[2];
	int16_t xGyro;
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADRESS << 1) + 1, REG_GYRO_DATA_X, 1, data, 2, 100);
 8000e3e:	2364      	movs	r3, #100	@ 0x64
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	2302      	movs	r3, #2
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	223b      	movs	r2, #59	@ 0x3b
 8000e4e:	21d1      	movs	r1, #209	@ 0xd1
 8000e50:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <MPU9250_Gyro_ReadX+0x38>)
 8000e52:	f002 fb47 	bl	80034e4 <HAL_I2C_Mem_Read>
	xGyro = ((int16_t)data[0] << 8) + data[1];
 8000e56:	793b      	ldrb	r3, [r7, #4]
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	797a      	ldrb	r2, [r7, #5]
 8000e5e:	4413      	add	r3, r2
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	80fb      	strh	r3, [r7, #6]

	return xGyro;
 8000e64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200000ac 	.word	0x200000ac

08000e74 <MPU9250_Gyro_ReadY>:

int MPU9250_Gyro_ReadY()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af04      	add	r7, sp, #16
	uint8_t data[2];
	int16_t yGyro;
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADRESS << 1) + 1, REG_GYRO_DATA_Y, 1, data, 2, 100);
 8000e7a:	2364      	movs	r3, #100	@ 0x64
 8000e7c:	9302      	str	r3, [sp, #8]
 8000e7e:	2302      	movs	r3, #2
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2301      	movs	r3, #1
 8000e88:	223d      	movs	r2, #61	@ 0x3d
 8000e8a:	21d1      	movs	r1, #209	@ 0xd1
 8000e8c:	4807      	ldr	r0, [pc, #28]	@ (8000eac <MPU9250_Gyro_ReadY+0x38>)
 8000e8e:	f002 fb29 	bl	80034e4 <HAL_I2C_Mem_Read>
	yGyro = ((int16_t)data[0] << 8) + data[1];
 8000e92:	793b      	ldrb	r3, [r7, #4]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	797a      	ldrb	r2, [r7, #5]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	80fb      	strh	r3, [r7, #6]

	return yGyro;
 8000ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200000ac 	.word	0x200000ac

08000eb0 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2140      	movs	r1, #64	@ 0x40
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <ST7735_Select+0x14>)
 8000eba:	f002 f8a1 	bl	8003000 <HAL_GPIO_WritePin>
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40020400 	.word	0x40020400

08000ec8 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2140      	movs	r1, #64	@ 0x40
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <ST7735_Unselect+0x14>)
 8000ed2:	f002 f895 	bl	8003000 <HAL_GPIO_WritePin>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40020400 	.word	0x40020400

08000ee0 <ST7735_Reset>:

void ST7735_Reset()
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2180      	movs	r1, #128	@ 0x80
 8000ee8:	4806      	ldr	r0, [pc, #24]	@ (8000f04 <ST7735_Reset+0x24>)
 8000eea:	f002 f889 	bl	8003000 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000eee:	2005      	movs	r0, #5
 8000ef0:	f001 fd12 	bl	8002918 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2180      	movs	r1, #128	@ 0x80
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <ST7735_Reset+0x24>)
 8000efa:	f002 f881 	bl	8003000 <HAL_GPIO_WritePin>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40020800 	.word	0x40020800

08000f08 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f18:	4806      	ldr	r0, [pc, #24]	@ (8000f34 <ST7735_WriteCommand+0x2c>)
 8000f1a:	f002 f871 	bl	8003000 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000f1e:	1df9      	adds	r1, r7, #7
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	2201      	movs	r2, #1
 8000f26:	4804      	ldr	r0, [pc, #16]	@ (8000f38 <ST7735_WriteCommand+0x30>)
 8000f28:	f004 f861 	bl	8004fee <HAL_SPI_Transmit>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40020000 	.word	0x40020000
 8000f38:	20000114 	.word	0x20000114

08000f3c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f4c:	4807      	ldr	r0, [pc, #28]	@ (8000f6c <ST7735_WriteData+0x30>)
 8000f4e:	f002 f857 	bl	8003000 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4804      	ldr	r0, [pc, #16]	@ (8000f70 <ST7735_WriteData+0x34>)
 8000f5e:	f004 f846 	bl	8004fee <HAL_SPI_Transmit>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	20000114 	.word	0x20000114

08000f74 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000f86:	e034      	b.n	8000ff2 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000f92:	7afb      	ldrb	r3, [r7, #11]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ffb7 	bl	8000f08 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	1c5a      	adds	r2, r3, #1
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000fa4:	7abb      	ldrb	r3, [r7, #10]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fac:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000fae:	7abb      	ldrb	r3, [r7, #10]
 8000fb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000fb4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000fb6:	7abb      	ldrb	r3, [r7, #10]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d008      	beq.n	8000fce <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000fbc:	7abb      	ldrb	r3, [r7, #10]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ffbb 	bl	8000f3c <ST7735_WriteData>
            addr += numArgs;
 8000fc6:	7abb      	ldrb	r3, [r7, #10]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000fce:	89bb      	ldrh	r3, [r7, #12]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00e      	beq.n	8000ff2 <DisplayInit+0x7e>
            ms = *addr++;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000fde:	89bb      	ldrh	r3, [r7, #12]
 8000fe0:	2bff      	cmp	r3, #255	@ 0xff
 8000fe2:	d102      	bne.n	8000fea <DisplayInit+0x76>
 8000fe4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000fe8:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000fea:	89bb      	ldrh	r3, [r7, #12]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 fc93 	bl	8002918 <HAL_Delay>
    while(numCommands--) {
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	1e5a      	subs	r2, r3, #1
 8000ff6:	73fa      	strb	r2, [r7, #15]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1c5      	bne.n	8000f88 <DisplayInit+0x14>
        }
    }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	4604      	mov	r4, r0
 8001010:	4608      	mov	r0, r1
 8001012:	4611      	mov	r1, r2
 8001014:	461a      	mov	r2, r3
 8001016:	4623      	mov	r3, r4
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	4603      	mov	r3, r0
 800101c:	71bb      	strb	r3, [r7, #6]
 800101e:	460b      	mov	r3, r1
 8001020:	717b      	strb	r3, [r7, #5]
 8001022:	4613      	mov	r3, r2
 8001024:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001026:	202a      	movs	r0, #42	@ 0x2a
 8001028:	f7ff ff6e 	bl	8000f08 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800102c:	2300      	movs	r3, #0
 800102e:	733b      	strb	r3, [r7, #12]
 8001030:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <ST7735_SetAddressWindow+0x88>)
 8001032:	781a      	ldrb	r2, [r3, #0]
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4413      	add	r3, r2
 8001038:	b2db      	uxtb	r3, r3
 800103a:	737b      	strb	r3, [r7, #13]
 800103c:	2300      	movs	r3, #0
 800103e:	73bb      	strb	r3, [r7, #14]
 8001040:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <ST7735_SetAddressWindow+0x88>)
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	797b      	ldrb	r3, [r7, #5]
 8001046:	4413      	add	r3, r2
 8001048:	b2db      	uxtb	r3, r3
 800104a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2104      	movs	r1, #4
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff72 	bl	8000f3c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001058:	202b      	movs	r0, #43	@ 0x2b
 800105a:	f7ff ff55 	bl	8000f08 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800105e:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <ST7735_SetAddressWindow+0x8c>)
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	4413      	add	r3, r2
 8001066:	b2db      	uxtb	r3, r3
 8001068:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <ST7735_SetAddressWindow+0x8c>)
 800106c:	781a      	ldrb	r2, [r3, #0]
 800106e:	793b      	ldrb	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	2104      	movs	r1, #4
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001082:	202c      	movs	r0, #44	@ 0x2c
 8001084:	f7ff ff40 	bl	8000f08 <ST7735_WriteCommand>
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	bd90      	pop	{r4, r7, pc}
 8001090:	200000a3 	.word	0x200000a3
 8001094:	200000a4 	.word	0x200000a4

08001098 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 80010a2:	f7ff ff05 	bl	8000eb0 <ST7735_Select>
    ST7735_Reset();
 80010a6:	f7ff ff1b 	bl	8000ee0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80010aa:	480c      	ldr	r0, [pc, #48]	@ (80010dc <ST7735_Init+0x44>)
 80010ac:	f7ff ff62 	bl	8000f74 <DisplayInit>
    DisplayInit(init_cmds2);
 80010b0:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <ST7735_Init+0x48>)
 80010b2:	f7ff ff5f 	bl	8000f74 <DisplayInit>
    DisplayInit(init_cmds3);
 80010b6:	480b      	ldr	r0, [pc, #44]	@ (80010e4 <ST7735_Init+0x4c>)
 80010b8:	f7ff ff5c 	bl	8000f74 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <ST7735_Init+0x50>)
 80010be:	2202      	movs	r2, #2
 80010c0:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <ST7735_Init+0x54>)
 80010c4:	2203      	movs	r2, #3
 80010c6:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f810 	bl	80010f0 <ST7735_SetRotation>
    ST7735_Unselect();
 80010d0:	f7ff fefa 	bl	8000ec8 <ST7735_Unselect>

}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	080081ec 	.word	0x080081ec
 80010e0:	08008224 	.word	0x08008224
 80010e4:	08008234 	.word	0x08008234
 80010e8:	200000a1 	.word	0x200000a1
 80010ec:	200000a2 	.word	0x200000a2

080010f0 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b33      	ldr	r3, [pc, #204]	@ (80011d4 <ST7735_SetRotation+0xe4>)
 8001108:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800110a:	4b32      	ldr	r3, [pc, #200]	@ (80011d4 <ST7735_SetRotation+0xe4>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b03      	cmp	r3, #3
 8001110:	d84e      	bhi.n	80011b0 <ST7735_SetRotation+0xc0>
 8001112:	a201      	add	r2, pc, #4	@ (adr r2, 8001118 <ST7735_SetRotation+0x28>)
 8001114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001118:	08001129 	.word	0x08001129
 800111c:	0800114b 	.word	0x0800114b
 8001120:	0800116d 	.word	0x0800116d
 8001124:	0800118f 	.word	0x0800118f
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001128:	23c0      	movs	r3, #192	@ 0xc0
 800112a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800112c:	4b2a      	ldr	r3, [pc, #168]	@ (80011d8 <ST7735_SetRotation+0xe8>)
 800112e:	2280      	movs	r2, #128	@ 0x80
 8001130:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001132:	4b2a      	ldr	r3, [pc, #168]	@ (80011dc <ST7735_SetRotation+0xec>)
 8001134:	2280      	movs	r2, #128	@ 0x80
 8001136:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001138:	4b29      	ldr	r3, [pc, #164]	@ (80011e0 <ST7735_SetRotation+0xf0>)
 800113a:	781a      	ldrb	r2, [r3, #0]
 800113c:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <ST7735_SetRotation+0xf4>)
 800113e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001140:	4b29      	ldr	r3, [pc, #164]	@ (80011e8 <ST7735_SetRotation+0xf8>)
 8001142:	781a      	ldrb	r2, [r3, #0]
 8001144:	4b29      	ldr	r3, [pc, #164]	@ (80011ec <ST7735_SetRotation+0xfc>)
 8001146:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001148:	e032      	b.n	80011b0 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800114a:	23a0      	movs	r3, #160	@ 0xa0
 800114c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800114e:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <ST7735_SetRotation+0xec>)
 8001150:	2280      	movs	r2, #128	@ 0x80
 8001152:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001154:	4b20      	ldr	r3, [pc, #128]	@ (80011d8 <ST7735_SetRotation+0xe8>)
 8001156:	2280      	movs	r2, #128	@ 0x80
 8001158:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800115a:	4b21      	ldr	r3, [pc, #132]	@ (80011e0 <ST7735_SetRotation+0xf0>)
 800115c:	781a      	ldrb	r2, [r3, #0]
 800115e:	4b23      	ldr	r3, [pc, #140]	@ (80011ec <ST7735_SetRotation+0xfc>)
 8001160:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001162:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <ST7735_SetRotation+0xf8>)
 8001164:	781a      	ldrb	r2, [r3, #0]
 8001166:	4b1f      	ldr	r3, [pc, #124]	@ (80011e4 <ST7735_SetRotation+0xf4>)
 8001168:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800116a:	e021      	b.n	80011b0 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001170:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <ST7735_SetRotation+0xe8>)
 8001172:	2280      	movs	r2, #128	@ 0x80
 8001174:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001176:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <ST7735_SetRotation+0xec>)
 8001178:	2280      	movs	r2, #128	@ 0x80
 800117a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800117c:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <ST7735_SetRotation+0xf0>)
 800117e:	781a      	ldrb	r2, [r3, #0]
 8001180:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <ST7735_SetRotation+0xf4>)
 8001182:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8001184:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <ST7735_SetRotation+0xf8>)
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <ST7735_SetRotation+0xfc>)
 800118a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800118c:	e010      	b.n	80011b0 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800118e:	2360      	movs	r3, #96	@ 0x60
 8001190:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8001192:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <ST7735_SetRotation+0xec>)
 8001194:	2280      	movs	r2, #128	@ 0x80
 8001196:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001198:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <ST7735_SetRotation+0xe8>)
 800119a:	2280      	movs	r2, #128	@ 0x80
 800119c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <ST7735_SetRotation+0xf0>)
 80011a0:	781a      	ldrb	r2, [r3, #0]
 80011a2:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <ST7735_SetRotation+0xfc>)
 80011a4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80011a6:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <ST7735_SetRotation+0xf8>)
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <ST7735_SetRotation+0xf4>)
 80011ac:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80011ae:	bf00      	nop
  }
  ST7735_Select();
 80011b0:	f7ff fe7e 	bl	8000eb0 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80011b4:	2036      	movs	r0, #54	@ 0x36
 80011b6:	f7ff fea7 	bl	8000f08 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80011ba:	f107 030f 	add.w	r3, r7, #15
 80011be:	2101      	movs	r1, #1
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff febb 	bl	8000f3c <ST7735_WriteData>
  ST7735_Unselect();
 80011c6:	f7ff fe7f 	bl	8000ec8 <ST7735_Unselect>
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000a0 	.word	0x200000a0
 80011d8:	2000009e 	.word	0x2000009e
 80011dc:	2000009c 	.word	0x2000009c
 80011e0:	200000a1 	.word	0x200000a1
 80011e4:	200000a3 	.word	0x200000a3
 80011e8:	200000a2 	.word	0x200000a2
 80011ec:	200000a4 	.word	0x200000a4

080011f0 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	80fb      	strh	r3, [r7, #6]
 80011fa:	460b      	mov	r3, r1
 80011fc:	80bb      	strh	r3, [r7, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	4a17      	ldr	r2, [pc, #92]	@ (8001264 <ST7735_DrawPixel+0x74>)
 8001206:	f9b2 2000 	ldrsh.w	r2, [r2]
 800120a:	4293      	cmp	r3, r2
 800120c:	da26      	bge.n	800125c <ST7735_DrawPixel+0x6c>
 800120e:	88bb      	ldrh	r3, [r7, #4]
 8001210:	4a15      	ldr	r2, [pc, #84]	@ (8001268 <ST7735_DrawPixel+0x78>)
 8001212:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001216:	4293      	cmp	r3, r2
 8001218:	da20      	bge.n	800125c <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800121a:	f7ff fe49 	bl	8000eb0 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	b2d8      	uxtb	r0, r3
 8001222:	88bb      	ldrh	r3, [r7, #4]
 8001224:	b2d9      	uxtb	r1, r3
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	3301      	adds	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	88bb      	ldrh	r3, [r7, #4]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3301      	adds	r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f7ff fee7 	bl	8001008 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	b29b      	uxth	r3, r3
 8001240:	b2db      	uxtb	r3, r3
 8001242:	733b      	strb	r3, [r7, #12]
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	2102      	movs	r1, #2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fe73 	bl	8000f3c <ST7735_WriteData>

    ST7735_Unselect();
 8001256:	f7ff fe37 	bl	8000ec8 <ST7735_Unselect>
 800125a:	e000      	b.n	800125e <ST7735_DrawPixel+0x6e>
        return;
 800125c:	bf00      	nop
}
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	2000009c 	.word	0x2000009c
 8001268:	2000009e 	.word	0x2000009e

0800126c <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800126c:	b082      	sub	sp, #8
 800126e:	b590      	push	{r4, r7, lr}
 8001270:	b089      	sub	sp, #36	@ 0x24
 8001272:	af00      	add	r7, sp, #0
 8001274:	637b      	str	r3, [r7, #52]	@ 0x34
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
 800127a:	460b      	mov	r3, r1
 800127c:	80bb      	strh	r3, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	b2d8      	uxtb	r0, r3
 8001286:	88bb      	ldrh	r3, [r7, #4]
 8001288:	b2d9      	uxtb	r1, r3
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001292:	4413      	add	r3, r2
 8001294:	b2db      	uxtb	r3, r3
 8001296:	3b01      	subs	r3, #1
 8001298:	b2dc      	uxtb	r4, r3
 800129a:	88bb      	ldrh	r3, [r7, #4]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80012a2:	4413      	add	r3, r2
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	3b01      	subs	r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4622      	mov	r2, r4
 80012ac:	f7ff feac 	bl	8001008 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	e043      	b.n	800133e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80012b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	3b20      	subs	r3, #32
 80012bc:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80012c0:	fb01 f303 	mul.w	r3, r1, r3
 80012c4:	4619      	mov	r1, r3
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	440b      	add	r3, r1
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	e029      	b.n	800132c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00e      	beq.n	8001306 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80012e8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80012ea:	0a1b      	lsrs	r3, r3, #8
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	743b      	strb	r3, [r7, #16]
 80012f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	2102      	movs	r1, #2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fe1c 	bl	8000f3c <ST7735_WriteData>
 8001304:	e00f      	b.n	8001326 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001306:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	b29b      	uxth	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	733b      	strb	r3, [r7, #12]
 8001312:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001316:	b2db      	uxtb	r3, r3
 8001318:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2102      	movs	r1, #2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe0b 	bl	8000f3c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	3301      	adds	r3, #1
 800132a:	61bb      	str	r3, [r7, #24]
 800132c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001330:	461a      	mov	r2, r3
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	4293      	cmp	r3, r2
 8001336:	d3cf      	bcc.n	80012d8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	3301      	adds	r3, #1
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001342:	461a      	mov	r2, r3
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	4293      	cmp	r3, r2
 8001348:	d3b5      	bcc.n	80012b6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	3724      	adds	r7, #36	@ 0x24
 8001350:	46bd      	mov	sp, r7
 8001352:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001356:	b002      	add	sp, #8
 8001358:	4770      	bx	lr
	...

0800135c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800135c:	b082      	sub	sp, #8
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af04      	add	r7, sp, #16
 8001364:	603a      	str	r2, [r7, #0]
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	4603      	mov	r3, r0
 800136a:	80fb      	strh	r3, [r7, #6]
 800136c:	460b      	mov	r3, r1
 800136e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001370:	f7ff fd9e 	bl	8000eb0 <ST7735_Select>

    while(*str) {
 8001374:	e033      	b.n	80013de <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	7d3a      	ldrb	r2, [r7, #20]
 800137a:	4413      	add	r3, r2
 800137c:	4a1f      	ldr	r2, [pc, #124]	@ (80013fc <ST7735_WriteString+0xa0>)
 800137e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001382:	4293      	cmp	r3, r2
 8001384:	db16      	blt.n	80013b4 <ST7735_WriteString+0x58>
            x = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800138a:	7d7b      	ldrb	r3, [r7, #21]
 800138c:	461a      	mov	r2, r3
 800138e:	88bb      	ldrh	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8001394:	88bb      	ldrh	r3, [r7, #4]
 8001396:	7d7a      	ldrb	r2, [r7, #21]
 8001398:	4413      	add	r3, r2
 800139a:	4a19      	ldr	r2, [pc, #100]	@ (8001400 <ST7735_WriteString+0xa4>)
 800139c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013a0:	4293      	cmp	r3, r2
 80013a2:	da21      	bge.n	80013e8 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b20      	cmp	r3, #32
 80013aa:	d103      	bne.n	80013b4 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	603b      	str	r3, [r7, #0]
                continue;
 80013b2:	e014      	b.n	80013de <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	88b9      	ldrh	r1, [r7, #4]
 80013ba:	88f8      	ldrh	r0, [r7, #6]
 80013bc:	8c3b      	ldrh	r3, [r7, #32]
 80013be:	9302      	str	r3, [sp, #8]
 80013c0:	8bbb      	ldrh	r3, [r7, #28]
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f7ff ff4f 	bl	800126c <ST7735_WriteChar>
        x += font.width;
 80013ce:	7d3b      	ldrb	r3, [r7, #20]
 80013d0:	461a      	mov	r2, r3
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	4413      	add	r3, r2
 80013d6:	80fb      	strh	r3, [r7, #6]
        str++;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	603b      	str	r3, [r7, #0]
    while(*str) {
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1c7      	bne.n	8001376 <ST7735_WriteString+0x1a>
 80013e6:	e000      	b.n	80013ea <ST7735_WriteString+0x8e>
                break;
 80013e8:	bf00      	nop
    }

    ST7735_Unselect();
 80013ea:	f7ff fd6d 	bl	8000ec8 <ST7735_Unselect>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013f8:	b002      	add	sp, #8
 80013fa:	4770      	bx	lr
 80013fc:	2000009c 	.word	0x2000009c
 8001400:	2000009e 	.word	0x2000009e

08001404 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	4604      	mov	r4, r0
 800140c:	4608      	mov	r0, r1
 800140e:	4611      	mov	r1, r2
 8001410:	461a      	mov	r2, r3
 8001412:	4623      	mov	r3, r4
 8001414:	80fb      	strh	r3, [r7, #6]
 8001416:	4603      	mov	r3, r0
 8001418:	80bb      	strh	r3, [r7, #4]
 800141a:	460b      	mov	r3, r1
 800141c:	807b      	strh	r3, [r7, #2]
 800141e:	4613      	mov	r3, r2
 8001420:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	4a38      	ldr	r2, [pc, #224]	@ (8001508 <ST7735_FillRectangle+0x104>)
 8001426:	f9b2 2000 	ldrsh.w	r2, [r2]
 800142a:	4293      	cmp	r3, r2
 800142c:	da67      	bge.n	80014fe <ST7735_FillRectangle+0xfa>
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	4a36      	ldr	r2, [pc, #216]	@ (800150c <ST7735_FillRectangle+0x108>)
 8001432:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001436:	4293      	cmp	r3, r2
 8001438:	da61      	bge.n	80014fe <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 800143a:	88fa      	ldrh	r2, [r7, #6]
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	4413      	add	r3, r2
 8001440:	4a31      	ldr	r2, [pc, #196]	@ (8001508 <ST7735_FillRectangle+0x104>)
 8001442:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001446:	4293      	cmp	r3, r2
 8001448:	dd06      	ble.n	8001458 <ST7735_FillRectangle+0x54>
 800144a:	4b2f      	ldr	r3, [pc, #188]	@ (8001508 <ST7735_FillRectangle+0x104>)
 800144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001450:	b29a      	uxth	r2, r3
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001458:	88ba      	ldrh	r2, [r7, #4]
 800145a:	883b      	ldrh	r3, [r7, #0]
 800145c:	4413      	add	r3, r2
 800145e:	4a2b      	ldr	r2, [pc, #172]	@ (800150c <ST7735_FillRectangle+0x108>)
 8001460:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001464:	4293      	cmp	r3, r2
 8001466:	dd06      	ble.n	8001476 <ST7735_FillRectangle+0x72>
 8001468:	4b28      	ldr	r3, [pc, #160]	@ (800150c <ST7735_FillRectangle+0x108>)
 800146a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146e:	b29a      	uxth	r2, r3
 8001470:	88bb      	ldrh	r3, [r7, #4]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001476:	f7ff fd1b 	bl	8000eb0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	b2d8      	uxtb	r0, r3
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	b2d9      	uxtb	r1, r3
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	b2db      	uxtb	r3, r3
 800148e:	3b01      	subs	r3, #1
 8001490:	b2dc      	uxtb	r4, r3
 8001492:	88bb      	ldrh	r3, [r7, #4]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	883b      	ldrh	r3, [r7, #0]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	4413      	add	r3, r2
 800149c:	b2db      	uxtb	r3, r3
 800149e:	3b01      	subs	r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4622      	mov	r2, r4
 80014a4:	f7ff fdb0 	bl	8001008 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80014a8:	8c3b      	ldrh	r3, [r7, #32]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	733b      	strb	r3, [r7, #12]
 80014b2:	8c3b      	ldrh	r3, [r7, #32]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014be:	4814      	ldr	r0, [pc, #80]	@ (8001510 <ST7735_FillRectangle+0x10c>)
 80014c0:	f001 fd9e 	bl	8003000 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80014c4:	883b      	ldrh	r3, [r7, #0]
 80014c6:	80bb      	strh	r3, [r7, #4]
 80014c8:	e013      	b.n	80014f2 <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	80fb      	strh	r3, [r7, #6]
 80014ce:	e00a      	b.n	80014e6 <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80014d0:	f107 010c 	add.w	r1, r7, #12
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
 80014d8:	2202      	movs	r2, #2
 80014da:	480e      	ldr	r0, [pc, #56]	@ (8001514 <ST7735_FillRectangle+0x110>)
 80014dc:	f003 fd87 	bl	8004fee <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	80fb      	strh	r3, [r7, #6]
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f1      	bne.n	80014d0 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	80bb      	strh	r3, [r7, #4]
 80014f2:	88bb      	ldrh	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1e8      	bne.n	80014ca <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 80014f8:	f7ff fce6 	bl	8000ec8 <ST7735_Unselect>
 80014fc:	e000      	b.n	8001500 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 80014fe:	bf00      	nop
}
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	bf00      	nop
 8001508:	2000009c 	.word	0x2000009c
 800150c:	2000009e 	.word	0x2000009e
 8001510:	40020000 	.word	0x40020000
 8001514:	20000114 	.word	0x20000114

08001518 <geniusInit>:

int difficulty;
extern UART_HandleTypeDef huart2;

void geniusInit()
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
	/*Fill the circles with it colors*/
	fillScreen(WHITE);
 800151e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001522:	f7ff fba1 	bl	8000c68 <fillScreen>
	drawCircle(COORD_X_UP, COORD_Y_UP, RADIUS, BLACK); //UP circle
 8001526:	2300      	movs	r3, #0
 8001528:	2217      	movs	r2, #23
 800152a:	211a      	movs	r1, #26
 800152c:	2040      	movs	r0, #64	@ 0x40
 800152e:	f7ff f96f 	bl	8000810 <drawCircle>
	drawCircle(COORD_X_DOWN, COORD_Y_DOWN, RADIUS, BLACK); //DOWN circle
 8001532:	2300      	movs	r3, #0
 8001534:	2217      	movs	r2, #23
 8001536:	2165      	movs	r1, #101	@ 0x65
 8001538:	2040      	movs	r0, #64	@ 0x40
 800153a:	f7ff f969 	bl	8000810 <drawCircle>
	drawCircle(COORD_X_LEFT, COORD_Y_LEFT, RADIUS, BLACK); //LEFT circle
 800153e:	2300      	movs	r3, #0
 8001540:	2217      	movs	r2, #23
 8001542:	2140      	movs	r1, #64	@ 0x40
 8001544:	201a      	movs	r0, #26
 8001546:	f7ff f963 	bl	8000810 <drawCircle>
	drawCircle(COORD_X_RIGHT, COORD_Y_RIGHT, RADIUS, BLACK); //RIGHT circle
 800154a:	2300      	movs	r3, #0
 800154c:	2217      	movs	r2, #23
 800154e:	2140      	movs	r1, #64	@ 0x40
 8001550:	2065      	movs	r0, #101	@ 0x65
 8001552:	f7ff f95d 	bl	8000810 <drawCircle>
	/*Fill the circles with low opacity colors*/
	fillCircle(COORD_X_UP, COORD_Y_UP, RADIUS-1, color565(169, 169, 255)); //Filling the up circle with low opacity RED
 8001556:	f64a 535f 	movw	r3, #44383	@ 0xad5f
 800155a:	2216      	movs	r2, #22
 800155c:	211a      	movs	r1, #26
 800155e:	2040      	movs	r0, #64	@ 0x40
 8001560:	f7ff fb10 	bl	8000b84 <fillCircle>
	fillCircle(COORD_X_LEFT, COORD_Y_LEFT, RADIUS-1, color565(255, 169, 169)); //Filling the left circle with low opacity BLUE
 8001564:	f64f 5355 	movw	r3, #64853	@ 0xfd55
 8001568:	2216      	movs	r2, #22
 800156a:	2140      	movs	r1, #64	@ 0x40
 800156c:	201a      	movs	r0, #26
 800156e:	f7ff fb09 	bl	8000b84 <fillCircle>
	fillCircle(COORD_X_DOWN, COORD_Y_DOWN, RADIUS-1, color565(169, 255, 169)); //Filling the down circle with low opacity YELLOW
 8001572:	f64a 73f5 	movw	r3, #45045	@ 0xaff5
 8001576:	2216      	movs	r2, #22
 8001578:	2165      	movs	r1, #101	@ 0x65
 800157a:	2040      	movs	r0, #64	@ 0x40
 800157c:	f7ff fb02 	bl	8000b84 <fillCircle>
	fillCircle(COORD_X_RIGHT, COORD_Y_RIGHT, RADIUS-1, color565(169, 255, 255)); //Filling the right circle with low opacity GREEN
 8001580:	f64a 73ff 	movw	r3, #45055	@ 0xafff
 8001584:	2216      	movs	r2, #22
 8001586:	2140      	movs	r1, #64	@ 0x40
 8001588:	2065      	movs	r0, #101	@ 0x65
 800158a:	f7ff fafb 	bl	8000b84 <fillCircle>
	/*Initiate the random numbers seed*/
	uint32_t seed = HAL_GetTick();
 800158e:	f001 f9b7 	bl	8002900 <HAL_GetTick>
 8001592:	6078      	str	r0, [r7, #4]
	seed ^= (MPU9250_Gyro_ReadX() << 16);
 8001594:	f7ff fc50 	bl	8000e38 <MPU9250_Gyro_ReadX>
 8001598:	4603      	mov	r3, r0
 800159a:	041b      	lsls	r3, r3, #16
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4053      	eors	r3, r2
 80015a2:	607b      	str	r3, [r7, #4]
	seed ^= (MPU9250_Gyro_ReadY() << 8);
 80015a4:	f7ff fc66 	bl	8000e74 <MPU9250_Gyro_ReadY>
 80015a8:	4603      	mov	r3, r0
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4053      	eors	r3, r2
 80015b2:	607b      	str	r3, [r7, #4]
	srand(seed);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f005 fb0b 	bl	8006bd0 <srand>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <geniusDifficulty>:

void geniusDifficulty(int diff)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	switch(diff)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d012      	beq.n	80015f8 <geniusDifficulty+0x34>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	dc13      	bgt.n	8001600 <geniusDifficulty+0x3c>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <geniusDifficulty+0x22>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d005      	beq.n	80015f0 <geniusDifficulty+0x2c>
 80015e4:	e00c      	b.n	8001600 <geniusDifficulty+0x3c>
	{
	case 0:
		difficulty = EASY_DELAY;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <geniusDifficulty+0x50>)
 80015e8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015ec:	601a      	str	r2, [r3, #0]
		break;
 80015ee:	e00b      	b.n	8001608 <geniusDifficulty+0x44>
	case 1:
		difficulty = HARD_DELAY;
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <geniusDifficulty+0x50>)
 80015f2:	224b      	movs	r2, #75	@ 0x4b
 80015f4:	601a      	str	r2, [r3, #0]
		break;
 80015f6:	e007      	b.n	8001608 <geniusDifficulty+0x44>
	case 3:
		difficulty = IMPOSSIBLE_DELAY;
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <geniusDifficulty+0x50>)
 80015fa:	220a      	movs	r2, #10
 80015fc:	601a      	str	r2, [r3, #0]
		break;
 80015fe:	e003      	b.n	8001608 <geniusDifficulty+0x44>
	default:
	case 2:
		difficulty = MEDIUM_DELAY;
 8001600:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <geniusDifficulty+0x50>)
 8001602:	22c8      	movs	r2, #200	@ 0xc8
 8001604:	601a      	str	r2, [r3, #0]
		break;
 8001606:	bf00      	nop
	}
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	200000a8 	.word	0x200000a8

08001618 <geniusToggleCircle>:

void geniusToggleCircle(int position)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	switch(position)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b03      	cmp	r3, #3
 8001624:	d871      	bhi.n	800170a <geniusToggleCircle+0xf2>
 8001626:	a201      	add	r2, pc, #4	@ (adr r2, 800162c <geniusToggleCircle+0x14>)
 8001628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162c:	0800163d 	.word	0x0800163d
 8001630:	0800166f 	.word	0x0800166f
 8001634:	080016a3 	.word	0x080016a3
 8001638:	080016d7 	.word	0x080016d7
		Initiate the timer with it frequency
		Fill the circle with it color on low opacity
		Stop the timer
	 */
	case 0:
		fillCircle(COORD_X_UP, COORD_Y_UP, RADIUS-1, BLUE);
 800163c:	231f      	movs	r3, #31
 800163e:	2216      	movs	r2, #22
 8001640:	211a      	movs	r1, #26
 8001642:	2040      	movs	r0, #64	@ 0x40
 8001644:	f7ff fa9e 	bl	8000b84 <fillCircle>
		HAL_Delay(difficulty);
 8001648:	4b32      	ldr	r3, [pc, #200]	@ (8001714 <geniusToggleCircle+0xfc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f001 f963 	bl	8002918 <HAL_Delay>
		HAL_TIM_Base_Start_IT(&htim11);
 8001652:	4831      	ldr	r0, [pc, #196]	@ (8001718 <geniusToggleCircle+0x100>)
 8001654:	f003 ff3c 	bl	80054d0 <HAL_TIM_Base_Start_IT>
		fillCircle(COORD_X_UP, COORD_Y_UP, RADIUS-1, color565(169, 169, 255));
 8001658:	f64a 535f 	movw	r3, #44383	@ 0xad5f
 800165c:	2216      	movs	r2, #22
 800165e:	211a      	movs	r1, #26
 8001660:	2040      	movs	r0, #64	@ 0x40
 8001662:	f7ff fa8f 	bl	8000b84 <fillCircle>
		HAL_TIM_Base_Stop_IT(&htim11);
 8001666:	482c      	ldr	r0, [pc, #176]	@ (8001718 <geniusToggleCircle+0x100>)
 8001668:	f003 ffa2 	bl	80055b0 <HAL_TIM_Base_Stop_IT>
		break;
 800166c:	e04e      	b.n	800170c <geniusToggleCircle+0xf4>
	case 1:
		fillCircle(COORD_X_DOWN, COORD_Y_DOWN, RADIUS-1, GREEN);
 800166e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001672:	2216      	movs	r2, #22
 8001674:	2165      	movs	r1, #101	@ 0x65
 8001676:	2040      	movs	r0, #64	@ 0x40
 8001678:	f7ff fa84 	bl	8000b84 <fillCircle>
		HAL_Delay(difficulty);
 800167c:	4b25      	ldr	r3, [pc, #148]	@ (8001714 <geniusToggleCircle+0xfc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f001 f949 	bl	8002918 <HAL_Delay>
		HAL_TIM_Base_Start_IT(&htim10);
 8001686:	4825      	ldr	r0, [pc, #148]	@ (800171c <geniusToggleCircle+0x104>)
 8001688:	f003 ff22 	bl	80054d0 <HAL_TIM_Base_Start_IT>
		fillCircle(COORD_X_DOWN, COORD_Y_DOWN, RADIUS-1, color565(169, 255, 169));
 800168c:	f64a 73f5 	movw	r3, #45045	@ 0xaff5
 8001690:	2216      	movs	r2, #22
 8001692:	2165      	movs	r1, #101	@ 0x65
 8001694:	2040      	movs	r0, #64	@ 0x40
 8001696:	f7ff fa75 	bl	8000b84 <fillCircle>
		HAL_TIM_Base_Stop_IT(&htim10);
 800169a:	4820      	ldr	r0, [pc, #128]	@ (800171c <geniusToggleCircle+0x104>)
 800169c:	f003 ff88 	bl	80055b0 <HAL_TIM_Base_Stop_IT>
		break;
 80016a0:	e034      	b.n	800170c <geniusToggleCircle+0xf4>
	case 2:
		fillCircle(COORD_X_LEFT, COORD_Y_LEFT, RADIUS-1, RED);
 80016a2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80016a6:	2216      	movs	r2, #22
 80016a8:	2140      	movs	r1, #64	@ 0x40
 80016aa:	201a      	movs	r0, #26
 80016ac:	f7ff fa6a 	bl	8000b84 <fillCircle>
		HAL_Delay(difficulty);
 80016b0:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <geniusToggleCircle+0xfc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f001 f92f 	bl	8002918 <HAL_Delay>
		HAL_TIM_Base_Start_IT(&htim7);
 80016ba:	4819      	ldr	r0, [pc, #100]	@ (8001720 <geniusToggleCircle+0x108>)
 80016bc:	f003 ff08 	bl	80054d0 <HAL_TIM_Base_Start_IT>
		fillCircle(COORD_X_LEFT, COORD_Y_LEFT, RADIUS-1, color565(255, 169, 169));
 80016c0:	f64f 5355 	movw	r3, #64853	@ 0xfd55
 80016c4:	2216      	movs	r2, #22
 80016c6:	2140      	movs	r1, #64	@ 0x40
 80016c8:	201a      	movs	r0, #26
 80016ca:	f7ff fa5b 	bl	8000b84 <fillCircle>
		HAL_TIM_Base_Stop_IT(&htim7);
 80016ce:	4814      	ldr	r0, [pc, #80]	@ (8001720 <geniusToggleCircle+0x108>)
 80016d0:	f003 ff6e 	bl	80055b0 <HAL_TIM_Base_Stop_IT>
		break;
 80016d4:	e01a      	b.n	800170c <geniusToggleCircle+0xf4>
	case 3:
		fillCircle(COORD_X_RIGHT, COORD_Y_RIGHT, RADIUS-1, CYAN);
 80016d6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80016da:	2216      	movs	r2, #22
 80016dc:	2140      	movs	r1, #64	@ 0x40
 80016de:	2065      	movs	r0, #101	@ 0x65
 80016e0:	f7ff fa50 	bl	8000b84 <fillCircle>
		HAL_Delay(difficulty);
 80016e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <geniusToggleCircle+0xfc>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 f915 	bl	8002918 <HAL_Delay>
		HAL_TIM_Base_Start_IT(&htim6);
 80016ee:	480d      	ldr	r0, [pc, #52]	@ (8001724 <geniusToggleCircle+0x10c>)
 80016f0:	f003 feee 	bl	80054d0 <HAL_TIM_Base_Start_IT>
		fillCircle(COORD_X_RIGHT, COORD_Y_RIGHT, RADIUS-1, color565(169, 255, 255));
 80016f4:	f64a 73ff 	movw	r3, #45055	@ 0xafff
 80016f8:	2216      	movs	r2, #22
 80016fa:	2140      	movs	r1, #64	@ 0x40
 80016fc:	2065      	movs	r0, #101	@ 0x65
 80016fe:	f7ff fa41 	bl	8000b84 <fillCircle>
		HAL_TIM_Base_Stop_IT(&htim6);
 8001702:	4808      	ldr	r0, [pc, #32]	@ (8001724 <geniusToggleCircle+0x10c>)
 8001704:	f003 ff54 	bl	80055b0 <HAL_TIM_Base_Stop_IT>
		break;
 8001708:	e000      	b.n	800170c <geniusToggleCircle+0xf4>
	default:
		break;
 800170a:	bf00      	nop
	}
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200000a8 	.word	0x200000a8
 8001718:	20000248 	.word	0x20000248
 800171c:	20000200 	.word	0x20000200
 8001720:	200001b8 	.word	0x200001b8
 8001724:	20000170 	.word	0x20000170

08001728 <geniusGetChoice>:

int geniusGetChoice(int xA, int yA)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
	int choice;
	if(xA >= PARAM-300)        choice = 0;  //UP
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f640 228b 	movw	r2, #2699	@ 0xa8b
 8001738:	4293      	cmp	r3, r2
 800173a:	dd02      	ble.n	8001742 <geniusGetChoice+0x1a>
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e018      	b.n	8001774 <geniusGetChoice+0x4c>
	else if(xA <= -PARAM)  choice = 1;  //DOWN
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a0f      	ldr	r2, [pc, #60]	@ (8001784 <geniusGetChoice+0x5c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	da02      	bge.n	8001750 <geniusGetChoice+0x28>
 800174a:	2301      	movs	r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	e011      	b.n	8001774 <geniusGetChoice+0x4c>
	else if(yA >= PARAM)   choice = 2;  //LEFT
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001756:	4293      	cmp	r3, r2
 8001758:	dd02      	ble.n	8001760 <geniusGetChoice+0x38>
 800175a:	2302      	movs	r3, #2
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	e009      	b.n	8001774 <geniusGetChoice+0x4c>
	else if(yA <= -PARAM)  choice = 3;  //RIGHT
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	4a08      	ldr	r2, [pc, #32]	@ (8001784 <geniusGetChoice+0x5c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	da02      	bge.n	800176e <geniusGetChoice+0x46>
 8001768:	2303      	movs	r3, #3
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	e002      	b.n	8001774 <geniusGetChoice+0x4c>
	else                   choice = -1; //REST SPOT
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	60fb      	str	r3, [r7, #12]

	return choice;
 8001774:	68fb      	ldr	r3, [r7, #12]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	fffff449 	.word	0xfffff449

08001788 <geniusGame>:

int geniusGame()
{
 8001788:	b580      	push	{r7, lr}
 800178a:	f5ad 7d3c 	sub.w	sp, sp, #752	@ 0x2f0
 800178e:	af04      	add	r7, sp, #16
	/*Game management*/
	int defeat = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
	int score = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
	/*Displays buffer*/
	char buffer[50];
	/*Debug message*/
	char debugMsg[50];

	while (!defeat)
 800179c:	e149      	b.n	8001a32 <geniusGame+0x2aa>
	{
		rightOnes[score] = rand() % 4;
 800179e:	f005 fa45 	bl	8006c2c <rand>
 80017a2:	4603      	mov	r3, r0
 80017a4:	425a      	negs	r2, r3
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	f002 0203 	and.w	r2, r2, #3
 80017ae:	bf58      	it	pl
 80017b0:	4253      	negpl	r3, r2
 80017b2:	f507 7238 	add.w	r2, r7, #736	@ 0x2e0
 80017b6:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 80017ba:	f8d7 12d8 	ldr.w	r1, [r7, #728]	@ 0x2d8
 80017be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		snprintf(buffer, 40, "%i", score);
 80017c2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80017c6:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80017ca:	4aa0      	ldr	r2, [pc, #640]	@ (8001a4c <geniusGame+0x2c4>)
 80017cc:	2128      	movs	r1, #40	@ 0x28
 80017ce:	f005 fb2d 	bl	8006e2c <sniprintf>
		ST7735_WriteString(COORD_X_SCORE, COORD_Y_SCORE, buffer, Font_11x18, BLACK, WHITE);
 80017d2:	4b9f      	ldr	r3, [pc, #636]	@ (8001a50 <geniusGame+0x2c8>)
 80017d4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80017d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017dc:	9202      	str	r2, [sp, #8]
 80017de:	2200      	movs	r2, #0
 80017e0:	9201      	str	r2, [sp, #4]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	9200      	str	r2, [sp, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	460a      	mov	r2, r1
 80017ea:	2137      	movs	r1, #55	@ 0x37
 80017ec:	203b      	movs	r0, #59	@ 0x3b
 80017ee:	f7ff fdb5 	bl	800135c <ST7735_WriteString>
		snprintf(buffer, 40, "%i\n", score);
 80017f2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80017f6:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80017fa:	4a96      	ldr	r2, [pc, #600]	@ (8001a54 <geniusGame+0x2cc>)
 80017fc:	2128      	movs	r1, #40	@ 0x28
 80017fe:	f005 fb15 	bl	8006e2c <sniprintf>
		HAL_UART_Transmit_IT(&huart2, &buffer, strlen(buffer));
 8001802:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fd02 	bl	8000210 <strlen>
 800180c:	4603      	mov	r3, r0
 800180e:	b29a      	uxth	r2, r3
 8001810:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001814:	4619      	mov	r1, r3
 8001816:	4890      	ldr	r0, [pc, #576]	@ (8001a58 <geniusGame+0x2d0>)
 8001818:	f004 fa29 	bl	8005c6e <HAL_UART_Transmit_IT>

		for(int i = 0; i <= score; i++) //Showing all the sequence
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8001822:	e012      	b.n	800184a <geniusGame+0xc2>
		{
			geniusToggleCircle(rightOnes[i]);
 8001824:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8001828:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 800182c:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 8001830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff feef 	bl	8001618 <geniusToggleCircle>
			HAL_Delay(100);
 800183a:	2064      	movs	r0, #100	@ 0x64
 800183c:	f001 f86c 	bl	8002918 <HAL_Delay>
		for(int i = 0; i <= score; i++) //Showing all the sequence
 8001840:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8001844:	3301      	adds	r3, #1
 8001846:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 800184a:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 800184e:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8001852:	429a      	cmp	r2, r3
 8001854:	dde6      	ble.n	8001824 <geniusGame+0x9c>
		}

		for (int i = 0; i <= score; i++)
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 800185c:	e035      	b.n	80018ca <geniusGame+0x142>
		{
			do {
				x = MPU9250_Gyro_ReadX();
 800185e:	f7ff faeb 	bl	8000e38 <MPU9250_Gyro_ReadX>
 8001862:	f8c7 02cc 	str.w	r0, [r7, #716]	@ 0x2cc
				y = MPU9250_Gyro_ReadY();
 8001866:	f7ff fb05 	bl	8000e74 <MPU9250_Gyro_ReadY>
 800186a:	f8c7 02c8 	str.w	r0, [r7, #712]	@ 0x2c8
				choice = geniusGetChoice(x, y);
 800186e:	f8d7 12c8 	ldr.w	r1, [r7, #712]	@ 0x2c8
 8001872:	f8d7 02cc 	ldr.w	r0, [r7, #716]	@ 0x2cc
 8001876:	f7ff ff57 	bl	8001728 <geniusGetChoice>
 800187a:	f8c7 02c4 	str.w	r0, [r7, #708]	@ 0x2c4
				HAL_Delay(difficulty/2);
 800187e:	4b77      	ldr	r3, [pc, #476]	@ (8001a5c <geniusGame+0x2d4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	0fda      	lsrs	r2, r3, #31
 8001884:	4413      	add	r3, r2
 8001886:	105b      	asrs	r3, r3, #1
 8001888:	4618      	mov	r0, r3
 800188a:	f001 f845 	bl	8002918 <HAL_Delay>
			} while (choice == -1);
 800188e:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8001892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001896:	d0e2      	beq.n	800185e <geniusGame+0xd6>

			geniusToggleCircle(choice);
 8001898:	f8d7 02c4 	ldr.w	r0, [r7, #708]	@ 0x2c4
 800189c:	f7ff febc 	bl	8001618 <geniusToggleCircle>

			if (choice != rightOnes[i])
 80018a0:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 80018a4:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80018a8:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 80018ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b0:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d003      	beq.n	80018c0 <geniusGame+0x138>
			{
				defeat = 1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
				break;
 80018be:	e00a      	b.n	80018d6 <geniusGame+0x14e>
		for (int i = 0; i <= score; i++)
 80018c0:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 80018c4:	3301      	adds	r3, #1
 80018c6:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 80018ca:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 80018ce:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80018d2:	429a      	cmp	r2, r3
 80018d4:	ddc3      	ble.n	800185e <geniusGame+0xd6>
			}
		}

		if (!defeat)
 80018d6:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10e      	bne.n	80018fc <geniusGame+0x174>
		{
			score++;
 80018de:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80018e2:	3301      	adds	r3, #1
 80018e4:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
			HAL_Delay(difficulty/4);
 80018e8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a5c <geniusGame+0x2d4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	da00      	bge.n	80018f2 <geniusGame+0x16a>
 80018f0:	3303      	adds	r3, #3
 80018f2:	109b      	asrs	r3, r3, #2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f001 f80f 	bl	8002918 <HAL_Delay>
 80018fa:	e09a      	b.n	8001a32 <geniusGame+0x2aa>
		}
		else
		{

			/*Defeat message and sound effect*/
			HAL_TIM_Base_Start_IT(&htim11);
 80018fc:	4858      	ldr	r0, [pc, #352]	@ (8001a60 <geniusGame+0x2d8>)
 80018fe:	f003 fde7 	bl	80054d0 <HAL_TIM_Base_Start_IT>
			ST7735_WriteString(COORD_X1_DEFEATMSG, COORD_Y_DEFEATMSG, "DER", Font_16x26, WHITE, BLUE);
 8001902:	4b58      	ldr	r3, [pc, #352]	@ (8001a64 <geniusGame+0x2dc>)
 8001904:	221f      	movs	r2, #31
 8001906:	9202      	str	r2, [sp, #8]
 8001908:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800190c:	9201      	str	r2, [sp, #4]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	9200      	str	r2, [sp, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a54      	ldr	r2, [pc, #336]	@ (8001a68 <geniusGame+0x2e0>)
 8001916:	2136      	movs	r1, #54	@ 0x36
 8001918:	2007      	movs	r0, #7
 800191a:	f7ff fd1f 	bl	800135c <ST7735_WriteString>
			HAL_Delay(350);
 800191e:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8001922:	f000 fff9 	bl	8002918 <HAL_Delay>
			HAL_TIM_Base_Stop_IT(&htim11);
 8001926:	484e      	ldr	r0, [pc, #312]	@ (8001a60 <geniusGame+0x2d8>)
 8001928:	f003 fe42 	bl	80055b0 <HAL_TIM_Base_Stop_IT>

			HAL_Delay(50);
 800192c:	2032      	movs	r0, #50	@ 0x32
 800192e:	f000 fff3 	bl	8002918 <HAL_Delay>

			HAL_TIM_Base_Start_IT(&htim10);
 8001932:	484e      	ldr	r0, [pc, #312]	@ (8001a6c <geniusGame+0x2e4>)
 8001934:	f003 fdcc 	bl	80054d0 <HAL_TIM_Base_Start_IT>
			ST7735_WriteString(COORD_X2_DEFEATMSG, COORD_Y_DEFEATMSG, "RO", Font_16x26, WHITE, BLUE);
 8001938:	4b4a      	ldr	r3, [pc, #296]	@ (8001a64 <geniusGame+0x2dc>)
 800193a:	221f      	movs	r2, #31
 800193c:	9202      	str	r2, [sp, #8]
 800193e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001942:	9201      	str	r2, [sp, #4]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	9200      	str	r2, [sp, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a49      	ldr	r2, [pc, #292]	@ (8001a70 <geniusGame+0x2e8>)
 800194c:	2136      	movs	r1, #54	@ 0x36
 800194e:	2037      	movs	r0, #55	@ 0x37
 8001950:	f7ff fd04 	bl	800135c <ST7735_WriteString>
			HAL_Delay(250);
 8001954:	20fa      	movs	r0, #250	@ 0xfa
 8001956:	f000 ffdf 	bl	8002918 <HAL_Delay>
			HAL_TIM_Base_Stop_IT(&htim10);
 800195a:	4844      	ldr	r0, [pc, #272]	@ (8001a6c <geniusGame+0x2e4>)
 800195c:	f003 fe28 	bl	80055b0 <HAL_TIM_Base_Stop_IT>

			HAL_Delay(50);
 8001960:	2032      	movs	r0, #50	@ 0x32
 8001962:	f000 ffd9 	bl	8002918 <HAL_Delay>

			HAL_TIM_Base_Start_IT(&htim7);
 8001966:	4843      	ldr	r0, [pc, #268]	@ (8001a74 <geniusGame+0x2ec>)
 8001968:	f003 fdb2 	bl	80054d0 <HAL_TIM_Base_Start_IT>
			ST7735_WriteString(COORD_X3_DEFEATMSG, COORD_Y_DEFEATMSG, "TA", Font_16x26, WHITE, BLUE);
 800196c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a64 <geniusGame+0x2dc>)
 800196e:	221f      	movs	r2, #31
 8001970:	9202      	str	r2, [sp, #8]
 8001972:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001976:	9201      	str	r2, [sp, #4]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	9200      	str	r2, [sp, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a78 <geniusGame+0x2f0>)
 8001980:	2136      	movs	r1, #54	@ 0x36
 8001982:	2057      	movs	r0, #87	@ 0x57
 8001984:	f7ff fcea 	bl	800135c <ST7735_WriteString>
			HAL_Delay(250);
 8001988:	20fa      	movs	r0, #250	@ 0xfa
 800198a:	f000 ffc5 	bl	8002918 <HAL_Delay>
			HAL_TIM_Base_Stop_IT(&htim7);
 800198e:	4839      	ldr	r0, [pc, #228]	@ (8001a74 <geniusGame+0x2ec>)
 8001990:	f003 fe0e 	bl	80055b0 <HAL_TIM_Base_Stop_IT>

			snprintf(buffer, 40, "%i pontos", score);
 8001994:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001998:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 800199c:	4a37      	ldr	r2, [pc, #220]	@ (8001a7c <geniusGame+0x2f4>)
 800199e:	2128      	movs	r1, #40	@ 0x28
 80019a0:	f005 fa44 	bl	8006e2c <sniprintf>

			if(score >= 10)
 80019a4:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80019a8:	2b09      	cmp	r3, #9
 80019aa:	dd21      	ble.n	80019f0 <geniusGame+0x268>
			{
				ST7735_WriteString(COORD_X_FINALMSG, COORD_Y_FINALMSG+1, buffer, Font_7x10, BLACK, WHITE);
 80019ac:	4b34      	ldr	r3, [pc, #208]	@ (8001a80 <geniusGame+0x2f8>)
 80019ae:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80019b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019b6:	9202      	str	r2, [sp, #8]
 80019b8:	2200      	movs	r2, #0
 80019ba:	9201      	str	r2, [sp, #4]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	9200      	str	r2, [sp, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	460a      	mov	r2, r1
 80019c4:	2151      	movs	r1, #81	@ 0x51
 80019c6:	2024      	movs	r0, #36	@ 0x24
 80019c8:	f7ff fcc8 	bl	800135c <ST7735_WriteString>
				drawRect(COORD_X_FINALMSG-1, COORD_Y_FINALMSG, 56+2+7, 11+1, BLUE);
 80019cc:	231f      	movs	r3, #31
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	230c      	movs	r3, #12
 80019d2:	2241      	movs	r2, #65	@ 0x41
 80019d4:	2150      	movs	r1, #80	@ 0x50
 80019d6:	2023      	movs	r0, #35	@ 0x23
 80019d8:	f7ff f904 	bl	8000be4 <drawRect>
				drawRect(COORD_X_FINALMSG, COORD_Y_FINALMSG, 56+7, 11, WHITE);
 80019dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	230b      	movs	r3, #11
 80019e4:	223f      	movs	r2, #63	@ 0x3f
 80019e6:	2150      	movs	r1, #80	@ 0x50
 80019e8:	2024      	movs	r0, #36	@ 0x24
 80019ea:	f7ff f8fb 	bl	8000be4 <drawRect>
 80019ee:	e020      	b.n	8001a32 <geniusGame+0x2aa>
			}
			else
			{
				ST7735_WriteString(COORD_X_FINALMSG, COORD_Y_FINALMSG+1, buffer, Font_7x10, BLACK, WHITE);
 80019f0:	4b23      	ldr	r3, [pc, #140]	@ (8001a80 <geniusGame+0x2f8>)
 80019f2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80019f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019fa:	9202      	str	r2, [sp, #8]
 80019fc:	2200      	movs	r2, #0
 80019fe:	9201      	str	r2, [sp, #4]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	9200      	str	r2, [sp, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	460a      	mov	r2, r1
 8001a08:	2151      	movs	r1, #81	@ 0x51
 8001a0a:	2024      	movs	r0, #36	@ 0x24
 8001a0c:	f7ff fca6 	bl	800135c <ST7735_WriteString>
				drawRect(COORD_X_FINALMSG-1, COORD_Y_FINALMSG, 56+2, 11+1, BLUE);
 8001a10:	231f      	movs	r3, #31
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	230c      	movs	r3, #12
 8001a16:	223a      	movs	r2, #58	@ 0x3a
 8001a18:	2150      	movs	r1, #80	@ 0x50
 8001a1a:	2023      	movs	r0, #35	@ 0x23
 8001a1c:	f7ff f8e2 	bl	8000be4 <drawRect>
				drawRect(COORD_X_FINALMSG, COORD_Y_FINALMSG, 56, 11, WHITE);
 8001a20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	230b      	movs	r3, #11
 8001a28:	2238      	movs	r2, #56	@ 0x38
 8001a2a:	2150      	movs	r1, #80	@ 0x50
 8001a2c:	2024      	movs	r0, #36	@ 0x24
 8001a2e:	f7ff f8d9 	bl	8000be4 <drawRect>
	while (!defeat)
 8001a32:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f43f aeb1 	beq.w	800179e <geniusGame+0x16>
			}
		}
	}

	return defeat;
 8001a3c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	f507 7738 	add.w	r7, r7, #736	@ 0x2e0
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	08008154 	.word	0x08008154
 8001a50:	20000008 	.word	0x20000008
 8001a54:	08008158 	.word	0x08008158
 8001a58:	200002d8 	.word	0x200002d8
 8001a5c:	200000a8 	.word	0x200000a8
 8001a60:	20000248 	.word	0x20000248
 8001a64:	20000010 	.word	0x20000010
 8001a68:	0800815c 	.word	0x0800815c
 8001a6c:	20000200 	.word	0x20000200
 8001a70:	08008160 	.word	0x08008160
 8001a74:	200001b8 	.word	0x200001b8
 8001a78:	08008164 	.word	0x08008164
 8001a7c:	08008168 	.word	0x08008168
 8001a80:	20000000 	.word	0x20000000

08001a84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	@ 0x28
 8001a88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b41      	ldr	r3, [pc, #260]	@ (8001ba4 <MX_GPIO_Init+0x120>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a40      	ldr	r2, [pc, #256]	@ (8001ba4 <MX_GPIO_Init+0x120>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba4 <MX_GPIO_Init+0x120>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba4 <MX_GPIO_Init+0x120>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a39      	ldr	r2, [pc, #228]	@ (8001ba4 <MX_GPIO_Init+0x120>)
 8001ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b37      	ldr	r3, [pc, #220]	@ (8001ba4 <MX_GPIO_Init+0x120>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b33      	ldr	r3, [pc, #204]	@ (8001ba4 <MX_GPIO_Init+0x120>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a32      	ldr	r2, [pc, #200]	@ (8001ba4 <MX_GPIO_Init+0x120>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b30      	ldr	r3, [pc, #192]	@ (8001ba4 <MX_GPIO_Init+0x120>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba4 <MX_GPIO_Init+0x120>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba4 <MX_GPIO_Init+0x120>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b29      	ldr	r3, [pc, #164]	@ (8001ba4 <MX_GPIO_Init+0x120>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ledError_Pin|ledProceed_Pin|RESET_Pin, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2183      	movs	r1, #131	@ 0x83
 8001b0e:	4826      	ldr	r0, [pc, #152]	@ (8001ba8 <MX_GPIO_Init+0x124>)
 8001b10:	f001 fa76 	bl	8003000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, buzzer_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2141      	movs	r1, #65	@ 0x41
 8001b18:	4824      	ldr	r0, [pc, #144]	@ (8001bac <MX_GPIO_Init+0x128>)
 8001b1a:	f001 fa71 	bl	8003000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b24:	4822      	ldr	r0, [pc, #136]	@ (8001bb0 <MX_GPIO_Init+0x12c>)
 8001b26:	f001 fa6b 	bl	8003000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 8001b2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	481a      	ldr	r0, [pc, #104]	@ (8001ba8 <MX_GPIO_Init+0x124>)
 8001b40:	f001 f8b2 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ledError_Pin ledProceed_Pin RESET_Pin */
  GPIO_InitStruct.Pin = ledError_Pin|ledProceed_Pin|RESET_Pin;
 8001b44:	2383      	movs	r3, #131	@ 0x83
 8001b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4813      	ldr	r0, [pc, #76]	@ (8001ba8 <MX_GPIO_Init+0x124>)
 8001b5c:	f001 f8a4 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzer_Pin PB6 */
  GPIO_InitStruct.Pin = buzzer_Pin|GPIO_PIN_6;
 8001b60:	2341      	movs	r3, #65	@ 0x41
 8001b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b64:	2301      	movs	r3, #1
 8001b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4619      	mov	r1, r3
 8001b76:	480d      	ldr	r0, [pc, #52]	@ (8001bac <MX_GPIO_Init+0x128>)
 8001b78:	f001 f896 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	4806      	ldr	r0, [pc, #24]	@ (8001bb0 <MX_GPIO_Init+0x12c>)
 8001b96:	f001 f887 	bl	8002ca8 <HAL_GPIO_Init>

}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	@ 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40020000 	.word	0x40020000

08001bb4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <MX_I2C1_Init+0x50>)
 8001bba:	4a13      	ldr	r2, [pc, #76]	@ (8001c08 <MX_I2C1_Init+0x54>)
 8001bbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <MX_I2C1_Init+0x50>)
 8001bc0:	4a12      	ldr	r2, [pc, #72]	@ (8001c0c <MX_I2C1_Init+0x58>)
 8001bc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <MX_I2C1_Init+0x50>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	@ (8001c04 <MX_I2C1_Init+0x50>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <MX_I2C1_Init+0x50>)
 8001bd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <MX_I2C1_Init+0x50>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bde:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <MX_I2C1_Init+0x50>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001be4:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <MX_I2C1_Init+0x50>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <MX_I2C1_Init+0x50>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bf0:	4804      	ldr	r0, [pc, #16]	@ (8001c04 <MX_I2C1_Init+0x50>)
 8001bf2:	f001 fa39 	bl	8003068 <HAL_I2C_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bfc:	f000 fa26 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200000ac 	.word	0x200000ac
 8001c08:	40005400 	.word	0x40005400
 8001c0c:	000186a0 	.word	0x000186a0

08001c10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	@ 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a19      	ldr	r2, [pc, #100]	@ (8001c94 <HAL_I2C_MspInit+0x84>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d12c      	bne.n	8001c8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	4b18      	ldr	r3, [pc, #96]	@ (8001c98 <HAL_I2C_MspInit+0x88>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	4a17      	ldr	r2, [pc, #92]	@ (8001c98 <HAL_I2C_MspInit+0x88>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <HAL_I2C_MspInit+0x88>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c54:	2312      	movs	r3, #18
 8001c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c60:	2304      	movs	r3, #4
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480c      	ldr	r0, [pc, #48]	@ (8001c9c <HAL_I2C_MspInit+0x8c>)
 8001c6c:	f001 f81c 	bl	8002ca8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <HAL_I2C_MspInit+0x88>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	4a07      	ldr	r2, [pc, #28]	@ (8001c98 <HAL_I2C_MspInit+0x88>)
 8001c7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <HAL_I2C_MspInit+0x88>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3728      	adds	r7, #40	@ 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40005400 	.word	0x40005400
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40020400 	.word	0x40020400

08001ca0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ca8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001cac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001cb8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001cbc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001cc0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00b      	beq.n	8001ce0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001cc8:	e000      	b.n	8001ccc <ITM_SendChar+0x2c>
    {
      __NOP();
 8001cca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ccc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f9      	beq.n	8001cca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001cd6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001ce0:	687b      	ldr	r3, [r7, #4]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001cf4:	f000 fd9e 	bl	8002834 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001cf8:	f000 f86a 	bl	8001dd0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001cfc:	f7ff fec2 	bl	8001a84 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001d00:	f000 f9ac 	bl	800205c <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8001d04:	f000 fcf2 	bl	80026ec <MX_USART2_UART_Init>
	MX_TIM10_Init();
 8001d08:	f000 fbe4 	bl	80024d4 <MX_TIM10_Init>
	MX_I2C1_Init();
 8001d0c:	f7ff ff52 	bl	8001bb4 <MX_I2C1_Init>
	MX_TIM11_Init();
 8001d10:	f000 fc04 	bl	800251c <MX_TIM11_Init>
	MX_TIM6_Init();
 8001d14:	f000 fb72 	bl	80023fc <MX_TIM6_Init>
	MX_TIM7_Init();
 8001d18:	f000 fba6 	bl	8002468 <MX_TIM7_Init>
	MX_TIM13_Init();
 8001d1c:	f000 fc22 	bl	8002564 <MX_TIM13_Init>
	/* USER CODE BEGIN 2 */

	//Initializing peripheral
	MPU9250_Init();
 8001d20:	f7fe ffbc 	bl	8000c9c <MPU9250_Init>
	ST7735_Init(0);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff f9b7 	bl	8001098 <ST7735_Init>
	geniusInit();
 8001d2a:	f7ff fbf5 	bl	8001518 <geniusInit>
	geniusDifficulty(diff);
 8001d2e:	4b20      	ldr	r3, [pc, #128]	@ (8001db0 <main+0xc0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fc46 	bl	80015c4 <geniusDifficulty>
	HAL_UART_Receive_IT(&huart2, &dataMonitor, 1);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	491e      	ldr	r1, [pc, #120]	@ (8001db4 <main+0xc4>)
 8001d3c:	481e      	ldr	r0, [pc, #120]	@ (8001db8 <main+0xc8>)
 8001d3e:	f003 ffcc 	bl	8005cda <HAL_UART_Receive_IT>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		checkVictory = 1;
 8001d42:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <main+0xcc>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
		resetGame = HAL_GPIO_ReadPin(userButton_GPIO_Port, userButton_Pin);
 8001d48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d4c:	481c      	ldr	r0, [pc, #112]	@ (8001dc0 <main+0xd0>)
 8001d4e:	f001 f93f 	bl	8002fd0 <HAL_GPIO_ReadPin>
 8001d52:	4603      	mov	r3, r0
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <main+0xd4>)
 8001d58:	601a      	str	r2, [r3, #0]
		if (resetGame == GPIO_PIN_RESET)
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <main+0xd4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10c      	bne.n	8001d7c <main+0x8c>
		{
			checkVictory = 0;
 8001d62:	4b16      	ldr	r3, [pc, #88]	@ (8001dbc <main+0xcc>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
			geniusInit();
 8001d68:	f7ff fbd6 	bl	8001518 <geniusInit>
			geniusDifficulty(diff);
 8001d6c:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <main+0xc0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fc27 	bl	80015c4 <geniusDifficulty>
			HAL_Delay(200);
 8001d76:	20c8      	movs	r0, #200	@ 0xc8
 8001d78:	f000 fdce 	bl	8002918 <HAL_Delay>
		}

		if (checkVictory == 0)
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <main+0xcc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1de      	bne.n	8001d42 <main+0x52>
		{
			x = MPU9250_Gyro_ReadX();
 8001d84:	f7ff f858 	bl	8000e38 <MPU9250_Gyro_ReadX>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <main+0xd8>)
 8001d8e:	801a      	strh	r2, [r3, #0]
			y = MPU9250_Gyro_ReadY();
 8001d90:	f7ff f870 	bl	8000e74 <MPU9250_Gyro_ReadY>
 8001d94:	4603      	mov	r3, r0
 8001d96:	b21a      	sxth	r2, r3
 8001d98:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <main+0xdc>)
 8001d9a:	801a      	strh	r2, [r3, #0]
			checkVictory = geniusGame();
 8001d9c:	f7ff fcf4 	bl	8001788 <geniusGame>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4a06      	ldr	r2, [pc, #24]	@ (8001dbc <main+0xcc>)
 8001da4:	6013      	str	r3, [r2, #0]
			HAL_Delay(100);
 8001da6:	2064      	movs	r0, #100	@ 0x64
 8001da8:	f000 fdb6 	bl	8002918 <HAL_Delay>
		checkVictory = 1;
 8001dac:	e7c9      	b.n	8001d42 <main+0x52>
 8001dae:	bf00      	nop
 8001db0:	20000110 	.word	0x20000110
 8001db4:	20000104 	.word	0x20000104
 8001db8:	200002d8 	.word	0x200002d8
 8001dbc:	20000108 	.word	0x20000108
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	2000010c 	.word	0x2000010c
 8001dc8:	20000100 	.word	0x20000100
 8001dcc:	20000102 	.word	0x20000102

08001dd0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b094      	sub	sp, #80	@ 0x50
 8001dd4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	2234      	movs	r2, #52	@ 0x34
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f005 f8bb 	bl	8006f5a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de4:	f107 0308 	add.w	r3, r7, #8
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea4 <SystemClock_Config+0xd4>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	4a29      	ldr	r2, [pc, #164]	@ (8001ea4 <SystemClock_Config+0xd4>)
 8001dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e04:	4b27      	ldr	r3, [pc, #156]	@ (8001ea4 <SystemClock_Config+0xd4>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e10:	2300      	movs	r3, #0
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <SystemClock_Config+0xd8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e1c:	4a22      	ldr	r2, [pc, #136]	@ (8001ea8 <SystemClock_Config+0xd8>)
 8001e1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b20      	ldr	r3, [pc, #128]	@ (8001ea8 <SystemClock_Config+0xd8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e30:	2301      	movs	r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e38:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e42:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001e44:	2304      	movs	r3, #4
 8001e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 84;
 8001e48:	2354      	movs	r3, #84	@ 0x54
 8001e4a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e50:	2302      	movs	r3, #2
 8001e52:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001e54:	2302      	movs	r3, #2
 8001e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e58:	f107 031c 	add.w	r3, r7, #28
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f002 fd9f 	bl	80049a0 <HAL_RCC_OscConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8001e68:	f000 f8f0 	bl	800204c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e6c:	230f      	movs	r3, #15
 8001e6e:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e70:	2302      	movs	r3, #2
 8001e72:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e7c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e82:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	2102      	movs	r1, #2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f002 fa3e 	bl	800430c <HAL_RCC_ClockConfig>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001e96:	f000 f8d9 	bl	800204c <Error_Handler>
	}
}
 8001e9a:	bf00      	nop
 8001e9c:	3750      	adds	r7, #80	@ 0x50
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40007000 	.word	0x40007000

08001eac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b090      	sub	sp, #64	@ 0x40
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a31      	ldr	r2, [pc, #196]	@ (8001f80 <HAL_UART_RxCpltCallback+0xd4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d15c      	bne.n	8001f78 <HAL_UART_RxCpltCallback+0xcc>
		char debug[50];

		switch (dataMonitor) {
 8001ebe:	4b31      	ldr	r3, [pc, #196]	@ (8001f84 <HAL_UART_RxCpltCallback+0xd8>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	3b30      	subs	r3, #48	@ 0x30
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d83f      	bhi.n	8001f48 <HAL_UART_RxCpltCallback+0x9c>
 8001ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed0 <HAL_UART_RxCpltCallback+0x24>)
 8001eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ece:	bf00      	nop
 8001ed0:	08001ee1 	.word	0x08001ee1
 8001ed4:	08001efb 	.word	0x08001efb
 8001ed8:	08001f15 	.word	0x08001f15
 8001edc:	08001f2f 	.word	0x08001f2f
		case '0':
			sprintf(debug, "Difficulty set to easy\n", dataMonitor);
 8001ee0:	4b28      	ldr	r3, [pc, #160]	@ (8001f84 <HAL_UART_RxCpltCallback+0xd8>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	4927      	ldr	r1, [pc, #156]	@ (8001f88 <HAL_UART_RxCpltCallback+0xdc>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f004 ffd1 	bl	8006e94 <siprintf>
			diff = 0;
 8001ef2:	4b26      	ldr	r3, [pc, #152]	@ (8001f8c <HAL_UART_RxCpltCallback+0xe0>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
			break;
 8001ef8:	e027      	b.n	8001f4a <HAL_UART_RxCpltCallback+0x9e>
		case '1':
			sprintf(debug, "Difficulty set to medium\n", dataMonitor);
 8001efa:	4b22      	ldr	r3, [pc, #136]	@ (8001f84 <HAL_UART_RxCpltCallback+0xd8>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	4922      	ldr	r1, [pc, #136]	@ (8001f90 <HAL_UART_RxCpltCallback+0xe4>)
 8001f06:	4618      	mov	r0, r3
 8001f08:	f004 ffc4 	bl	8006e94 <siprintf>
			diff = 1;
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <HAL_UART_RxCpltCallback+0xe0>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
			break;
 8001f12:	e01a      	b.n	8001f4a <HAL_UART_RxCpltCallback+0x9e>
		case '2':
			sprintf(debug, "Difficulty set to hard\n", dataMonitor);
 8001f14:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <HAL_UART_RxCpltCallback+0xd8>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f107 030c 	add.w	r3, r7, #12
 8001f1e:	491d      	ldr	r1, [pc, #116]	@ (8001f94 <HAL_UART_RxCpltCallback+0xe8>)
 8001f20:	4618      	mov	r0, r3
 8001f22:	f004 ffb7 	bl	8006e94 <siprintf>
			diff = 2;
 8001f26:	4b19      	ldr	r3, [pc, #100]	@ (8001f8c <HAL_UART_RxCpltCallback+0xe0>)
 8001f28:	2202      	movs	r2, #2
 8001f2a:	601a      	str	r2, [r3, #0]
			break;
 8001f2c:	e00d      	b.n	8001f4a <HAL_UART_RxCpltCallback+0x9e>
		case '3':
			sprintf(debug, "Difficulty set to impossible. Good luck :)\n", dataMonitor);
 8001f2e:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <HAL_UART_RxCpltCallback+0xd8>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	4917      	ldr	r1, [pc, #92]	@ (8001f98 <HAL_UART_RxCpltCallback+0xec>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 ffaa 	bl	8006e94 <siprintf>
			diff = 3;
 8001f40:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <HAL_UART_RxCpltCallback+0xe0>)
 8001f42:	2203      	movs	r2, #3
 8001f44:	601a      	str	r2, [r3, #0]
			break;
 8001f46:	e000      	b.n	8001f4a <HAL_UART_RxCpltCallback+0x9e>
		default:
			break;
 8001f48:	bf00      	nop
		}
		HAL_UART_Transmit_IT(&huart2, debug, strlen(debug));
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe f95e 	bl	8000210 <strlen>
 8001f54:	4603      	mov	r3, r0
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	480f      	ldr	r0, [pc, #60]	@ (8001f9c <HAL_UART_RxCpltCallback+0xf0>)
 8001f60:	f003 fe85 	bl	8005c6e <HAL_UART_Transmit_IT>
		geniusDifficulty(diff);
 8001f64:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <HAL_UART_RxCpltCallback+0xe0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fb2b 	bl	80015c4 <geniusDifficulty>
		HAL_UART_Receive_IT(&huart2, &dataMonitor, 1);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4904      	ldr	r1, [pc, #16]	@ (8001f84 <HAL_UART_RxCpltCallback+0xd8>)
 8001f72:	480a      	ldr	r0, [pc, #40]	@ (8001f9c <HAL_UART_RxCpltCallback+0xf0>)
 8001f74:	f003 feb1 	bl	8005cda <HAL_UART_Receive_IT>
	}
}
 8001f78:	bf00      	nop
 8001f7a:	3740      	adds	r7, #64	@ 0x40
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40004400 	.word	0x40004400
 8001f84:	20000104 	.word	0x20000104
 8001f88:	08008174 	.word	0x08008174
 8001f8c:	20000110 	.word	0x20000110
 8001f90:	0800818c 	.word	0x0800818c
 8001f94:	080081a8 	.word	0x080081a8
 8001f98:	080081c0 	.word	0x080081c0
 8001f9c:	200002d8 	.word	0x200002d8

08001fa0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a14      	ldr	r2, [pc, #80]	@ (8002000 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d104      	bne.n	8001fbc <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin(buzzer_GPIO_Port, buzzer_Pin);
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	4813      	ldr	r0, [pc, #76]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001fb6:	f001 f83c 	bl	8003032 <HAL_GPIO_TogglePin>
	}
	else if(htim->Instance == TIM6)
	{
		HAL_GPIO_TogglePin(buzzer_GPIO_Port, buzzer_Pin);
	}
}
 8001fba:	e01c      	b.n	8001ff6 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if(htim->Instance == TIM10)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a11      	ldr	r2, [pc, #68]	@ (8002008 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d104      	bne.n	8001fd0 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_GPIO_TogglePin(buzzer_GPIO_Port, buzzer_Pin);
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	480e      	ldr	r0, [pc, #56]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001fca:	f001 f832 	bl	8003032 <HAL_GPIO_TogglePin>
}
 8001fce:	e012      	b.n	8001ff6 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if(htim->Instance == TIM7)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800200c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d104      	bne.n	8001fe4 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_GPIO_TogglePin(buzzer_GPIO_Port, buzzer_Pin);
 8001fda:	2101      	movs	r1, #1
 8001fdc:	4809      	ldr	r0, [pc, #36]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001fde:	f001 f828 	bl	8003032 <HAL_GPIO_TogglePin>
}
 8001fe2:	e008      	b.n	8001ff6 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if(htim->Instance == TIM6)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a09      	ldr	r2, [pc, #36]	@ (8002010 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d103      	bne.n	8001ff6 <HAL_TIM_PeriodElapsedCallback+0x56>
		HAL_GPIO_TogglePin(buzzer_GPIO_Port, buzzer_Pin);
 8001fee:	2101      	movs	r1, #1
 8001ff0:	4804      	ldr	r0, [pc, #16]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001ff2:	f001 f81e 	bl	8003032 <HAL_GPIO_TogglePin>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40014800 	.word	0x40014800
 8002004:	40020400 	.word	0x40020400
 8002008:	40014400 	.word	0x40014400
 800200c:	40001400 	.word	0x40001400
 8002010:	40001000 	.word	0x40001000

08002014 <_write>:

int _write(int file, char *ptr, int len)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	e009      	b.n	800203a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	60ba      	str	r2, [r7, #8]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fe36 	bl	8001ca0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	3301      	adds	r3, #1
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	429a      	cmp	r2, r3
 8002040:	dbf1      	blt.n	8002026 <_write+0x12>
	}
	return len;
 8002042:	687b      	ldr	r3, [r7, #4]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002060:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <MX_SPI1_Init+0x68>)
 8002062:	4a19      	ldr	r2, [pc, #100]	@ (80020c8 <MX_SPI1_Init+0x6c>)
 8002064:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002066:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <MX_SPI1_Init+0x68>)
 8002068:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800206c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800206e:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <MX_SPI1_Init+0x68>)
 8002070:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002074:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002076:	4b13      	ldr	r3, [pc, #76]	@ (80020c4 <MX_SPI1_Init+0x68>)
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800207c:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <MX_SPI1_Init+0x68>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002082:	4b10      	ldr	r3, [pc, #64]	@ (80020c4 <MX_SPI1_Init+0x68>)
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002088:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <MX_SPI1_Init+0x68>)
 800208a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800208e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002090:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <MX_SPI1_Init+0x68>)
 8002092:	2218      	movs	r2, #24
 8002094:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002096:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <MX_SPI1_Init+0x68>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800209c:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <MX_SPI1_Init+0x68>)
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a2:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <MX_SPI1_Init+0x68>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <MX_SPI1_Init+0x68>)
 80020aa:	220a      	movs	r2, #10
 80020ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020ae:	4805      	ldr	r0, [pc, #20]	@ (80020c4 <MX_SPI1_Init+0x68>)
 80020b0:	f002 ff14 	bl	8004edc <HAL_SPI_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80020ba:	f7ff ffc7 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000114 	.word	0x20000114
 80020c8:	40013000 	.word	0x40013000

080020cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	@ 0x28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a19      	ldr	r2, [pc, #100]	@ (8002150 <HAL_SPI_MspInit+0x84>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d12b      	bne.n	8002146 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	4b18      	ldr	r3, [pc, #96]	@ (8002154 <HAL_SPI_MspInit+0x88>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	4a17      	ldr	r2, [pc, #92]	@ (8002154 <HAL_SPI_MspInit+0x88>)
 80020f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <HAL_SPI_MspInit+0x88>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <HAL_SPI_MspInit+0x88>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	4a10      	ldr	r2, [pc, #64]	@ (8002154 <HAL_SPI_MspInit+0x88>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6313      	str	r3, [r2, #48]	@ 0x30
 800211a:	4b0e      	ldr	r3, [pc, #56]	@ (8002154 <HAL_SPI_MspInit+0x88>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002126:	23a0      	movs	r3, #160	@ 0xa0
 8002128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002132:	2303      	movs	r3, #3
 8002134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002136:	2305      	movs	r3, #5
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	4619      	mov	r1, r3
 8002140:	4805      	ldr	r0, [pc, #20]	@ (8002158 <HAL_SPI_MspInit+0x8c>)
 8002142:	f000 fdb1 	bl	8002ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002146:	bf00      	nop
 8002148:	3728      	adds	r7, #40	@ 0x28
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40013000 	.word	0x40013000
 8002154:	40023800 	.word	0x40023800
 8002158:	40020000 	.word	0x40020000

0800215c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <HAL_MspInit+0x4c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216a:	4a0f      	ldr	r2, [pc, #60]	@ (80021a8 <HAL_MspInit+0x4c>)
 800216c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002170:	6453      	str	r3, [r2, #68]	@ 0x44
 8002172:	4b0d      	ldr	r3, [pc, #52]	@ (80021a8 <HAL_MspInit+0x4c>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <HAL_MspInit+0x4c>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	4a08      	ldr	r2, [pc, #32]	@ (80021a8 <HAL_MspInit+0x4c>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	@ 0x40
 800218e:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_MspInit+0x4c>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800

080021ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <NMI_Handler+0x4>

080021b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <HardFault_Handler+0x4>

080021bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <MemManage_Handler+0x4>

080021c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <BusFault_Handler+0x4>

080021cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <UsageFault_Handler+0x4>

080021d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002202:	f000 fb69 	bl	80028d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002210:	4802      	ldr	r0, [pc, #8]	@ (800221c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002212:	f003 f9fc 	bl	800560e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000200 	.word	0x20000200

08002220 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002224:	4802      	ldr	r0, [pc, #8]	@ (8002230 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002226:	f003 f9f2 	bl	800560e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000248 	.word	0x20000248

08002234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002238:	4802      	ldr	r0, [pc, #8]	@ (8002244 <USART2_IRQHandler+0x10>)
 800223a:	f003 fd73 	bl	8005d24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200002d8 	.word	0x200002d8

08002248 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800224c:	4802      	ldr	r0, [pc, #8]	@ (8002258 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800224e:	f003 f9de 	bl	800560e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000290 	.word	0x20000290

0800225c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002260:	4802      	ldr	r0, [pc, #8]	@ (800226c <TIM6_DAC_IRQHandler+0x10>)
 8002262:	f003 f9d4 	bl	800560e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000170 	.word	0x20000170

08002270 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <TIM7_IRQHandler+0x10>)
 8002276:	f003 f9ca 	bl	800560e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200001b8 	.word	0x200001b8

08002284 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return 1;
 8002288:	2301      	movs	r3, #1
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <_kill>:

int _kill(int pid, int sig)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800229e:	f004 febd 	bl	800701c <__errno>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2216      	movs	r2, #22
 80022a6:	601a      	str	r2, [r3, #0]
  return -1;
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_exit>:

void _exit (int status)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ffe7 	bl	8002294 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022c6:	bf00      	nop
 80022c8:	e7fd      	b.n	80022c6 <_exit+0x12>

080022ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e00a      	b.n	80022f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022dc:	f3af 8000 	nop.w
 80022e0:	4601      	mov	r1, r0
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	60ba      	str	r2, [r7, #8]
 80022e8:	b2ca      	uxtb	r2, r1
 80022ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3301      	adds	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	dbf0      	blt.n	80022dc <_read+0x12>
  }

  return len;
 80022fa:	687b      	ldr	r3, [r7, #4]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800230c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800232c:	605a      	str	r2, [r3, #4]
  return 0;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_isatty>:

int _isatty(int file)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002344:	2301      	movs	r3, #1
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002374:	4a14      	ldr	r2, [pc, #80]	@ (80023c8 <_sbrk+0x5c>)
 8002376:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <_sbrk+0x60>)
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002380:	4b13      	ldr	r3, [pc, #76]	@ (80023d0 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002388:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <_sbrk+0x64>)
 800238a:	4a12      	ldr	r2, [pc, #72]	@ (80023d4 <_sbrk+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238e:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800239c:	f004 fe3e 	bl	800701c <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	220c      	movs	r2, #12
 80023a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	e009      	b.n	80023c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ac:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b2:	4b07      	ldr	r3, [pc, #28]	@ (80023d0 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a05      	ldr	r2, [pc, #20]	@ (80023d0 <_sbrk+0x64>)
 80023bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20020000 	.word	0x20020000
 80023cc:	00000400 	.word	0x00000400
 80023d0:	2000016c 	.word	0x2000016c
 80023d4:	20000470 	.word	0x20000470

080023d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <SystemInit+0x20>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	4a05      	ldr	r2, [pc, #20]	@ (80023f8 <SystemInit+0x20>)
 80023e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <MX_TIM6_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim13;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002402:	463b      	mov	r3, r7
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800240a:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <MX_TIM6_Init+0x64>)
 800240c:	4a15      	ldr	r2, [pc, #84]	@ (8002464 <MX_TIM6_Init+0x68>)
 800240e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 150;
 8002410:	4b13      	ldr	r3, [pc, #76]	@ (8002460 <MX_TIM6_Init+0x64>)
 8002412:	2296      	movs	r2, #150	@ 0x96
 8002414:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002416:	4b12      	ldr	r3, [pc, #72]	@ (8002460 <MX_TIM6_Init+0x64>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800241c:	4b10      	ldr	r3, [pc, #64]	@ (8002460 <MX_TIM6_Init+0x64>)
 800241e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002422:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002424:	4b0e      	ldr	r3, [pc, #56]	@ (8002460 <MX_TIM6_Init+0x64>)
 8002426:	2200      	movs	r2, #0
 8002428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800242a:	480d      	ldr	r0, [pc, #52]	@ (8002460 <MX_TIM6_Init+0x64>)
 800242c:	f003 f800 	bl	8005430 <HAL_TIM_Base_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002436:	f7ff fe09 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002442:	463b      	mov	r3, r7
 8002444:	4619      	mov	r1, r3
 8002446:	4806      	ldr	r0, [pc, #24]	@ (8002460 <MX_TIM6_Init+0x64>)
 8002448:	f003 faa6 	bl	8005998 <HAL_TIMEx_MasterConfigSynchronization>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002452:	f7ff fdfb 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000170 	.word	0x20000170
 8002464:	40001000 	.word	0x40001000

08002468 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800246e:	463b      	mov	r3, r7
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002476:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <MX_TIM7_Init+0x64>)
 8002478:	4a15      	ldr	r2, [pc, #84]	@ (80024d0 <MX_TIM7_Init+0x68>)
 800247a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 140;
 800247c:	4b13      	ldr	r3, [pc, #76]	@ (80024cc <MX_TIM7_Init+0x64>)
 800247e:	228c      	movs	r2, #140	@ 0x8c
 8002480:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002482:	4b12      	ldr	r3, [pc, #72]	@ (80024cc <MX_TIM7_Init+0x64>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8002488:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <MX_TIM7_Init+0x64>)
 800248a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800248e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002490:	4b0e      	ldr	r3, [pc, #56]	@ (80024cc <MX_TIM7_Init+0x64>)
 8002492:	2200      	movs	r2, #0
 8002494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002496:	480d      	ldr	r0, [pc, #52]	@ (80024cc <MX_TIM7_Init+0x64>)
 8002498:	f002 ffca 	bl	8005430 <HAL_TIM_Base_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80024a2:	f7ff fdd3 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80024ae:	463b      	mov	r3, r7
 80024b0:	4619      	mov	r1, r3
 80024b2:	4806      	ldr	r0, [pc, #24]	@ (80024cc <MX_TIM7_Init+0x64>)
 80024b4:	f003 fa70 	bl	8005998 <HAL_TIMEx_MasterConfigSynchronization>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80024be:	f7ff fdc5 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200001b8 	.word	0x200001b8
 80024d0:	40001400 	.word	0x40001400

080024d4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80024d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002514 <MX_TIM10_Init+0x40>)
 80024da:	4a0f      	ldr	r2, [pc, #60]	@ (8002518 <MX_TIM10_Init+0x44>)
 80024dc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 135;
 80024de:	4b0d      	ldr	r3, [pc, #52]	@ (8002514 <MX_TIM10_Init+0x40>)
 80024e0:	2287      	movs	r2, #135	@ 0x87
 80024e2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <MX_TIM10_Init+0x40>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 80024ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <MX_TIM10_Init+0x40>)
 80024ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024f0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f2:	4b08      	ldr	r3, [pc, #32]	@ (8002514 <MX_TIM10_Init+0x40>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <MX_TIM10_Init+0x40>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80024fe:	4805      	ldr	r0, [pc, #20]	@ (8002514 <MX_TIM10_Init+0x40>)
 8002500:	f002 ff96 	bl	8005430 <HAL_TIM_Base_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800250a:	f7ff fd9f 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000200 	.word	0x20000200
 8002518:	40014400 	.word	0x40014400

0800251c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002520:	4b0e      	ldr	r3, [pc, #56]	@ (800255c <MX_TIM11_Init+0x40>)
 8002522:	4a0f      	ldr	r2, [pc, #60]	@ (8002560 <MX_TIM11_Init+0x44>)
 8002524:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 113;
 8002526:	4b0d      	ldr	r3, [pc, #52]	@ (800255c <MX_TIM11_Init+0x40>)
 8002528:	2271      	movs	r2, #113	@ 0x71
 800252a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252c:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <MX_TIM11_Init+0x40>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8002532:	4b0a      	ldr	r3, [pc, #40]	@ (800255c <MX_TIM11_Init+0x40>)
 8002534:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002538:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800253a:	4b08      	ldr	r3, [pc, #32]	@ (800255c <MX_TIM11_Init+0x40>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <MX_TIM11_Init+0x40>)
 8002542:	2200      	movs	r2, #0
 8002544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002546:	4805      	ldr	r0, [pc, #20]	@ (800255c <MX_TIM11_Init+0x40>)
 8002548:	f002 ff72 	bl	8005430 <HAL_TIM_Base_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002552:	f7ff fd7b 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000248 	.word	0x20000248
 8002560:	40014800 	.word	0x40014800

08002564 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002568:	4b0e      	ldr	r3, [pc, #56]	@ (80025a4 <MX_TIM13_Init+0x40>)
 800256a:	4a0f      	ldr	r2, [pc, #60]	@ (80025a8 <MX_TIM13_Init+0x44>)
 800256c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 4199;
 800256e:	4b0d      	ldr	r3, [pc, #52]	@ (80025a4 <MX_TIM13_Init+0x40>)
 8002570:	f241 0267 	movw	r2, #4199	@ 0x1067
 8002574:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002576:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <MX_TIM13_Init+0x40>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800257c:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <MX_TIM13_Init+0x40>)
 800257e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002582:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002584:	4b07      	ldr	r3, [pc, #28]	@ (80025a4 <MX_TIM13_Init+0x40>)
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258a:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <MX_TIM13_Init+0x40>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002590:	4804      	ldr	r0, [pc, #16]	@ (80025a4 <MX_TIM13_Init+0x40>)
 8002592:	f002 ff4d 	bl	8005430 <HAL_TIM_Base_Init>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 800259c:	f7ff fd56 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80025a0:	bf00      	nop
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000290 	.word	0x20000290
 80025a8:	40001c00 	.word	0x40001c00

080025ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a46      	ldr	r2, [pc, #280]	@ (80026d4 <HAL_TIM_Base_MspInit+0x128>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d116      	bne.n	80025ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	4b45      	ldr	r3, [pc, #276]	@ (80026d8 <HAL_TIM_Base_MspInit+0x12c>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	4a44      	ldr	r2, [pc, #272]	@ (80026d8 <HAL_TIM_Base_MspInit+0x12c>)
 80025c8:	f043 0310 	orr.w	r3, r3, #16
 80025cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ce:	4b42      	ldr	r3, [pc, #264]	@ (80026d8 <HAL_TIM_Base_MspInit+0x12c>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	69fb      	ldr	r3, [r7, #28]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	2036      	movs	r0, #54	@ 0x36
 80025e0:	f000 fa99 	bl	8002b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025e4:	2036      	movs	r0, #54	@ 0x36
 80025e6:	f000 fab2 	bl	8002b4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80025ea:	e06e      	b.n	80026ca <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM7)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a3a      	ldr	r2, [pc, #232]	@ (80026dc <HAL_TIM_Base_MspInit+0x130>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d116      	bne.n	8002624 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	4b37      	ldr	r3, [pc, #220]	@ (80026d8 <HAL_TIM_Base_MspInit+0x12c>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	4a36      	ldr	r2, [pc, #216]	@ (80026d8 <HAL_TIM_Base_MspInit+0x12c>)
 8002600:	f043 0320 	orr.w	r3, r3, #32
 8002604:	6413      	str	r3, [r2, #64]	@ 0x40
 8002606:	4b34      	ldr	r3, [pc, #208]	@ (80026d8 <HAL_TIM_Base_MspInit+0x12c>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	2100      	movs	r1, #0
 8002616:	2037      	movs	r0, #55	@ 0x37
 8002618:	f000 fa7d 	bl	8002b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800261c:	2037      	movs	r0, #55	@ 0x37
 800261e:	f000 fa96 	bl	8002b4e <HAL_NVIC_EnableIRQ>
}
 8002622:	e052      	b.n	80026ca <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM10)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a2d      	ldr	r2, [pc, #180]	@ (80026e0 <HAL_TIM_Base_MspInit+0x134>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d116      	bne.n	800265c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	4b29      	ldr	r3, [pc, #164]	@ (80026d8 <HAL_TIM_Base_MspInit+0x12c>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	4a28      	ldr	r2, [pc, #160]	@ (80026d8 <HAL_TIM_Base_MspInit+0x12c>)
 8002638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800263c:	6453      	str	r3, [r2, #68]	@ 0x44
 800263e:	4b26      	ldr	r3, [pc, #152]	@ (80026d8 <HAL_TIM_Base_MspInit+0x12c>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	2019      	movs	r0, #25
 8002650:	f000 fa61 	bl	8002b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002654:	2019      	movs	r0, #25
 8002656:	f000 fa7a 	bl	8002b4e <HAL_NVIC_EnableIRQ>
}
 800265a:	e036      	b.n	80026ca <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM11)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a20      	ldr	r2, [pc, #128]	@ (80026e4 <HAL_TIM_Base_MspInit+0x138>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d116      	bne.n	8002694 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	4b1b      	ldr	r3, [pc, #108]	@ (80026d8 <HAL_TIM_Base_MspInit+0x12c>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266e:	4a1a      	ldr	r2, [pc, #104]	@ (80026d8 <HAL_TIM_Base_MspInit+0x12c>)
 8002670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002674:	6453      	str	r3, [r2, #68]	@ 0x44
 8002676:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <HAL_TIM_Base_MspInit+0x12c>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002682:	2200      	movs	r2, #0
 8002684:	2100      	movs	r1, #0
 8002686:	201a      	movs	r0, #26
 8002688:	f000 fa45 	bl	8002b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800268c:	201a      	movs	r0, #26
 800268e:	f000 fa5e 	bl	8002b4e <HAL_NVIC_EnableIRQ>
}
 8002692:	e01a      	b.n	80026ca <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM13)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a13      	ldr	r2, [pc, #76]	@ (80026e8 <HAL_TIM_Base_MspInit+0x13c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d115      	bne.n	80026ca <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b0d      	ldr	r3, [pc, #52]	@ (80026d8 <HAL_TIM_Base_MspInit+0x12c>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	4a0c      	ldr	r2, [pc, #48]	@ (80026d8 <HAL_TIM_Base_MspInit+0x12c>)
 80026a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ae:	4b0a      	ldr	r3, [pc, #40]	@ (80026d8 <HAL_TIM_Base_MspInit+0x12c>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	202c      	movs	r0, #44	@ 0x2c
 80026c0:	f000 fa29 	bl	8002b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80026c4:	202c      	movs	r0, #44	@ 0x2c
 80026c6:	f000 fa42 	bl	8002b4e <HAL_NVIC_EnableIRQ>
}
 80026ca:	bf00      	nop
 80026cc:	3720      	adds	r7, #32
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40001000 	.word	0x40001000
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40001400 	.word	0x40001400
 80026e0:	40014400 	.word	0x40014400
 80026e4:	40014800 	.word	0x40014800
 80026e8:	40001c00 	.word	0x40001c00

080026ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026f0:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 80026f2:	4a12      	ldr	r2, [pc, #72]	@ (800273c <MX_USART2_UART_Init+0x50>)
 80026f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026f6:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 80026f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002704:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800270a:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002710:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 8002712:	220c      	movs	r2, #12
 8002714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002716:	4b08      	ldr	r3, [pc, #32]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800271c:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 800271e:	2200      	movs	r2, #0
 8002720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002722:	4805      	ldr	r0, [pc, #20]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 8002724:	f003 f9c8 	bl	8005ab8 <HAL_UART_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800272e:	f7ff fc8d 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200002d8 	.word	0x200002d8
 800273c:	40004400 	.word	0x40004400

08002740 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	@ 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1d      	ldr	r2, [pc, #116]	@ (80027d4 <HAL_UART_MspInit+0x94>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d133      	bne.n	80027ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	4b1c      	ldr	r3, [pc, #112]	@ (80027d8 <HAL_UART_MspInit+0x98>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	4a1b      	ldr	r2, [pc, #108]	@ (80027d8 <HAL_UART_MspInit+0x98>)
 800276c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002770:	6413      	str	r3, [r2, #64]	@ 0x40
 8002772:	4b19      	ldr	r3, [pc, #100]	@ (80027d8 <HAL_UART_MspInit+0x98>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <HAL_UART_MspInit+0x98>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	4a14      	ldr	r2, [pc, #80]	@ (80027d8 <HAL_UART_MspInit+0x98>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6313      	str	r3, [r2, #48]	@ 0x30
 800278e:	4b12      	ldr	r3, [pc, #72]	@ (80027d8 <HAL_UART_MspInit+0x98>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800279a:	230c      	movs	r3, #12
 800279c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027aa:	2307      	movs	r3, #7
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	4809      	ldr	r0, [pc, #36]	@ (80027dc <HAL_UART_MspInit+0x9c>)
 80027b6:	f000 fa77 	bl	8002ca8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	2026      	movs	r0, #38	@ 0x26
 80027c0:	f000 f9a9 	bl	8002b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027c4:	2026      	movs	r0, #38	@ 0x26
 80027c6:	f000 f9c2 	bl	8002b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80027ca:	bf00      	nop
 80027cc:	3728      	adds	r7, #40	@ 0x28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40004400 	.word	0x40004400
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40020000 	.word	0x40020000

080027e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002818 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80027e4:	f7ff fdf8 	bl	80023d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027e8:	480c      	ldr	r0, [pc, #48]	@ (800281c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ea:	490d      	ldr	r1, [pc, #52]	@ (8002820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f0:	e002      	b.n	80027f8 <LoopCopyDataInit>

080027f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027f6:	3304      	adds	r3, #4

080027f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027fc:	d3f9      	bcc.n	80027f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002800:	4c0a      	ldr	r4, [pc, #40]	@ (800282c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002804:	e001      	b.n	800280a <LoopFillZerobss>

08002806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002808:	3204      	adds	r2, #4

0800280a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800280a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800280c:	d3fb      	bcc.n	8002806 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800280e:	f004 fc0b 	bl	8007028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002812:	f7ff fa6d 	bl	8001cf0 <main>
  bx  lr    
 8002816:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002818:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800281c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002820:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002824:	0800ab7c 	.word	0x0800ab7c
  ldr r2, =_sbss
 8002828:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800282c:	20000470 	.word	0x20000470

08002830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002830:	e7fe      	b.n	8002830 <ADC_IRQHandler>
	...

08002834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002838:	4b0e      	ldr	r3, [pc, #56]	@ (8002874 <HAL_Init+0x40>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0d      	ldr	r2, [pc, #52]	@ (8002874 <HAL_Init+0x40>)
 800283e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002844:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <HAL_Init+0x40>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0a      	ldr	r2, [pc, #40]	@ (8002874 <HAL_Init+0x40>)
 800284a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800284e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002850:	4b08      	ldr	r3, [pc, #32]	@ (8002874 <HAL_Init+0x40>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a07      	ldr	r2, [pc, #28]	@ (8002874 <HAL_Init+0x40>)
 8002856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800285a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800285c:	2003      	movs	r0, #3
 800285e:	f000 f94f 	bl	8002b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002862:	2000      	movs	r0, #0
 8002864:	f000 f808 	bl	8002878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002868:	f7ff fc78 	bl	800215c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023c00 	.word	0x40023c00

08002878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002880:	4b12      	ldr	r3, [pc, #72]	@ (80028cc <HAL_InitTick+0x54>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <HAL_InitTick+0x58>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	4619      	mov	r1, r3
 800288a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800288e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002892:	fbb2 f3f3 	udiv	r3, r2, r3
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f967 	bl	8002b6a <HAL_SYSTICK_Config>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e00e      	b.n	80028c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b0f      	cmp	r3, #15
 80028aa:	d80a      	bhi.n	80028c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028ac:	2200      	movs	r2, #0
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	f04f 30ff 	mov.w	r0, #4294967295
 80028b4:	f000 f92f 	bl	8002b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b8:	4a06      	ldr	r2, [pc, #24]	@ (80028d4 <HAL_InitTick+0x5c>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e000      	b.n	80028c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000018 	.word	0x20000018
 80028d0:	20000020 	.word	0x20000020
 80028d4:	2000001c 	.word	0x2000001c

080028d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028dc:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <HAL_IncTick+0x20>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <HAL_IncTick+0x24>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4413      	add	r3, r2
 80028e8:	4a04      	ldr	r2, [pc, #16]	@ (80028fc <HAL_IncTick+0x24>)
 80028ea:	6013      	str	r3, [r2, #0]
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000020 	.word	0x20000020
 80028fc:	20000320 	.word	0x20000320

08002900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return uwTick;
 8002904:	4b03      	ldr	r3, [pc, #12]	@ (8002914 <HAL_GetTick+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000320 	.word	0x20000320

08002918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002920:	f7ff ffee 	bl	8002900 <HAL_GetTick>
 8002924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d005      	beq.n	800293e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002932:	4b0a      	ldr	r3, [pc, #40]	@ (800295c <HAL_Delay+0x44>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4413      	add	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800293e:	bf00      	nop
 8002940:	f7ff ffde 	bl	8002900 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	429a      	cmp	r2, r3
 800294e:	d8f7      	bhi.n	8002940 <HAL_Delay+0x28>
  {
  }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000020 	.word	0x20000020

08002960 <__NVIC_SetPriorityGrouping>:
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002970:	4b0c      	ldr	r3, [pc, #48]	@ (80029a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800297c:	4013      	ands	r3, r2
 800297e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002988:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800298c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002992:	4a04      	ldr	r2, [pc, #16]	@ (80029a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	60d3      	str	r3, [r2, #12]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <__NVIC_GetPriorityGrouping>:
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029ac:	4b04      	ldr	r3, [pc, #16]	@ (80029c0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	f003 0307 	and.w	r3, r3, #7
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <__NVIC_EnableIRQ>:
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	db0b      	blt.n	80029ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	f003 021f 	and.w	r2, r3, #31
 80029dc:	4907      	ldr	r1, [pc, #28]	@ (80029fc <__NVIC_EnableIRQ+0x38>)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	2001      	movs	r0, #1
 80029e6:	fa00 f202 	lsl.w	r2, r0, r2
 80029ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	e000e100 	.word	0xe000e100

08002a00 <__NVIC_SetPriority>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	6039      	str	r1, [r7, #0]
 8002a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	db0a      	blt.n	8002a2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	490c      	ldr	r1, [pc, #48]	@ (8002a4c <__NVIC_SetPriority+0x4c>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	0112      	lsls	r2, r2, #4
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	440b      	add	r3, r1
 8002a24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002a28:	e00a      	b.n	8002a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	4908      	ldr	r1, [pc, #32]	@ (8002a50 <__NVIC_SetPriority+0x50>)
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	3b04      	subs	r3, #4
 8002a38:	0112      	lsls	r2, r2, #4
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	761a      	strb	r2, [r3, #24]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	e000e100 	.word	0xe000e100
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <NVIC_EncodePriority>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b089      	sub	sp, #36	@ 0x24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f1c3 0307 	rsb	r3, r3, #7
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	bf28      	it	cs
 8002a72:	2304      	movcs	r3, #4
 8002a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	2b06      	cmp	r3, #6
 8002a7c:	d902      	bls.n	8002a84 <NVIC_EncodePriority+0x30>
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3b03      	subs	r3, #3
 8002a82:	e000      	b.n	8002a86 <NVIC_EncodePriority+0x32>
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a88:	f04f 32ff 	mov.w	r2, #4294967295
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43da      	mvns	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	401a      	ands	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa6:	43d9      	mvns	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aac:	4313      	orrs	r3, r2
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3724      	adds	r7, #36	@ 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <SysTick_Config>:
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002acc:	d301      	bcc.n	8002ad2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e00f      	b.n	8002af2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8002afc <SysTick_Config+0x40>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ada:	210f      	movs	r1, #15
 8002adc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae0:	f7ff ff8e 	bl	8002a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae4:	4b05      	ldr	r3, [pc, #20]	@ (8002afc <SysTick_Config+0x40>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aea:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <SysTick_Config+0x40>)
 8002aec:	2207      	movs	r2, #7
 8002aee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	e000e010 	.word	0xe000e010

08002b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ff29 	bl	8002960 <__NVIC_SetPriorityGrouping>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b28:	f7ff ff3e 	bl	80029a8 <__NVIC_GetPriorityGrouping>
 8002b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	6978      	ldr	r0, [r7, #20]
 8002b34:	f7ff ff8e 	bl	8002a54 <NVIC_EncodePriority>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff5d 	bl	8002a00 <__NVIC_SetPriority>
}
 8002b46:	bf00      	nop
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	4603      	mov	r3, r0
 8002b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff31 	bl	80029c4 <__NVIC_EnableIRQ>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff ffa2 	bl	8002abc <SysTick_Config>
 8002b78:	4603      	mov	r3, r0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7ff feb6 	bl	8002900 <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d008      	beq.n	8002bb4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2280      	movs	r2, #128	@ 0x80
 8002ba6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e052      	b.n	8002c5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0216 	bic.w	r2, r2, #22
 8002bc2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bd2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d103      	bne.n	8002be4 <HAL_DMA_Abort+0x62>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0208 	bic.w	r2, r2, #8
 8002bf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c04:	e013      	b.n	8002c2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c06:	f7ff fe7b 	bl	8002900 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d90c      	bls.n	8002c2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e015      	b.n	8002c5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e4      	bne.n	8002c06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c40:	223f      	movs	r2, #63	@ 0x3f
 8002c42:	409a      	lsls	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d004      	beq.n	8002c80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2280      	movs	r2, #128	@ 0x80
 8002c7a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e00c      	b.n	8002c9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2205      	movs	r2, #5
 8002c84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	@ 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	e165      	b.n	8002f90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	f040 8154 	bne.w	8002f8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d005      	beq.n	8002cfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d130      	bne.n	8002d5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	2203      	movs	r2, #3
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d30:	2201      	movs	r2, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 0201 	and.w	r2, r3, #1
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d017      	beq.n	8002d98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2203      	movs	r2, #3
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d123      	bne.n	8002dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	08da      	lsrs	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3208      	adds	r2, #8
 8002dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	220f      	movs	r2, #15
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	08da      	lsrs	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3208      	adds	r2, #8
 8002de6:	69b9      	ldr	r1, [r7, #24]
 8002de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	2203      	movs	r2, #3
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0203 	and.w	r2, r3, #3
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80ae 	beq.w	8002f8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa8 <HAL_GPIO_Init+0x300>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	4a5c      	ldr	r2, [pc, #368]	@ (8002fa8 <HAL_GPIO_Init+0x300>)
 8002e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e3e:	4b5a      	ldr	r3, [pc, #360]	@ (8002fa8 <HAL_GPIO_Init+0x300>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e4a:	4a58      	ldr	r2, [pc, #352]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	3302      	adds	r3, #2
 8002e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	220f      	movs	r2, #15
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4f      	ldr	r2, [pc, #316]	@ (8002fb0 <HAL_GPIO_Init+0x308>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d025      	beq.n	8002ec2 <HAL_GPIO_Init+0x21a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4e      	ldr	r2, [pc, #312]	@ (8002fb4 <HAL_GPIO_Init+0x30c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01f      	beq.n	8002ebe <HAL_GPIO_Init+0x216>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4d      	ldr	r2, [pc, #308]	@ (8002fb8 <HAL_GPIO_Init+0x310>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d019      	beq.n	8002eba <HAL_GPIO_Init+0x212>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4c      	ldr	r2, [pc, #304]	@ (8002fbc <HAL_GPIO_Init+0x314>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d013      	beq.n	8002eb6 <HAL_GPIO_Init+0x20e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a4b      	ldr	r2, [pc, #300]	@ (8002fc0 <HAL_GPIO_Init+0x318>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00d      	beq.n	8002eb2 <HAL_GPIO_Init+0x20a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc4 <HAL_GPIO_Init+0x31c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d007      	beq.n	8002eae <HAL_GPIO_Init+0x206>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a49      	ldr	r2, [pc, #292]	@ (8002fc8 <HAL_GPIO_Init+0x320>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_GPIO_Init+0x202>
 8002ea6:	2306      	movs	r3, #6
 8002ea8:	e00c      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eaa:	2307      	movs	r3, #7
 8002eac:	e00a      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eae:	2305      	movs	r3, #5
 8002eb0:	e008      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e004      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e002      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	f002 0203 	and.w	r2, r2, #3
 8002eca:	0092      	lsls	r2, r2, #2
 8002ecc:	4093      	lsls	r3, r2
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ed4:	4935      	ldr	r1, [pc, #212]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	3302      	adds	r3, #2
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f06:	4a31      	ldr	r2, [pc, #196]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f30:	4a26      	ldr	r2, [pc, #152]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f36:	4b25      	ldr	r3, [pc, #148]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f60:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f84:	4a11      	ldr	r2, [pc, #68]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	f67f ae96 	bls.w	8002cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3724      	adds	r7, #36	@ 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40013800 	.word	0x40013800
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	40020c00 	.word	0x40020c00
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40021400 	.word	0x40021400
 8002fc8:	40021800 	.word	0x40021800
 8002fcc:	40013c00 	.word	0x40013c00

08002fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	887b      	ldrh	r3, [r7, #2]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
 8002fec:	e001      	b.n	8002ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]
 800300c:	4613      	mov	r3, r2
 800300e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003010:	787b      	ldrb	r3, [r7, #1]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003016:	887a      	ldrh	r2, [r7, #2]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800301c:	e003      	b.n	8003026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800301e:	887b      	ldrh	r3, [r7, #2]
 8003020:	041a      	lsls	r2, r3, #16
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	619a      	str	r2, [r3, #24]
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003044:	887a      	ldrh	r2, [r7, #2]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4013      	ands	r3, r2
 800304a:	041a      	lsls	r2, r3, #16
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	43d9      	mvns	r1, r3
 8003050:	887b      	ldrh	r3, [r7, #2]
 8003052:	400b      	ands	r3, r1
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	619a      	str	r2, [r3, #24]
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e12b      	b.n	80032d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fe fdbe 	bl	8001c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2224      	movs	r2, #36	@ 0x24
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030cc:	f001 fa10 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 80030d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a81      	ldr	r2, [pc, #516]	@ (80032dc <HAL_I2C_Init+0x274>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d807      	bhi.n	80030ec <HAL_I2C_Init+0x84>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4a80      	ldr	r2, [pc, #512]	@ (80032e0 <HAL_I2C_Init+0x278>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	bf94      	ite	ls
 80030e4:	2301      	movls	r3, #1
 80030e6:	2300      	movhi	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e006      	b.n	80030fa <HAL_I2C_Init+0x92>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a7d      	ldr	r2, [pc, #500]	@ (80032e4 <HAL_I2C_Init+0x27c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	bf94      	ite	ls
 80030f4:	2301      	movls	r3, #1
 80030f6:	2300      	movhi	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0e7      	b.n	80032d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4a78      	ldr	r2, [pc, #480]	@ (80032e8 <HAL_I2C_Init+0x280>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	0c9b      	lsrs	r3, r3, #18
 800310c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a6a      	ldr	r2, [pc, #424]	@ (80032dc <HAL_I2C_Init+0x274>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d802      	bhi.n	800313c <HAL_I2C_Init+0xd4>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3301      	adds	r3, #1
 800313a:	e009      	b.n	8003150 <HAL_I2C_Init+0xe8>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	4a69      	ldr	r2, [pc, #420]	@ (80032ec <HAL_I2C_Init+0x284>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	099b      	lsrs	r3, r3, #6
 800314e:	3301      	adds	r3, #1
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	430b      	orrs	r3, r1
 8003156:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003162:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	495c      	ldr	r1, [pc, #368]	@ (80032dc <HAL_I2C_Init+0x274>)
 800316c:	428b      	cmp	r3, r1
 800316e:	d819      	bhi.n	80031a4 <HAL_I2C_Init+0x13c>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	fbb1 f3f3 	udiv	r3, r1, r3
 800317e:	1c59      	adds	r1, r3, #1
 8003180:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003184:	400b      	ands	r3, r1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_I2C_Init+0x138>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1e59      	subs	r1, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fbb1 f3f3 	udiv	r3, r1, r3
 8003198:	3301      	adds	r3, #1
 800319a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319e:	e051      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 80031a0:	2304      	movs	r3, #4
 80031a2:	e04f      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d111      	bne.n	80031d0 <HAL_I2C_Init+0x168>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1e58      	subs	r0, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	440b      	add	r3, r1
 80031ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e012      	b.n	80031f6 <HAL_I2C_Init+0x18e>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1e58      	subs	r0, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	0099      	lsls	r1, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Init+0x196>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e022      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10e      	bne.n	8003224 <HAL_I2C_Init+0x1bc>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1e58      	subs	r0, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6859      	ldr	r1, [r3, #4]
 800320e:	460b      	mov	r3, r1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	440b      	add	r3, r1
 8003214:	fbb0 f3f3 	udiv	r3, r0, r3
 8003218:	3301      	adds	r3, #1
 800321a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003222:	e00f      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1e58      	subs	r0, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	0099      	lsls	r1, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	fbb0 f3f3 	udiv	r3, r0, r3
 800323a:	3301      	adds	r3, #1
 800323c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003240:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	6809      	ldr	r1, [r1, #0]
 8003248:	4313      	orrs	r3, r2
 800324a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003272:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6911      	ldr	r1, [r2, #16]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68d2      	ldr	r2, [r2, #12]
 800327e:	4311      	orrs	r1, r2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	430b      	orrs	r3, r1
 8003286:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	000186a0 	.word	0x000186a0
 80032e0:	001e847f 	.word	0x001e847f
 80032e4:	003d08ff 	.word	0x003d08ff
 80032e8:	431bde83 	.word	0x431bde83
 80032ec:	10624dd3 	.word	0x10624dd3

080032f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	4608      	mov	r0, r1
 80032fa:	4611      	mov	r1, r2
 80032fc:	461a      	mov	r2, r3
 80032fe:	4603      	mov	r3, r0
 8003300:	817b      	strh	r3, [r7, #10]
 8003302:	460b      	mov	r3, r1
 8003304:	813b      	strh	r3, [r7, #8]
 8003306:	4613      	mov	r3, r2
 8003308:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800330a:	f7ff faf9 	bl	8002900 <HAL_GetTick>
 800330e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b20      	cmp	r3, #32
 800331a:	f040 80d9 	bne.w	80034d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	2319      	movs	r3, #25
 8003324:	2201      	movs	r2, #1
 8003326:	496d      	ldr	r1, [pc, #436]	@ (80034dc <HAL_I2C_Mem_Write+0x1ec>)
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fdb9 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003334:	2302      	movs	r3, #2
 8003336:	e0cc      	b.n	80034d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_I2C_Mem_Write+0x56>
 8003342:	2302      	movs	r3, #2
 8003344:	e0c5      	b.n	80034d2 <HAL_I2C_Mem_Write+0x1e2>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	d007      	beq.n	800336c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800337a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2221      	movs	r2, #33	@ 0x21
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2240      	movs	r2, #64	@ 0x40
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a3a      	ldr	r2, [r7, #32]
 8003396:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800339c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4a4d      	ldr	r2, [pc, #308]	@ (80034e0 <HAL_I2C_Mem_Write+0x1f0>)
 80033ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033ae:	88f8      	ldrh	r0, [r7, #6]
 80033b0:	893a      	ldrh	r2, [r7, #8]
 80033b2:	8979      	ldrh	r1, [r7, #10]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	4603      	mov	r3, r0
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 fbf0 	bl	8003ba4 <I2C_RequestMemoryWrite>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d052      	beq.n	8003470 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e081      	b.n	80034d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fe7e 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00d      	beq.n	80033fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d107      	bne.n	80033f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e06b      	b.n	80034d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003420:	b29b      	uxth	r3, r3
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b04      	cmp	r3, #4
 8003436:	d11b      	bne.n	8003470 <HAL_I2C_Mem_Write+0x180>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343c:	2b00      	cmp	r3, #0
 800343e:	d017      	beq.n	8003470 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	781a      	ldrb	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1aa      	bne.n	80033ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 fe71 	bl	8004164 <I2C_WaitOnBTFFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00d      	beq.n	80034a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	2b04      	cmp	r3, #4
 800348e:	d107      	bne.n	80034a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800349e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e016      	b.n	80034d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e000      	b.n	80034d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80034d0:	2302      	movs	r3, #2
  }
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	00100002 	.word	0x00100002
 80034e0:	ffff0000 	.word	0xffff0000

080034e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08c      	sub	sp, #48	@ 0x30
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	4608      	mov	r0, r1
 80034ee:	4611      	mov	r1, r2
 80034f0:	461a      	mov	r2, r3
 80034f2:	4603      	mov	r3, r0
 80034f4:	817b      	strh	r3, [r7, #10]
 80034f6:	460b      	mov	r3, r1
 80034f8:	813b      	strh	r3, [r7, #8]
 80034fa:	4613      	mov	r3, r2
 80034fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034fe:	f7ff f9ff 	bl	8002900 <HAL_GetTick>
 8003502:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b20      	cmp	r3, #32
 800350e:	f040 8214 	bne.w	800393a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	2319      	movs	r3, #25
 8003518:	2201      	movs	r2, #1
 800351a:	497b      	ldr	r1, [pc, #492]	@ (8003708 <HAL_I2C_Mem_Read+0x224>)
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 fcbf 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003528:	2302      	movs	r3, #2
 800352a:	e207      	b.n	800393c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_I2C_Mem_Read+0x56>
 8003536:	2302      	movs	r3, #2
 8003538:	e200      	b.n	800393c <HAL_I2C_Mem_Read+0x458>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b01      	cmp	r3, #1
 800354e:	d007      	beq.n	8003560 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800356e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2222      	movs	r2, #34	@ 0x22
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2240      	movs	r2, #64	@ 0x40
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800358a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003590:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4a5b      	ldr	r2, [pc, #364]	@ (800370c <HAL_I2C_Mem_Read+0x228>)
 80035a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035a2:	88f8      	ldrh	r0, [r7, #6]
 80035a4:	893a      	ldrh	r2, [r7, #8]
 80035a6:	8979      	ldrh	r1, [r7, #10]
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	4603      	mov	r3, r0
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fb8c 	bl	8003cd0 <I2C_RequestMemoryRead>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e1bc      	b.n	800393c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d113      	bne.n	80035f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ca:	2300      	movs	r3, #0
 80035cc:	623b      	str	r3, [r7, #32]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	623b      	str	r3, [r7, #32]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	623b      	str	r3, [r7, #32]
 80035de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	e190      	b.n	8003914 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d11b      	bne.n	8003632 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003608:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e170      	b.n	8003914 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003636:	2b02      	cmp	r3, #2
 8003638:	d11b      	bne.n	8003672 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003648:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003658:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	e150      	b.n	8003914 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003688:	e144      	b.n	8003914 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368e:	2b03      	cmp	r3, #3
 8003690:	f200 80f1 	bhi.w	8003876 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003698:	2b01      	cmp	r3, #1
 800369a:	d123      	bne.n	80036e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800369e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fda7 	bl	80041f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e145      	b.n	800393c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036e2:	e117      	b.n	8003914 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d14e      	bne.n	800378a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f2:	2200      	movs	r2, #0
 80036f4:	4906      	ldr	r1, [pc, #24]	@ (8003710 <HAL_I2C_Mem_Read+0x22c>)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fbd2 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e11a      	b.n	800393c <HAL_I2C_Mem_Read+0x458>
 8003706:	bf00      	nop
 8003708:	00100002 	.word	0x00100002
 800370c:	ffff0000 	.word	0xffff0000
 8003710:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003788:	e0c4      	b.n	8003914 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003790:	2200      	movs	r2, #0
 8003792:	496c      	ldr	r1, [pc, #432]	@ (8003944 <HAL_I2C_Mem_Read+0x460>)
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fb83 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0cb      	b.n	800393c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ec:	2200      	movs	r2, #0
 80037ee:	4955      	ldr	r1, [pc, #340]	@ (8003944 <HAL_I2C_Mem_Read+0x460>)
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 fb55 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e09d      	b.n	800393c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800380e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003874:	e04e      	b.n	8003914 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003878:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fcba 	bl	80041f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e058      	b.n	800393c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d124      	bne.n	8003914 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d107      	bne.n	80038e2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003918:	2b00      	cmp	r3, #0
 800391a:	f47f aeb6 	bne.w	800368a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	e000      	b.n	800393c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800393a:	2302      	movs	r3, #2
  }
}
 800393c:	4618      	mov	r0, r3
 800393e:	3728      	adds	r7, #40	@ 0x28
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	00010004 	.word	0x00010004

08003948 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	@ 0x28
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	607a      	str	r2, [r7, #4]
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	460b      	mov	r3, r1
 8003956:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003958:	f7fe ffd2 	bl	8002900 <HAL_GetTick>
 800395c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b20      	cmp	r3, #32
 800396c:	f040 8111 	bne.w	8003b92 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	2319      	movs	r3, #25
 8003976:	2201      	movs	r2, #1
 8003978:	4988      	ldr	r1, [pc, #544]	@ (8003b9c <HAL_I2C_IsDeviceReady+0x254>)
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fa90 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003986:	2302      	movs	r3, #2
 8003988:	e104      	b.n	8003b94 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_I2C_IsDeviceReady+0x50>
 8003994:	2302      	movs	r3, #2
 8003996:	e0fd      	b.n	8003b94 <HAL_I2C_IsDeviceReady+0x24c>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d007      	beq.n	80039be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0201 	orr.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2224      	movs	r2, #36	@ 0x24
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4a70      	ldr	r2, [pc, #448]	@ (8003ba0 <HAL_I2C_IsDeviceReady+0x258>)
 80039e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 fa4e 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00d      	beq.n	8003a26 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a18:	d103      	bne.n	8003a22 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a20:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e0b6      	b.n	8003b94 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a26:	897b      	ldrh	r3, [r7, #10]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a34:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003a36:	f7fe ff63 	bl	8002900 <HAL_GetTick>
 8003a3a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	bf0c      	ite	eq
 8003a4a:	2301      	moveq	r3, #1
 8003a4c:	2300      	movne	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a60:	bf0c      	ite	eq
 8003a62:	2301      	moveq	r3, #1
 8003a64:	2300      	movne	r3, #0
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a6a:	e025      	b.n	8003ab8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a6c:	f7fe ff48 	bl	8002900 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d302      	bcc.n	8003a82 <HAL_I2C_IsDeviceReady+0x13a>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d103      	bne.n	8003a8a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	22a0      	movs	r2, #160	@ 0xa0
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	bf0c      	ite	eq
 8003a98:	2301      	moveq	r3, #1
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_I2C_IsDeviceReady+0x188>
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d102      	bne.n	8003ad0 <HAL_I2C_IsDeviceReady+0x188>
 8003aca:	7dbb      	ldrb	r3, [r7, #22]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0cd      	beq.n	8003a6c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d129      	bne.n	8003b3a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2319      	movs	r3, #25
 8003b12:	2201      	movs	r2, #1
 8003b14:	4921      	ldr	r1, [pc, #132]	@ (8003b9c <HAL_I2C_IsDeviceReady+0x254>)
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 f9c2 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e036      	b.n	8003b94 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	e02c      	b.n	8003b94 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b48:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b52:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	2319      	movs	r3, #25
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	490f      	ldr	r1, [pc, #60]	@ (8003b9c <HAL_I2C_IsDeviceReady+0x254>)
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f99e 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e012      	b.n	8003b94 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	3301      	adds	r3, #1
 8003b72:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	f4ff af32 	bcc.w	80039e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
  }
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3720      	adds	r7, #32
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	00100002 	.word	0x00100002
 8003ba0:	ffff0000 	.word	0xffff0000

08003ba4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	4608      	mov	r0, r1
 8003bae:	4611      	mov	r1, r2
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	817b      	strh	r3, [r7, #10]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	813b      	strh	r3, [r7, #8]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f960 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00d      	beq.n	8003c02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf4:	d103      	bne.n	8003bfe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e05f      	b.n	8003cc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c02:	897b      	ldrh	r3, [r7, #10]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	6a3a      	ldr	r2, [r7, #32]
 8003c16:	492d      	ldr	r1, [pc, #180]	@ (8003ccc <I2C_RequestMemoryWrite+0x128>)
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f9bb 	bl	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e04c      	b.n	8003cc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c40:	6a39      	ldr	r1, [r7, #32]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fa46 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00d      	beq.n	8003c6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d107      	bne.n	8003c66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e02b      	b.n	8003cc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d105      	bne.n	8003c7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c70:	893b      	ldrh	r3, [r7, #8]
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	611a      	str	r2, [r3, #16]
 8003c7a:	e021      	b.n	8003cc0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c7c:	893b      	ldrh	r3, [r7, #8]
 8003c7e:	0a1b      	lsrs	r3, r3, #8
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c8c:	6a39      	ldr	r1, [r7, #32]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fa20 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00d      	beq.n	8003cb6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d107      	bne.n	8003cb2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e005      	b.n	8003cc2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cb6:	893b      	ldrh	r3, [r7, #8]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	00010002 	.word	0x00010002

08003cd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	4608      	mov	r0, r1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	817b      	strh	r3, [r7, #10]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	813b      	strh	r3, [r7, #8]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cf8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f8c2 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d30:	d103      	bne.n	8003d3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e0aa      	b.n	8003e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d3e:	897b      	ldrh	r3, [r7, #10]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	6a3a      	ldr	r2, [r7, #32]
 8003d52:	4952      	ldr	r1, [pc, #328]	@ (8003e9c <I2C_RequestMemoryRead+0x1cc>)
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f91d 	bl	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e097      	b.n	8003e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d7c:	6a39      	ldr	r1, [r7, #32]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f9a8 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00d      	beq.n	8003da6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d107      	bne.n	8003da2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e076      	b.n	8003e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d105      	bne.n	8003db8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dac:	893b      	ldrh	r3, [r7, #8]
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	611a      	str	r2, [r3, #16]
 8003db6:	e021      	b.n	8003dfc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003db8:	893b      	ldrh	r3, [r7, #8]
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc8:	6a39      	ldr	r1, [r7, #32]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f982 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d107      	bne.n	8003dee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e050      	b.n	8003e94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003df2:	893b      	ldrh	r3, [r7, #8]
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dfe:	6a39      	ldr	r1, [r7, #32]
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 f967 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00d      	beq.n	8003e28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d107      	bne.n	8003e24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e035      	b.n	8003e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f82b 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00d      	beq.n	8003e6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e5e:	d103      	bne.n	8003e68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e013      	b.n	8003e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e6c:	897b      	ldrh	r3, [r7, #10]
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	6a3a      	ldr	r2, [r7, #32]
 8003e80:	4906      	ldr	r1, [pc, #24]	@ (8003e9c <I2C_RequestMemoryRead+0x1cc>)
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f886 	bl	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	00010002 	.word	0x00010002

08003ea0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eb0:	e048      	b.n	8003f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb8:	d044      	beq.n	8003f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eba:	f7fe fd21 	bl	8002900 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d302      	bcc.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d139      	bne.n	8003f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	0c1b      	lsrs	r3, r3, #16
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d10d      	bne.n	8003ef6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	43da      	mvns	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	e00c      	b.n	8003f10 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	43da      	mvns	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4013      	ands	r3, r2
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d116      	bne.n	8003f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e023      	b.n	8003f8c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	0c1b      	lsrs	r3, r3, #16
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d10d      	bne.n	8003f6a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	43da      	mvns	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	e00c      	b.n	8003f84 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	43da      	mvns	r2, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	4013      	ands	r3, r2
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bf0c      	ite	eq
 8003f7c:	2301      	moveq	r3, #1
 8003f7e:	2300      	movne	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d093      	beq.n	8003eb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fa2:	e071      	b.n	8004088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb2:	d123      	bne.n	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fc2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe8:	f043 0204 	orr.w	r2, r3, #4
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e067      	b.n	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d041      	beq.n	8004088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004004:	f7fe fc7c 	bl	8002900 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	429a      	cmp	r2, r3
 8004012:	d302      	bcc.n	800401a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d136      	bne.n	8004088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d10c      	bne.n	800403e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	43da      	mvns	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4013      	ands	r3, r2
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	bf14      	ite	ne
 8004036:	2301      	movne	r3, #1
 8004038:	2300      	moveq	r3, #0
 800403a:	b2db      	uxtb	r3, r3
 800403c:	e00b      	b.n	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	43da      	mvns	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4013      	ands	r3, r2
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d016      	beq.n	8004088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004074:	f043 0220 	orr.w	r2, r3, #32
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e021      	b.n	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	0c1b      	lsrs	r3, r3, #16
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d10c      	bne.n	80040ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	43da      	mvns	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4013      	ands	r3, r2
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf14      	ite	ne
 80040a4:	2301      	movne	r3, #1
 80040a6:	2300      	moveq	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e00b      	b.n	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	43da      	mvns	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4013      	ands	r3, r2
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bf14      	ite	ne
 80040be:	2301      	movne	r3, #1
 80040c0:	2300      	moveq	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f47f af6d 	bne.w	8003fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040e0:	e034      	b.n	800414c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f8e3 	bl	80042ae <I2C_IsAcknowledgeFailed>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e034      	b.n	800415c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d028      	beq.n	800414c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	f7fe fc01 	bl	8002900 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d11d      	bne.n	800414c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800411a:	2b80      	cmp	r3, #128	@ 0x80
 800411c:	d016      	beq.n	800414c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004138:	f043 0220 	orr.w	r2, r3, #32
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e007      	b.n	800415c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004156:	2b80      	cmp	r3, #128	@ 0x80
 8004158:	d1c3      	bne.n	80040e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004170:	e034      	b.n	80041dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f89b 	bl	80042ae <I2C_IsAcknowledgeFailed>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e034      	b.n	80041ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d028      	beq.n	80041dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418a:	f7fe fbb9 	bl	8002900 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	429a      	cmp	r2, r3
 8004198:	d302      	bcc.n	80041a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d11d      	bne.n	80041dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d016      	beq.n	80041dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	f043 0220 	orr.w	r2, r3, #32
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e007      	b.n	80041ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d1c3      	bne.n	8004172 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004200:	e049      	b.n	8004296 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b10      	cmp	r3, #16
 800420e:	d119      	bne.n	8004244 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0210 	mvn.w	r2, #16
 8004218:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e030      	b.n	80042a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004244:	f7fe fb5c 	bl	8002900 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	429a      	cmp	r2, r3
 8004252:	d302      	bcc.n	800425a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d11d      	bne.n	8004296 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004264:	2b40      	cmp	r3, #64	@ 0x40
 8004266:	d016      	beq.n	8004296 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	f043 0220 	orr.w	r2, r3, #32
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e007      	b.n	80042a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a0:	2b40      	cmp	r3, #64	@ 0x40
 80042a2:	d1ae      	bne.n	8004202 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c4:	d11b      	bne.n	80042fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	f043 0204 	orr.w	r2, r3, #4
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0cc      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004320:	4b68      	ldr	r3, [pc, #416]	@ (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d90c      	bls.n	8004348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432e:	4b65      	ldr	r3, [pc, #404]	@ (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004336:	4b63      	ldr	r3, [pc, #396]	@ (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d001      	beq.n	8004348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0b8      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d020      	beq.n	8004396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004360:	4b59      	ldr	r3, [pc, #356]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	4a58      	ldr	r2, [pc, #352]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800436a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004378:	4b53      	ldr	r3, [pc, #332]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4a52      	ldr	r2, [pc, #328]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004384:	4b50      	ldr	r3, [pc, #320]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	494d      	ldr	r1, [pc, #308]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	4313      	orrs	r3, r2
 8004394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d044      	beq.n	800442c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d107      	bne.n	80043ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043aa:	4b47      	ldr	r3, [pc, #284]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d119      	bne.n	80043ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e07f      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d003      	beq.n	80043ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043c6:	2b03      	cmp	r3, #3
 80043c8:	d107      	bne.n	80043da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ca:	4b3f      	ldr	r3, [pc, #252]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e06f      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043da:	4b3b      	ldr	r3, [pc, #236]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e067      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ea:	4b37      	ldr	r3, [pc, #220]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f023 0203 	bic.w	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4934      	ldr	r1, [pc, #208]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043fc:	f7fe fa80 	bl	8002900 <HAL_GetTick>
 8004400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004402:	e00a      	b.n	800441a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004404:	f7fe fa7c 	bl	8002900 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e04f      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441a:	4b2b      	ldr	r3, [pc, #172]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 020c 	and.w	r2, r3, #12
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	429a      	cmp	r2, r3
 800442a:	d1eb      	bne.n	8004404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800442c:	4b25      	ldr	r3, [pc, #148]	@ (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d20c      	bcs.n	8004454 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443a:	4b22      	ldr	r3, [pc, #136]	@ (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004442:	4b20      	ldr	r3, [pc, #128]	@ (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e032      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004460:	4b19      	ldr	r3, [pc, #100]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4916      	ldr	r1, [pc, #88]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	4313      	orrs	r3, r2
 8004470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800447e:	4b12      	ldr	r3, [pc, #72]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	490e      	ldr	r1, [pc, #56]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	4313      	orrs	r3, r2
 8004490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004492:	f000 f855 	bl	8004540 <HAL_RCC_GetSysClockFreq>
 8004496:	4602      	mov	r2, r0
 8004498:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	490a      	ldr	r1, [pc, #40]	@ (80044cc <HAL_RCC_ClockConfig+0x1c0>)
 80044a4:	5ccb      	ldrb	r3, [r1, r3]
 80044a6:	fa22 f303 	lsr.w	r3, r2, r3
 80044aa:	4a09      	ldr	r2, [pc, #36]	@ (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 80044ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80044ae:	4b09      	ldr	r3, [pc, #36]	@ (80044d4 <HAL_RCC_ClockConfig+0x1c8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe f9e0 	bl	8002878 <HAL_InitTick>

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40023c00 	.word	0x40023c00
 80044c8:	40023800 	.word	0x40023800
 80044cc:	0800aa74 	.word	0x0800aa74
 80044d0:	20000018 	.word	0x20000018
 80044d4:	2000001c 	.word	0x2000001c

080044d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044dc:	4b03      	ldr	r3, [pc, #12]	@ (80044ec <HAL_RCC_GetHCLKFreq+0x14>)
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	20000018 	.word	0x20000018

080044f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044f4:	f7ff fff0 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	0a9b      	lsrs	r3, r3, #10
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4903      	ldr	r1, [pc, #12]	@ (8004514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800450c:	4618      	mov	r0, r3
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40023800 	.word	0x40023800
 8004514:	0800aa84 	.word	0x0800aa84

08004518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800451c:	f7ff ffdc 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 8004520:	4602      	mov	r2, r0
 8004522:	4b05      	ldr	r3, [pc, #20]	@ (8004538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	0b5b      	lsrs	r3, r3, #13
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	4903      	ldr	r1, [pc, #12]	@ (800453c <HAL_RCC_GetPCLK2Freq+0x24>)
 800452e:	5ccb      	ldrb	r3, [r1, r3]
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40023800 	.word	0x40023800
 800453c:	0800aa84 	.word	0x0800aa84

08004540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004544:	b0ae      	sub	sp, #184	@ 0xb8
 8004546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004566:	4bcb      	ldr	r3, [pc, #812]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x354>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 030c 	and.w	r3, r3, #12
 800456e:	2b0c      	cmp	r3, #12
 8004570:	f200 8206 	bhi.w	8004980 <HAL_RCC_GetSysClockFreq+0x440>
 8004574:	a201      	add	r2, pc, #4	@ (adr r2, 800457c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457a:	bf00      	nop
 800457c:	080045b1 	.word	0x080045b1
 8004580:	08004981 	.word	0x08004981
 8004584:	08004981 	.word	0x08004981
 8004588:	08004981 	.word	0x08004981
 800458c:	080045b9 	.word	0x080045b9
 8004590:	08004981 	.word	0x08004981
 8004594:	08004981 	.word	0x08004981
 8004598:	08004981 	.word	0x08004981
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	08004981 	.word	0x08004981
 80045a4:	08004981 	.word	0x08004981
 80045a8:	08004981 	.word	0x08004981
 80045ac:	080047b1 	.word	0x080047b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045b0:	4bb9      	ldr	r3, [pc, #740]	@ (8004898 <HAL_RCC_GetSysClockFreq+0x358>)
 80045b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80045b6:	e1e7      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045b8:	4bb8      	ldr	r3, [pc, #736]	@ (800489c <HAL_RCC_GetSysClockFreq+0x35c>)
 80045ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80045be:	e1e3      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045c0:	4bb4      	ldr	r3, [pc, #720]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x354>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045cc:	4bb1      	ldr	r3, [pc, #708]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x354>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d071      	beq.n	80046bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d8:	4bae      	ldr	r3, [pc, #696]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x354>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	099b      	lsrs	r3, r3, #6
 80045de:	2200      	movs	r2, #0
 80045e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045e4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80045e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045f4:	2300      	movs	r3, #0
 80045f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045fe:	4622      	mov	r2, r4
 8004600:	462b      	mov	r3, r5
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	0159      	lsls	r1, r3, #5
 800460c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004610:	0150      	lsls	r0, r2, #5
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4621      	mov	r1, r4
 8004618:	1a51      	subs	r1, r2, r1
 800461a:	6439      	str	r1, [r7, #64]	@ 0x40
 800461c:	4629      	mov	r1, r5
 800461e:	eb63 0301 	sbc.w	r3, r3, r1
 8004622:	647b      	str	r3, [r7, #68]	@ 0x44
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004630:	4649      	mov	r1, r9
 8004632:	018b      	lsls	r3, r1, #6
 8004634:	4641      	mov	r1, r8
 8004636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800463a:	4641      	mov	r1, r8
 800463c:	018a      	lsls	r2, r1, #6
 800463e:	4641      	mov	r1, r8
 8004640:	1a51      	subs	r1, r2, r1
 8004642:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004644:	4649      	mov	r1, r9
 8004646:	eb63 0301 	sbc.w	r3, r3, r1
 800464a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004658:	4649      	mov	r1, r9
 800465a:	00cb      	lsls	r3, r1, #3
 800465c:	4641      	mov	r1, r8
 800465e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004662:	4641      	mov	r1, r8
 8004664:	00ca      	lsls	r2, r1, #3
 8004666:	4610      	mov	r0, r2
 8004668:	4619      	mov	r1, r3
 800466a:	4603      	mov	r3, r0
 800466c:	4622      	mov	r2, r4
 800466e:	189b      	adds	r3, r3, r2
 8004670:	633b      	str	r3, [r7, #48]	@ 0x30
 8004672:	462b      	mov	r3, r5
 8004674:	460a      	mov	r2, r1
 8004676:	eb42 0303 	adc.w	r3, r2, r3
 800467a:	637b      	str	r3, [r7, #52]	@ 0x34
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004688:	4629      	mov	r1, r5
 800468a:	024b      	lsls	r3, r1, #9
 800468c:	4621      	mov	r1, r4
 800468e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004692:	4621      	mov	r1, r4
 8004694:	024a      	lsls	r2, r1, #9
 8004696:	4610      	mov	r0, r2
 8004698:	4619      	mov	r1, r3
 800469a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800469e:	2200      	movs	r2, #0
 80046a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80046ac:	f7fb fe08 	bl	80002c0 <__aeabi_uldivmod>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4613      	mov	r3, r2
 80046b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046ba:	e067      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046bc:	4b75      	ldr	r3, [pc, #468]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x354>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	099b      	lsrs	r3, r3, #6
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046c8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80046cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046d6:	2300      	movs	r3, #0
 80046d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80046de:	4622      	mov	r2, r4
 80046e0:	462b      	mov	r3, r5
 80046e2:	f04f 0000 	mov.w	r0, #0
 80046e6:	f04f 0100 	mov.w	r1, #0
 80046ea:	0159      	lsls	r1, r3, #5
 80046ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f0:	0150      	lsls	r0, r2, #5
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4621      	mov	r1, r4
 80046f8:	1a51      	subs	r1, r2, r1
 80046fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80046fc:	4629      	mov	r1, r5
 80046fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004710:	4649      	mov	r1, r9
 8004712:	018b      	lsls	r3, r1, #6
 8004714:	4641      	mov	r1, r8
 8004716:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800471a:	4641      	mov	r1, r8
 800471c:	018a      	lsls	r2, r1, #6
 800471e:	4641      	mov	r1, r8
 8004720:	ebb2 0a01 	subs.w	sl, r2, r1
 8004724:	4649      	mov	r1, r9
 8004726:	eb63 0b01 	sbc.w	fp, r3, r1
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004736:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800473a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800473e:	4692      	mov	sl, r2
 8004740:	469b      	mov	fp, r3
 8004742:	4623      	mov	r3, r4
 8004744:	eb1a 0303 	adds.w	r3, sl, r3
 8004748:	623b      	str	r3, [r7, #32]
 800474a:	462b      	mov	r3, r5
 800474c:	eb4b 0303 	adc.w	r3, fp, r3
 8004750:	627b      	str	r3, [r7, #36]	@ 0x24
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800475e:	4629      	mov	r1, r5
 8004760:	028b      	lsls	r3, r1, #10
 8004762:	4621      	mov	r1, r4
 8004764:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004768:	4621      	mov	r1, r4
 800476a:	028a      	lsls	r2, r1, #10
 800476c:	4610      	mov	r0, r2
 800476e:	4619      	mov	r1, r3
 8004770:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004774:	2200      	movs	r2, #0
 8004776:	673b      	str	r3, [r7, #112]	@ 0x70
 8004778:	677a      	str	r2, [r7, #116]	@ 0x74
 800477a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800477e:	f7fb fd9f 	bl	80002c0 <__aeabi_uldivmod>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4613      	mov	r3, r2
 8004788:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800478c:	4b41      	ldr	r3, [pc, #260]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x354>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	3301      	adds	r3, #1
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800479e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80047ae:	e0eb      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047b0:	4b38      	ldr	r3, [pc, #224]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x354>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047bc:	4b35      	ldr	r3, [pc, #212]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x354>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d06b      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047c8:	4b32      	ldr	r3, [pc, #200]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x354>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	099b      	lsrs	r3, r3, #6
 80047ce:	2200      	movs	r2, #0
 80047d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047da:	663b      	str	r3, [r7, #96]	@ 0x60
 80047dc:	2300      	movs	r3, #0
 80047de:	667b      	str	r3, [r7, #100]	@ 0x64
 80047e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80047e4:	4622      	mov	r2, r4
 80047e6:	462b      	mov	r3, r5
 80047e8:	f04f 0000 	mov.w	r0, #0
 80047ec:	f04f 0100 	mov.w	r1, #0
 80047f0:	0159      	lsls	r1, r3, #5
 80047f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047f6:	0150      	lsls	r0, r2, #5
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4621      	mov	r1, r4
 80047fe:	1a51      	subs	r1, r2, r1
 8004800:	61b9      	str	r1, [r7, #24]
 8004802:	4629      	mov	r1, r5
 8004804:	eb63 0301 	sbc.w	r3, r3, r1
 8004808:	61fb      	str	r3, [r7, #28]
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004816:	4659      	mov	r1, fp
 8004818:	018b      	lsls	r3, r1, #6
 800481a:	4651      	mov	r1, sl
 800481c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004820:	4651      	mov	r1, sl
 8004822:	018a      	lsls	r2, r1, #6
 8004824:	4651      	mov	r1, sl
 8004826:	ebb2 0801 	subs.w	r8, r2, r1
 800482a:	4659      	mov	r1, fp
 800482c:	eb63 0901 	sbc.w	r9, r3, r1
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800483c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004840:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004844:	4690      	mov	r8, r2
 8004846:	4699      	mov	r9, r3
 8004848:	4623      	mov	r3, r4
 800484a:	eb18 0303 	adds.w	r3, r8, r3
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	462b      	mov	r3, r5
 8004852:	eb49 0303 	adc.w	r3, r9, r3
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004864:	4629      	mov	r1, r5
 8004866:	024b      	lsls	r3, r1, #9
 8004868:	4621      	mov	r1, r4
 800486a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800486e:	4621      	mov	r1, r4
 8004870:	024a      	lsls	r2, r1, #9
 8004872:	4610      	mov	r0, r2
 8004874:	4619      	mov	r1, r3
 8004876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800487a:	2200      	movs	r2, #0
 800487c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800487e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004880:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004884:	f7fb fd1c 	bl	80002c0 <__aeabi_uldivmod>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4613      	mov	r3, r2
 800488e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004892:	e065      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x420>
 8004894:	40023800 	.word	0x40023800
 8004898:	00f42400 	.word	0x00f42400
 800489c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a0:	4b3d      	ldr	r3, [pc, #244]	@ (8004998 <HAL_RCC_GetSysClockFreq+0x458>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	099b      	lsrs	r3, r3, #6
 80048a6:	2200      	movs	r2, #0
 80048a8:	4618      	mov	r0, r3
 80048aa:	4611      	mov	r1, r2
 80048ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80048b2:	2300      	movs	r3, #0
 80048b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80048b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80048ba:	4642      	mov	r2, r8
 80048bc:	464b      	mov	r3, r9
 80048be:	f04f 0000 	mov.w	r0, #0
 80048c2:	f04f 0100 	mov.w	r1, #0
 80048c6:	0159      	lsls	r1, r3, #5
 80048c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048cc:	0150      	lsls	r0, r2, #5
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4641      	mov	r1, r8
 80048d4:	1a51      	subs	r1, r2, r1
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	4649      	mov	r1, r9
 80048da:	eb63 0301 	sbc.w	r3, r3, r1
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80048ec:	4659      	mov	r1, fp
 80048ee:	018b      	lsls	r3, r1, #6
 80048f0:	4651      	mov	r1, sl
 80048f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048f6:	4651      	mov	r1, sl
 80048f8:	018a      	lsls	r2, r1, #6
 80048fa:	4651      	mov	r1, sl
 80048fc:	1a54      	subs	r4, r2, r1
 80048fe:	4659      	mov	r1, fp
 8004900:	eb63 0501 	sbc.w	r5, r3, r1
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	00eb      	lsls	r3, r5, #3
 800490e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004912:	00e2      	lsls	r2, r4, #3
 8004914:	4614      	mov	r4, r2
 8004916:	461d      	mov	r5, r3
 8004918:	4643      	mov	r3, r8
 800491a:	18e3      	adds	r3, r4, r3
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	464b      	mov	r3, r9
 8004920:	eb45 0303 	adc.w	r3, r5, r3
 8004924:	607b      	str	r3, [r7, #4]
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004932:	4629      	mov	r1, r5
 8004934:	028b      	lsls	r3, r1, #10
 8004936:	4621      	mov	r1, r4
 8004938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800493c:	4621      	mov	r1, r4
 800493e:	028a      	lsls	r2, r1, #10
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004948:	2200      	movs	r2, #0
 800494a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800494c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800494e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004952:	f7fb fcb5 	bl	80002c0 <__aeabi_uldivmod>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4613      	mov	r3, r2
 800495c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004960:	4b0d      	ldr	r3, [pc, #52]	@ (8004998 <HAL_RCC_GetSysClockFreq+0x458>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	0f1b      	lsrs	r3, r3, #28
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800496e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004972:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004976:	fbb2 f3f3 	udiv	r3, r2, r3
 800497a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800497e:	e003      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004980:	4b06      	ldr	r3, [pc, #24]	@ (800499c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004982:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004986:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004988:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800498c:	4618      	mov	r0, r3
 800498e:	37b8      	adds	r7, #184	@ 0xb8
 8004990:	46bd      	mov	sp, r7
 8004992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004996:	bf00      	nop
 8004998:	40023800 	.word	0x40023800
 800499c:	00f42400 	.word	0x00f42400

080049a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e28d      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 8083 	beq.w	8004ac6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80049c0:	4b94      	ldr	r3, [pc, #592]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 030c 	and.w	r3, r3, #12
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d019      	beq.n	8004a00 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80049cc:	4b91      	ldr	r3, [pc, #580]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 030c 	and.w	r3, r3, #12
        || \
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d106      	bne.n	80049e6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80049d8:	4b8e      	ldr	r3, [pc, #568]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049e4:	d00c      	beq.n	8004a00 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049e6:	4b8b      	ldr	r3, [pc, #556]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80049ee:	2b0c      	cmp	r3, #12
 80049f0:	d112      	bne.n	8004a18 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049f2:	4b88      	ldr	r3, [pc, #544]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049fe:	d10b      	bne.n	8004a18 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a00:	4b84      	ldr	r3, [pc, #528]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d05b      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x124>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d157      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e25a      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a20:	d106      	bne.n	8004a30 <HAL_RCC_OscConfig+0x90>
 8004a22:	4b7c      	ldr	r3, [pc, #496]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a7b      	ldr	r2, [pc, #492]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	e01d      	b.n	8004a6c <HAL_RCC_OscConfig+0xcc>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a38:	d10c      	bne.n	8004a54 <HAL_RCC_OscConfig+0xb4>
 8004a3a:	4b76      	ldr	r3, [pc, #472]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a75      	ldr	r2, [pc, #468]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	4b73      	ldr	r3, [pc, #460]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a72      	ldr	r2, [pc, #456]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	e00b      	b.n	8004a6c <HAL_RCC_OscConfig+0xcc>
 8004a54:	4b6f      	ldr	r3, [pc, #444]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a6e      	ldr	r2, [pc, #440]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	4b6c      	ldr	r3, [pc, #432]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a6b      	ldr	r2, [pc, #428]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d013      	beq.n	8004a9c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fd ff44 	bl	8002900 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a7c:	f7fd ff40 	bl	8002900 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b64      	cmp	r3, #100	@ 0x64
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e21f      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a8e:	4b61      	ldr	r3, [pc, #388]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0xdc>
 8004a9a:	e014      	b.n	8004ac6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fd ff30 	bl	8002900 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa4:	f7fd ff2c 	bl	8002900 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b64      	cmp	r3, #100	@ 0x64
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e20b      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ab6:	4b57      	ldr	r3, [pc, #348]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f0      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x104>
 8004ac2:	e000      	b.n	8004ac6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d06f      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004ad2:	4b50      	ldr	r3, [pc, #320]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 030c 	and.w	r3, r3, #12
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d017      	beq.n	8004b0e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004ade:	4b4d      	ldr	r3, [pc, #308]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
        || \
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d105      	bne.n	8004af6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004aea:	4b4a      	ldr	r3, [pc, #296]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004af6:	4b47      	ldr	r3, [pc, #284]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004afe:	2b0c      	cmp	r3, #12
 8004b00:	d11c      	bne.n	8004b3c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b02:	4b44      	ldr	r3, [pc, #272]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d116      	bne.n	8004b3c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b0e:	4b41      	ldr	r3, [pc, #260]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <HAL_RCC_OscConfig+0x186>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d001      	beq.n	8004b26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e1d3      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b26:	4b3b      	ldr	r3, [pc, #236]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	4937      	ldr	r1, [pc, #220]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b3a:	e03a      	b.n	8004bb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d020      	beq.n	8004b86 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b44:	4b34      	ldr	r3, [pc, #208]	@ (8004c18 <HAL_RCC_OscConfig+0x278>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4a:	f7fd fed9 	bl	8002900 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b52:	f7fd fed5 	bl	8002900 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e1b4      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b64:	4b2b      	ldr	r3, [pc, #172]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b70:	4b28      	ldr	r3, [pc, #160]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	4925      	ldr	r1, [pc, #148]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	600b      	str	r3, [r1, #0]
 8004b84:	e015      	b.n	8004bb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b86:	4b24      	ldr	r3, [pc, #144]	@ (8004c18 <HAL_RCC_OscConfig+0x278>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8c:	f7fd feb8 	bl	8002900 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b94:	f7fd feb4 	bl	8002900 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e193      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d036      	beq.n	8004c2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d016      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc6:	4b15      	ldr	r3, [pc, #84]	@ (8004c1c <HAL_RCC_OscConfig+0x27c>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bcc:	f7fd fe98 	bl	8002900 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd4:	f7fd fe94 	bl	8002900 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e173      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x234>
 8004bf2:	e01b      	b.n	8004c2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bf4:	4b09      	ldr	r3, [pc, #36]	@ (8004c1c <HAL_RCC_OscConfig+0x27c>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfa:	f7fd fe81 	bl	8002900 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c00:	e00e      	b.n	8004c20 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c02:	f7fd fe7d 	bl	8002900 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d907      	bls.n	8004c20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e15c      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
 8004c14:	40023800 	.word	0x40023800
 8004c18:	42470000 	.word	0x42470000
 8004c1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c20:	4b8a      	ldr	r3, [pc, #552]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004c22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1ea      	bne.n	8004c02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8097 	beq.w	8004d68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c3e:	4b83      	ldr	r3, [pc, #524]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10f      	bne.n	8004c6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	4a7e      	ldr	r2, [pc, #504]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c5a:	4b7c      	ldr	r3, [pc, #496]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c66:	2301      	movs	r3, #1
 8004c68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6a:	4b79      	ldr	r3, [pc, #484]	@ (8004e50 <HAL_RCC_OscConfig+0x4b0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d118      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c76:	4b76      	ldr	r3, [pc, #472]	@ (8004e50 <HAL_RCC_OscConfig+0x4b0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a75      	ldr	r2, [pc, #468]	@ (8004e50 <HAL_RCC_OscConfig+0x4b0>)
 8004c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c82:	f7fd fe3d 	bl	8002900 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8a:	f7fd fe39 	bl	8002900 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e118      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9c:	4b6c      	ldr	r3, [pc, #432]	@ (8004e50 <HAL_RCC_OscConfig+0x4b0>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d106      	bne.n	8004cbe <HAL_RCC_OscConfig+0x31e>
 8004cb0:	4b66      	ldr	r3, [pc, #408]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb4:	4a65      	ldr	r2, [pc, #404]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004cb6:	f043 0301 	orr.w	r3, r3, #1
 8004cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cbc:	e01c      	b.n	8004cf8 <HAL_RCC_OscConfig+0x358>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2b05      	cmp	r3, #5
 8004cc4:	d10c      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x340>
 8004cc6:	4b61      	ldr	r3, [pc, #388]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cca:	4a60      	ldr	r2, [pc, #384]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004ccc:	f043 0304 	orr.w	r3, r3, #4
 8004cd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cd2:	4b5e      	ldr	r3, [pc, #376]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd6:	4a5d      	ldr	r2, [pc, #372]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cde:	e00b      	b.n	8004cf8 <HAL_RCC_OscConfig+0x358>
 8004ce0:	4b5a      	ldr	r3, [pc, #360]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce4:	4a59      	ldr	r2, [pc, #356]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cec:	4b57      	ldr	r3, [pc, #348]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf0:	4a56      	ldr	r2, [pc, #344]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004cf2:	f023 0304 	bic.w	r3, r3, #4
 8004cf6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d015      	beq.n	8004d2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d00:	f7fd fdfe 	bl	8002900 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d06:	e00a      	b.n	8004d1e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d08:	f7fd fdfa 	bl	8002900 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e0d7      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1e:	4b4b      	ldr	r3, [pc, #300]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0ee      	beq.n	8004d08 <HAL_RCC_OscConfig+0x368>
 8004d2a:	e014      	b.n	8004d56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2c:	f7fd fde8 	bl	8002900 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d32:	e00a      	b.n	8004d4a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d34:	f7fd fde4 	bl	8002900 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e0c1      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d4a:	4b40      	ldr	r3, [pc, #256]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1ee      	bne.n	8004d34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d56:	7dfb      	ldrb	r3, [r7, #23]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d105      	bne.n	8004d68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d60:	4a3a      	ldr	r2, [pc, #232]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004d62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 80ad 	beq.w	8004ecc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d72:	4b36      	ldr	r3, [pc, #216]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 030c 	and.w	r3, r3, #12
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d060      	beq.n	8004e40 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d145      	bne.n	8004e12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d86:	4b33      	ldr	r3, [pc, #204]	@ (8004e54 <HAL_RCC_OscConfig+0x4b4>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fd fdb8 	bl	8002900 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fd fdb4 	bl	8002900 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e093      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da6:	4b29      	ldr	r3, [pc, #164]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc0:	019b      	lsls	r3, r3, #6
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	041b      	lsls	r3, r3, #16
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd4:	061b      	lsls	r3, r3, #24
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ddc:	071b      	lsls	r3, r3, #28
 8004dde:	491b      	ldr	r1, [pc, #108]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004de4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e54 <HAL_RCC_OscConfig+0x4b4>)
 8004de6:	2201      	movs	r2, #1
 8004de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dea:	f7fd fd89 	bl	8002900 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df2:	f7fd fd85 	bl	8002900 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e064      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e04:	4b11      	ldr	r3, [pc, #68]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f0      	beq.n	8004df2 <HAL_RCC_OscConfig+0x452>
 8004e10:	e05c      	b.n	8004ecc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e12:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <HAL_RCC_OscConfig+0x4b4>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fd fd72 	bl	8002900 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fd fd6e 	bl	8002900 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e04d      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e32:	4b06      	ldr	r3, [pc, #24]	@ (8004e4c <HAL_RCC_OscConfig+0x4ac>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0x480>
 8004e3e:	e045      	b.n	8004ecc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d107      	bne.n	8004e58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e040      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	40007000 	.word	0x40007000
 8004e54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e58:	4b1f      	ldr	r3, [pc, #124]	@ (8004ed8 <HAL_RCC_OscConfig+0x538>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d030      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d129      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d122      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e88:	4013      	ands	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d119      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d10f      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d107      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d001      	beq.n	8004ecc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40023800 	.word	0x40023800

08004edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e07b      	b.n	8004fe6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d108      	bne.n	8004f08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004efe:	d009      	beq.n	8004f14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	61da      	str	r2, [r3, #28]
 8004f06:	e005      	b.n	8004f14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fd f8cc 	bl	80020cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f98:	ea42 0103 	orr.w	r1, r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	0c1b      	lsrs	r3, r3, #16
 8004fb2:	f003 0104 	and.w	r1, r3, #4
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	f003 0210 	and.w	r2, r3, #16
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b088      	sub	sp, #32
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	603b      	str	r3, [r7, #0]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ffe:	f7fd fc7f 	bl	8002900 <HAL_GetTick>
 8005002:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	d001      	beq.n	8005018 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005014:	2302      	movs	r3, #2
 8005016:	e12a      	b.n	800526e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_SPI_Transmit+0x36>
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e122      	b.n	800526e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_SPI_Transmit+0x48>
 8005032:	2302      	movs	r3, #2
 8005034:	e11b      	b.n	800526e <HAL_SPI_Transmit+0x280>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2203      	movs	r2, #3
 8005042:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	88fa      	ldrh	r2, [r7, #6]
 8005056:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	88fa      	ldrh	r2, [r7, #6]
 800505c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005084:	d10f      	bne.n	80050a6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005094:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b0:	2b40      	cmp	r3, #64	@ 0x40
 80050b2:	d007      	beq.n	80050c4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050cc:	d152      	bne.n	8005174 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_SPI_Transmit+0xee>
 80050d6:	8b7b      	ldrh	r3, [r7, #26]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d145      	bne.n	8005168 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e0:	881a      	ldrh	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ec:	1c9a      	adds	r2, r3, #2
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005100:	e032      	b.n	8005168 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b02      	cmp	r3, #2
 800510e:	d112      	bne.n	8005136 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005114:	881a      	ldrh	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005120:	1c9a      	adds	r2, r3, #2
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005134:	e018      	b.n	8005168 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005136:	f7fd fbe3 	bl	8002900 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d803      	bhi.n	800514e <HAL_SPI_Transmit+0x160>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d102      	bne.n	8005154 <HAL_SPI_Transmit+0x166>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d109      	bne.n	8005168 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e082      	b.n	800526e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1c7      	bne.n	8005102 <HAL_SPI_Transmit+0x114>
 8005172:	e053      	b.n	800521c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <HAL_SPI_Transmit+0x194>
 800517c:	8b7b      	ldrh	r3, [r7, #26]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d147      	bne.n	8005212 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
 800518c:	7812      	ldrb	r2, [r2, #0]
 800518e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051a8:	e033      	b.n	8005212 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d113      	bne.n	80051e0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	7812      	ldrb	r2, [r2, #0]
 80051c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80051de:	e018      	b.n	8005212 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051e0:	f7fd fb8e 	bl	8002900 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d803      	bhi.n	80051f8 <HAL_SPI_Transmit+0x20a>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d102      	bne.n	80051fe <HAL_SPI_Transmit+0x210>
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e02d      	b.n	800526e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1c6      	bne.n	80051aa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	6839      	ldr	r1, [r7, #0]
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f8b1 	bl	8005388 <SPI_EndRxTxTransaction>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10a      	bne.n	8005250 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800526c:	2300      	movs	r3, #0
  }
}
 800526e:	4618      	mov	r0, r3
 8005270:	3720      	adds	r7, #32
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005288:	f7fd fb3a 	bl	8002900 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	4413      	add	r3, r2
 8005296:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005298:	f7fd fb32 	bl	8002900 <HAL_GetTick>
 800529c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800529e:	4b39      	ldr	r3, [pc, #228]	@ (8005384 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	015b      	lsls	r3, r3, #5
 80052a4:	0d1b      	lsrs	r3, r3, #20
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	fb02 f303 	mul.w	r3, r2, r3
 80052ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052ae:	e054      	b.n	800535a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d050      	beq.n	800535a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052b8:	f7fd fb22 	bl	8002900 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	69fa      	ldr	r2, [r7, #28]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d902      	bls.n	80052ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d13d      	bne.n	800534a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052e6:	d111      	bne.n	800530c <SPI_WaitFlagStateUntilTimeout+0x94>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052f0:	d004      	beq.n	80052fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052fa:	d107      	bne.n	800530c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800530a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005314:	d10f      	bne.n	8005336 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005334:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e017      	b.n	800537a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	3b01      	subs	r3, #1
 8005358:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4013      	ands	r3, r2
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	429a      	cmp	r2, r3
 8005368:	bf0c      	ite	eq
 800536a:	2301      	moveq	r3, #1
 800536c:	2300      	movne	r3, #0
 800536e:	b2db      	uxtb	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	429a      	cmp	r2, r3
 8005376:	d19b      	bne.n	80052b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3720      	adds	r7, #32
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000018 	.word	0x20000018

08005388 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af02      	add	r7, sp, #8
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2201      	movs	r2, #1
 800539c:	2102      	movs	r1, #2
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f7ff ff6a 	bl	8005278 <SPI_WaitFlagStateUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ae:	f043 0220 	orr.w	r2, r3, #32
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e032      	b.n	8005420 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005428 <SPI_EndRxTxTransaction+0xa0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1b      	ldr	r2, [pc, #108]	@ (800542c <SPI_EndRxTxTransaction+0xa4>)
 80053c0:	fba2 2303 	umull	r2, r3, r2, r3
 80053c4:	0d5b      	lsrs	r3, r3, #21
 80053c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80053ca:	fb02 f303 	mul.w	r3, r2, r3
 80053ce:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053d8:	d112      	bne.n	8005400 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2200      	movs	r2, #0
 80053e2:	2180      	movs	r1, #128	@ 0x80
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f7ff ff47 	bl	8005278 <SPI_WaitFlagStateUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d016      	beq.n	800541e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f4:	f043 0220 	orr.w	r2, r3, #32
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e00f      	b.n	8005420 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	3b01      	subs	r3, #1
 800540a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005416:	2b80      	cmp	r3, #128	@ 0x80
 8005418:	d0f2      	beq.n	8005400 <SPI_EndRxTxTransaction+0x78>
 800541a:	e000      	b.n	800541e <SPI_EndRxTxTransaction+0x96>
        break;
 800541c:	bf00      	nop
  }

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20000018 	.word	0x20000018
 800542c:	165e9f81 	.word	0x165e9f81

08005430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e041      	b.n	80054c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fd f8a8 	bl	80025ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f000 f9e6 	bl	8005840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d001      	beq.n	80054e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e04e      	b.n	8005586 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0201 	orr.w	r2, r2, #1
 80054fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a23      	ldr	r2, [pc, #140]	@ (8005594 <HAL_TIM_Base_Start_IT+0xc4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d022      	beq.n	8005550 <HAL_TIM_Base_Start_IT+0x80>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005512:	d01d      	beq.n	8005550 <HAL_TIM_Base_Start_IT+0x80>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1f      	ldr	r2, [pc, #124]	@ (8005598 <HAL_TIM_Base_Start_IT+0xc8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d018      	beq.n	8005550 <HAL_TIM_Base_Start_IT+0x80>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1e      	ldr	r2, [pc, #120]	@ (800559c <HAL_TIM_Base_Start_IT+0xcc>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <HAL_TIM_Base_Start_IT+0x80>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1c      	ldr	r2, [pc, #112]	@ (80055a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00e      	beq.n	8005550 <HAL_TIM_Base_Start_IT+0x80>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1b      	ldr	r2, [pc, #108]	@ (80055a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d009      	beq.n	8005550 <HAL_TIM_Base_Start_IT+0x80>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a19      	ldr	r2, [pc, #100]	@ (80055a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d004      	beq.n	8005550 <HAL_TIM_Base_Start_IT+0x80>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a18      	ldr	r2, [pc, #96]	@ (80055ac <HAL_TIM_Base_Start_IT+0xdc>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d111      	bne.n	8005574 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b06      	cmp	r3, #6
 8005560:	d010      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0201 	orr.w	r2, r2, #1
 8005570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005572:	e007      	b.n	8005584 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	40010000 	.word	0x40010000
 8005598:	40000400 	.word	0x40000400
 800559c:	40000800 	.word	0x40000800
 80055a0:	40000c00 	.word	0x40000c00
 80055a4:	40010400 	.word	0x40010400
 80055a8:	40014000 	.word	0x40014000
 80055ac:	40001800 	.word	0x40001800

080055b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0201 	bic.w	r2, r2, #1
 80055c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6a1a      	ldr	r2, [r3, #32]
 80055ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055d2:	4013      	ands	r3, r2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10f      	bne.n	80055f8 <HAL_TIM_Base_Stop_IT+0x48>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6a1a      	ldr	r2, [r3, #32]
 80055de:	f240 4344 	movw	r3, #1092	@ 0x444
 80055e2:	4013      	ands	r3, r2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d107      	bne.n	80055f8 <HAL_TIM_Base_Stop_IT+0x48>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0201 	bic.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d020      	beq.n	8005672 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01b      	beq.n	8005672 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f06f 0202 	mvn.w	r2, #2
 8005642:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	f003 0303 	and.w	r3, r3, #3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f8d2 	bl	8005802 <HAL_TIM_IC_CaptureCallback>
 800565e:	e005      	b.n	800566c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f8c4 	bl	80057ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f8d5 	bl	8005816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	d020      	beq.n	80056be <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01b      	beq.n	80056be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f06f 0204 	mvn.w	r2, #4
 800568e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f8ac 	bl	8005802 <HAL_TIM_IC_CaptureCallback>
 80056aa:	e005      	b.n	80056b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f89e 	bl	80057ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f8af 	bl	8005816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f003 0308 	and.w	r3, r3, #8
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d020      	beq.n	800570a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d01b      	beq.n	800570a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f06f 0208 	mvn.w	r2, #8
 80056da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2204      	movs	r2, #4
 80056e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f003 0303 	and.w	r3, r3, #3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f886 	bl	8005802 <HAL_TIM_IC_CaptureCallback>
 80056f6:	e005      	b.n	8005704 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f878 	bl	80057ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f889 	bl	8005816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	d020      	beq.n	8005756 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 0310 	and.w	r3, r3, #16
 800571a:	2b00      	cmp	r3, #0
 800571c:	d01b      	beq.n	8005756 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f06f 0210 	mvn.w	r2, #16
 8005726:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2208      	movs	r2, #8
 800572c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f860 	bl	8005802 <HAL_TIM_IC_CaptureCallback>
 8005742:	e005      	b.n	8005750 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f852 	bl	80057ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f863 	bl	8005816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00c      	beq.n	800577a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f06f 0201 	mvn.w	r2, #1
 8005772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7fc fc13 	bl	8001fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00c      	beq.n	800579e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f983 	bl	8005aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00c      	beq.n	80057c2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d007      	beq.n	80057c2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f834 	bl	800582a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00c      	beq.n	80057e6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d007      	beq.n	80057e6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f06f 0220 	mvn.w	r2, #32
 80057de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f955 	bl	8005a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057e6:	bf00      	nop
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a46      	ldr	r2, [pc, #280]	@ (800596c <TIM_Base_SetConfig+0x12c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d013      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800585e:	d00f      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a43      	ldr	r2, [pc, #268]	@ (8005970 <TIM_Base_SetConfig+0x130>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00b      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a42      	ldr	r2, [pc, #264]	@ (8005974 <TIM_Base_SetConfig+0x134>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d007      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a41      	ldr	r2, [pc, #260]	@ (8005978 <TIM_Base_SetConfig+0x138>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a40      	ldr	r2, [pc, #256]	@ (800597c <TIM_Base_SetConfig+0x13c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d108      	bne.n	8005892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a35      	ldr	r2, [pc, #212]	@ (800596c <TIM_Base_SetConfig+0x12c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d02b      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058a0:	d027      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a32      	ldr	r2, [pc, #200]	@ (8005970 <TIM_Base_SetConfig+0x130>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d023      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a31      	ldr	r2, [pc, #196]	@ (8005974 <TIM_Base_SetConfig+0x134>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01f      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a30      	ldr	r2, [pc, #192]	@ (8005978 <TIM_Base_SetConfig+0x138>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01b      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2f      	ldr	r2, [pc, #188]	@ (800597c <TIM_Base_SetConfig+0x13c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d017      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2e      	ldr	r2, [pc, #184]	@ (8005980 <TIM_Base_SetConfig+0x140>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2d      	ldr	r2, [pc, #180]	@ (8005984 <TIM_Base_SetConfig+0x144>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00f      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a2c      	ldr	r2, [pc, #176]	@ (8005988 <TIM_Base_SetConfig+0x148>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00b      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2b      	ldr	r2, [pc, #172]	@ (800598c <TIM_Base_SetConfig+0x14c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005990 <TIM_Base_SetConfig+0x150>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a29      	ldr	r2, [pc, #164]	@ (8005994 <TIM_Base_SetConfig+0x154>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d108      	bne.n	8005904 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a10      	ldr	r2, [pc, #64]	@ (800596c <TIM_Base_SetConfig+0x12c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d003      	beq.n	8005938 <TIM_Base_SetConfig+0xf8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a12      	ldr	r2, [pc, #72]	@ (800597c <TIM_Base_SetConfig+0x13c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d103      	bne.n	8005940 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b01      	cmp	r3, #1
 8005950:	d105      	bne.n	800595e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f023 0201 	bic.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	611a      	str	r2, [r3, #16]
  }
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40010000 	.word	0x40010000
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40010400 	.word	0x40010400
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800
 800598c:	40001800 	.word	0x40001800
 8005990:	40001c00 	.word	0x40001c00
 8005994:	40002000 	.word	0x40002000

08005998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e05a      	b.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a21      	ldr	r2, [pc, #132]	@ (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d022      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059fc:	d01d      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1d      	ldr	r2, [pc, #116]	@ (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d018      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1a      	ldr	r2, [pc, #104]	@ (8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00e      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a18      	ldr	r2, [pc, #96]	@ (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a17      	ldr	r2, [pc, #92]	@ (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a15      	ldr	r2, [pc, #84]	@ (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d10c      	bne.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40010000 	.word	0x40010000
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40000800 	.word	0x40000800
 8005a80:	40000c00 	.word	0x40000c00
 8005a84:	40010400 	.word	0x40010400
 8005a88:	40014000 	.word	0x40014000
 8005a8c:	40001800 	.word	0x40001800

08005a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e042      	b.n	8005b50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fc fe2e 	bl	8002740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2224      	movs	r2, #36	@ 0x24
 8005ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fdf3 	bl	80066e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695a      	ldr	r2, [r3, #20]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08a      	sub	sp, #40	@ 0x28
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	603b      	str	r3, [r7, #0]
 8005b64:	4613      	mov	r3, r2
 8005b66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	d175      	bne.n	8005c64 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <HAL_UART_Transmit+0x2c>
 8005b7e:	88fb      	ldrh	r3, [r7, #6]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e06e      	b.n	8005c66 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2221      	movs	r2, #33	@ 0x21
 8005b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b96:	f7fc feb3 	bl	8002900 <HAL_GetTick>
 8005b9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	88fa      	ldrh	r2, [r7, #6]
 8005ba0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	88fa      	ldrh	r2, [r7, #6]
 8005ba6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb0:	d108      	bne.n	8005bc4 <HAL_UART_Transmit+0x6c>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d104      	bne.n	8005bc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	61bb      	str	r3, [r7, #24]
 8005bc2:	e003      	b.n	8005bcc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bcc:	e02e      	b.n	8005c2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2180      	movs	r1, #128	@ 0x80
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 fb55 	bl	8006288 <UART_WaitOnFlagUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e03a      	b.n	8005c66 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10b      	bne.n	8005c0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	3302      	adds	r3, #2
 8005c0a:	61bb      	str	r3, [r7, #24]
 8005c0c:	e007      	b.n	8005c1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	781a      	ldrb	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1cb      	bne.n	8005bce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2140      	movs	r1, #64	@ 0x40
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fb21 	bl	8006288 <UART_WaitOnFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e006      	b.n	8005c66 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e000      	b.n	8005c66 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005c64:	2302      	movs	r3, #2
  }
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3720      	adds	r7, #32
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b085      	sub	sp, #20
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d121      	bne.n	8005ccc <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <HAL_UART_Transmit_IT+0x26>
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e01a      	b.n	8005cce <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	88fa      	ldrh	r2, [r7, #6]
 8005ca2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	88fa      	ldrh	r2, [r7, #6]
 8005ca8:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2221      	movs	r2, #33	@ 0x21
 8005cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005cc6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e000      	b.n	8005cce <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005ccc:	2302      	movs	r3, #2
  }
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	d112      	bne.n	8005d1a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <HAL_UART_Receive_IT+0x26>
 8005cfa:	88fb      	ldrh	r3, [r7, #6]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e00b      	b.n	8005d1c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d0a:	88fb      	ldrh	r3, [r7, #6]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 fb12 	bl	800633a <UART_Start_Receive_IT>
 8005d16:	4603      	mov	r3, r0
 8005d18:	e000      	b.n	8005d1c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005d1a:	2302      	movs	r3, #2
  }
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b0ba      	sub	sp, #232	@ 0xe8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005d62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10f      	bne.n	8005d8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d009      	beq.n	8005d8a <HAL_UART_IRQHandler+0x66>
 8005d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fbf2 	bl	800656c <UART_Receive_IT>
      return;
 8005d88:	e25b      	b.n	8006242 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 80de 	beq.w	8005f50 <HAL_UART_IRQHandler+0x22c>
 8005d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d106      	bne.n	8005dae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005da4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 80d1 	beq.w	8005f50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00b      	beq.n	8005dd2 <HAL_UART_IRQHandler+0xae>
 8005dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dca:	f043 0201 	orr.w	r2, r3, #1
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dd6:	f003 0304 	and.w	r3, r3, #4
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00b      	beq.n	8005df6 <HAL_UART_IRQHandler+0xd2>
 8005dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dee:	f043 0202 	orr.w	r2, r3, #2
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00b      	beq.n	8005e1a <HAL_UART_IRQHandler+0xf6>
 8005e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e12:	f043 0204 	orr.w	r2, r3, #4
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d011      	beq.n	8005e4a <HAL_UART_IRQHandler+0x126>
 8005e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d105      	bne.n	8005e3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d005      	beq.n	8005e4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e42:	f043 0208 	orr.w	r2, r3, #8
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 81f2 	beq.w	8006238 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <HAL_UART_IRQHandler+0x14e>
 8005e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fb7d 	bl	800656c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7c:	2b40      	cmp	r3, #64	@ 0x40
 8005e7e:	bf0c      	ite	eq
 8005e80:	2301      	moveq	r3, #1
 8005e82:	2300      	movne	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d103      	bne.n	8005e9e <HAL_UART_IRQHandler+0x17a>
 8005e96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d04f      	beq.n	8005f3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fa85 	bl	80063ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eae:	2b40      	cmp	r3, #64	@ 0x40
 8005eb0:	d141      	bne.n	8005f36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3314      	adds	r3, #20
 8005eb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ecc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3314      	adds	r3, #20
 8005eda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005ede:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005eea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1d9      	bne.n	8005eb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d013      	beq.n	8005f2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f0a:	4a7e      	ldr	r2, [pc, #504]	@ (8006104 <HAL_UART_IRQHandler+0x3e0>)
 8005f0c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fc fea5 	bl	8002c62 <HAL_DMA_Abort_IT>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d016      	beq.n	8005f4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f28:	4610      	mov	r0, r2
 8005f2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2c:	e00e      	b.n	8005f4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f994 	bl	800625c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f34:	e00a      	b.n	8005f4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f990 	bl	800625c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	e006      	b.n	8005f4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f98c 	bl	800625c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005f4a:	e175      	b.n	8006238 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4c:	bf00      	nop
    return;
 8005f4e:	e173      	b.n	8006238 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	f040 814f 	bne.w	80061f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f5e:	f003 0310 	and.w	r3, r3, #16
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 8148 	beq.w	80061f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 8141 	beq.w	80061f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f96:	2b40      	cmp	r3, #64	@ 0x40
 8005f98:	f040 80b6 	bne.w	8006108 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 8145 	beq.w	800623c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	f080 813e 	bcs.w	800623c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fc6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fd2:	f000 8088 	beq.w	80060e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005fec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ff0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	330c      	adds	r3, #12
 8005ffe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006002:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006006:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800600e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800601a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1d9      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006032:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006034:	f023 0301 	bic.w	r3, r3, #1
 8006038:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3314      	adds	r3, #20
 8006042:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006046:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800604a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800604e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006058:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e1      	bne.n	8006022 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3314      	adds	r3, #20
 8006064:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800606e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006074:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3314      	adds	r3, #20
 800607e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006082:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006084:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006086:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006088:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800608a:	e841 2300 	strex	r3, r2, [r1]
 800608e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e3      	bne.n	800605e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	330c      	adds	r3, #12
 80060aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060b6:	f023 0310 	bic.w	r3, r3, #16
 80060ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	330c      	adds	r3, #12
 80060c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80060c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80060ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e3      	bne.n	80060a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fc fd4e 	bl	8002b82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2202      	movs	r2, #2
 80060ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f8b7 	bl	8006270 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006102:	e09b      	b.n	800623c <HAL_UART_IRQHandler+0x518>
 8006104:	08006475 	.word	0x08006475
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006110:	b29b      	uxth	r3, r3
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 808e 	beq.w	8006240 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 8089 	beq.w	8006240 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	330c      	adds	r3, #12
 8006134:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006138:	e853 3f00 	ldrex	r3, [r3]
 800613c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800613e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006140:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006144:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006152:	647a      	str	r2, [r7, #68]	@ 0x44
 8006154:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006158:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e3      	bne.n	800612e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3314      	adds	r3, #20
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	623b      	str	r3, [r7, #32]
   return(result);
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	f023 0301 	bic.w	r3, r3, #1
 800617c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3314      	adds	r3, #20
 8006186:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800618a:	633a      	str	r2, [r7, #48]	@ 0x30
 800618c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e3      	bne.n	8006166 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	330c      	adds	r3, #12
 80061b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	e853 3f00 	ldrex	r3, [r3]
 80061ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0310 	bic.w	r3, r3, #16
 80061c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	330c      	adds	r3, #12
 80061cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80061d0:	61fa      	str	r2, [r7, #28]
 80061d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	69b9      	ldr	r1, [r7, #24]
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	e841 2300 	strex	r3, r2, [r1]
 80061dc:	617b      	str	r3, [r7, #20]
   return(result);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e3      	bne.n	80061ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f83d 	bl	8006270 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061f6:	e023      	b.n	8006240 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006200:	2b00      	cmp	r3, #0
 8006202:	d009      	beq.n	8006218 <HAL_UART_IRQHandler+0x4f4>
 8006204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f943 	bl	800649c <UART_Transmit_IT>
    return;
 8006216:	e014      	b.n	8006242 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800621c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00e      	beq.n	8006242 <HAL_UART_IRQHandler+0x51e>
 8006224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d008      	beq.n	8006242 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f983 	bl	800653c <UART_EndTransmit_IT>
    return;
 8006236:	e004      	b.n	8006242 <HAL_UART_IRQHandler+0x51e>
    return;
 8006238:	bf00      	nop
 800623a:	e002      	b.n	8006242 <HAL_UART_IRQHandler+0x51e>
      return;
 800623c:	bf00      	nop
 800623e:	e000      	b.n	8006242 <HAL_UART_IRQHandler+0x51e>
      return;
 8006240:	bf00      	nop
  }
}
 8006242:	37e8      	adds	r7, #232	@ 0xe8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	603b      	str	r3, [r7, #0]
 8006294:	4613      	mov	r3, r2
 8006296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006298:	e03b      	b.n	8006312 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a0:	d037      	beq.n	8006312 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a2:	f7fc fb2d 	bl	8002900 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	6a3a      	ldr	r2, [r7, #32]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d302      	bcc.n	80062b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e03a      	b.n	8006332 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f003 0304 	and.w	r3, r3, #4
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d023      	beq.n	8006312 <UART_WaitOnFlagUntilTimeout+0x8a>
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2b80      	cmp	r3, #128	@ 0x80
 80062ce:	d020      	beq.n	8006312 <UART_WaitOnFlagUntilTimeout+0x8a>
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b40      	cmp	r3, #64	@ 0x40
 80062d4:	d01d      	beq.n	8006312 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0308 	and.w	r3, r3, #8
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d116      	bne.n	8006312 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 f857 	bl	80063ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2208      	movs	r2, #8
 8006304:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e00f      	b.n	8006332 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4013      	ands	r3, r2
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	429a      	cmp	r2, r3
 8006320:	bf0c      	ite	eq
 8006322:	2301      	moveq	r3, #1
 8006324:	2300      	movne	r3, #0
 8006326:	b2db      	uxtb	r3, r3
 8006328:	461a      	mov	r2, r3
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	429a      	cmp	r2, r3
 800632e:	d0b4      	beq.n	800629a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800633a:	b480      	push	{r7}
 800633c:	b085      	sub	sp, #20
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	4613      	mov	r3, r2
 8006346:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	88fa      	ldrh	r2, [r7, #6]
 8006352:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	88fa      	ldrh	r2, [r7, #6]
 8006358:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2222      	movs	r2, #34	@ 0x22
 8006364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800637e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695a      	ldr	r2, [r3, #20]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0220 	orr.w	r2, r2, #32
 800639e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b095      	sub	sp, #84	@ 0x54
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	330c      	adds	r3, #12
 80063bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	330c      	adds	r3, #12
 80063d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80063d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e5      	bne.n	80063b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3314      	adds	r3, #20
 80063f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	f023 0301 	bic.w	r3, r3, #1
 8006400:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3314      	adds	r3, #20
 8006408:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800640a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800640c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006412:	e841 2300 	strex	r3, r2, [r1]
 8006416:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1e5      	bne.n	80063ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006422:	2b01      	cmp	r3, #1
 8006424:	d119      	bne.n	800645a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	60bb      	str	r3, [r7, #8]
   return(result);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f023 0310 	bic.w	r3, r3, #16
 800643c:	647b      	str	r3, [r7, #68]	@ 0x44
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	330c      	adds	r3, #12
 8006444:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006446:	61ba      	str	r2, [r7, #24]
 8006448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6979      	ldr	r1, [r7, #20]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	613b      	str	r3, [r7, #16]
   return(result);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e5      	bne.n	8006426 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006468:	bf00      	nop
 800646a:	3754      	adds	r7, #84	@ 0x54
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006480:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7ff fee4 	bl	800625c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006494:	bf00      	nop
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b21      	cmp	r3, #33	@ 0x21
 80064ae:	d13e      	bne.n	800652e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064b8:	d114      	bne.n	80064e4 <UART_Transmit_IT+0x48>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d110      	bne.n	80064e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	461a      	mov	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	1c9a      	adds	r2, r3, #2
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	621a      	str	r2, [r3, #32]
 80064e2:	e008      	b.n	80064f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	1c59      	adds	r1, r3, #1
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6211      	str	r1, [r2, #32]
 80064ee:	781a      	ldrb	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29b      	uxth	r3, r3
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	4619      	mov	r1, r3
 8006504:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10f      	bne.n	800652a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006518:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006528:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	e000      	b.n	8006530 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800652e:	2302      	movs	r3, #2
  }
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006552:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2220      	movs	r2, #32
 8006558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff fe73 	bl	8006248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08c      	sub	sp, #48	@ 0x30
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b22      	cmp	r3, #34	@ 0x22
 800657e:	f040 80ae 	bne.w	80066de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800658a:	d117      	bne.n	80065bc <UART_Receive_IT+0x50>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d113      	bne.n	80065bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006594:	2300      	movs	r3, #0
 8006596:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b4:	1c9a      	adds	r2, r3, #2
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80065ba:	e026      	b.n	800660a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ce:	d007      	beq.n	80065e0 <UART_Receive_IT+0x74>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10a      	bne.n	80065ee <UART_Receive_IT+0x82>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d106      	bne.n	80065ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	e008      	b.n	8006600 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29b      	uxth	r3, r3
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	4619      	mov	r1, r3
 8006618:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800661a:	2b00      	cmp	r3, #0
 800661c:	d15d      	bne.n	80066da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0220 	bic.w	r2, r2, #32
 800662c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800663c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695a      	ldr	r2, [r3, #20]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0201 	bic.w	r2, r2, #1
 800664c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2220      	movs	r2, #32
 8006652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006660:	2b01      	cmp	r3, #1
 8006662:	d135      	bne.n	80066d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	330c      	adds	r3, #12
 8006670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	613b      	str	r3, [r7, #16]
   return(result);
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f023 0310 	bic.w	r3, r3, #16
 8006680:	627b      	str	r3, [r7, #36]	@ 0x24
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	330c      	adds	r3, #12
 8006688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800668a:	623a      	str	r2, [r7, #32]
 800668c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	69f9      	ldr	r1, [r7, #28]
 8006690:	6a3a      	ldr	r2, [r7, #32]
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	61bb      	str	r3, [r7, #24]
   return(result);
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e5      	bne.n	800666a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b10      	cmp	r3, #16
 80066aa:	d10a      	bne.n	80066c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066ac:	2300      	movs	r3, #0
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff fdd1 	bl	8006270 <HAL_UARTEx_RxEventCallback>
 80066ce:	e002      	b.n	80066d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7fb fbeb 	bl	8001eac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	e002      	b.n	80066e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	e000      	b.n	80066e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80066de:	2302      	movs	r3, #2
  }
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3730      	adds	r7, #48	@ 0x30
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066ec:	b0c0      	sub	sp, #256	@ 0x100
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006704:	68d9      	ldr	r1, [r3, #12]
 8006706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	ea40 0301 	orr.w	r3, r0, r1
 8006710:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	431a      	orrs	r2, r3
 8006720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	431a      	orrs	r2, r3
 8006728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	4313      	orrs	r3, r2
 8006730:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006740:	f021 010c 	bic.w	r1, r1, #12
 8006744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800674e:	430b      	orrs	r3, r1
 8006750:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800675e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006762:	6999      	ldr	r1, [r3, #24]
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	ea40 0301 	orr.w	r3, r0, r1
 800676e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4b8f      	ldr	r3, [pc, #572]	@ (80069b4 <UART_SetConfig+0x2cc>)
 8006778:	429a      	cmp	r2, r3
 800677a:	d005      	beq.n	8006788 <UART_SetConfig+0xa0>
 800677c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	4b8d      	ldr	r3, [pc, #564]	@ (80069b8 <UART_SetConfig+0x2d0>)
 8006784:	429a      	cmp	r2, r3
 8006786:	d104      	bne.n	8006792 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006788:	f7fd fec6 	bl	8004518 <HAL_RCC_GetPCLK2Freq>
 800678c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006790:	e003      	b.n	800679a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006792:	f7fd fead 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 8006796:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800679a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067a4:	f040 810c 	bne.w	80069c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80067b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80067ba:	4622      	mov	r2, r4
 80067bc:	462b      	mov	r3, r5
 80067be:	1891      	adds	r1, r2, r2
 80067c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80067c2:	415b      	adcs	r3, r3
 80067c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80067ca:	4621      	mov	r1, r4
 80067cc:	eb12 0801 	adds.w	r8, r2, r1
 80067d0:	4629      	mov	r1, r5
 80067d2:	eb43 0901 	adc.w	r9, r3, r1
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	f04f 0300 	mov.w	r3, #0
 80067de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067ea:	4690      	mov	r8, r2
 80067ec:	4699      	mov	r9, r3
 80067ee:	4623      	mov	r3, r4
 80067f0:	eb18 0303 	adds.w	r3, r8, r3
 80067f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067f8:	462b      	mov	r3, r5
 80067fa:	eb49 0303 	adc.w	r3, r9, r3
 80067fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800680e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006812:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006816:	460b      	mov	r3, r1
 8006818:	18db      	adds	r3, r3, r3
 800681a:	653b      	str	r3, [r7, #80]	@ 0x50
 800681c:	4613      	mov	r3, r2
 800681e:	eb42 0303 	adc.w	r3, r2, r3
 8006822:	657b      	str	r3, [r7, #84]	@ 0x54
 8006824:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006828:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800682c:	f7f9 fd48 	bl	80002c0 <__aeabi_uldivmod>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	4b61      	ldr	r3, [pc, #388]	@ (80069bc <UART_SetConfig+0x2d4>)
 8006836:	fba3 2302 	umull	r2, r3, r3, r2
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	011c      	lsls	r4, r3, #4
 800683e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006842:	2200      	movs	r2, #0
 8006844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006848:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800684c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006850:	4642      	mov	r2, r8
 8006852:	464b      	mov	r3, r9
 8006854:	1891      	adds	r1, r2, r2
 8006856:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006858:	415b      	adcs	r3, r3
 800685a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800685c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006860:	4641      	mov	r1, r8
 8006862:	eb12 0a01 	adds.w	sl, r2, r1
 8006866:	4649      	mov	r1, r9
 8006868:	eb43 0b01 	adc.w	fp, r3, r1
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006878:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800687c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006880:	4692      	mov	sl, r2
 8006882:	469b      	mov	fp, r3
 8006884:	4643      	mov	r3, r8
 8006886:	eb1a 0303 	adds.w	r3, sl, r3
 800688a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800688e:	464b      	mov	r3, r9
 8006890:	eb4b 0303 	adc.w	r3, fp, r3
 8006894:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80068a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80068ac:	460b      	mov	r3, r1
 80068ae:	18db      	adds	r3, r3, r3
 80068b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80068b2:	4613      	mov	r3, r2
 80068b4:	eb42 0303 	adc.w	r3, r2, r3
 80068b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80068be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80068c2:	f7f9 fcfd 	bl	80002c0 <__aeabi_uldivmod>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4611      	mov	r1, r2
 80068cc:	4b3b      	ldr	r3, [pc, #236]	@ (80069bc <UART_SetConfig+0x2d4>)
 80068ce:	fba3 2301 	umull	r2, r3, r3, r1
 80068d2:	095b      	lsrs	r3, r3, #5
 80068d4:	2264      	movs	r2, #100	@ 0x64
 80068d6:	fb02 f303 	mul.w	r3, r2, r3
 80068da:	1acb      	subs	r3, r1, r3
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80068e2:	4b36      	ldr	r3, [pc, #216]	@ (80069bc <UART_SetConfig+0x2d4>)
 80068e4:	fba3 2302 	umull	r2, r3, r3, r2
 80068e8:	095b      	lsrs	r3, r3, #5
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80068f0:	441c      	add	r4, r3
 80068f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006900:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006904:	4642      	mov	r2, r8
 8006906:	464b      	mov	r3, r9
 8006908:	1891      	adds	r1, r2, r2
 800690a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800690c:	415b      	adcs	r3, r3
 800690e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006914:	4641      	mov	r1, r8
 8006916:	1851      	adds	r1, r2, r1
 8006918:	6339      	str	r1, [r7, #48]	@ 0x30
 800691a:	4649      	mov	r1, r9
 800691c:	414b      	adcs	r3, r1
 800691e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006920:	f04f 0200 	mov.w	r2, #0
 8006924:	f04f 0300 	mov.w	r3, #0
 8006928:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800692c:	4659      	mov	r1, fp
 800692e:	00cb      	lsls	r3, r1, #3
 8006930:	4651      	mov	r1, sl
 8006932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006936:	4651      	mov	r1, sl
 8006938:	00ca      	lsls	r2, r1, #3
 800693a:	4610      	mov	r0, r2
 800693c:	4619      	mov	r1, r3
 800693e:	4603      	mov	r3, r0
 8006940:	4642      	mov	r2, r8
 8006942:	189b      	adds	r3, r3, r2
 8006944:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006948:	464b      	mov	r3, r9
 800694a:	460a      	mov	r2, r1
 800694c:	eb42 0303 	adc.w	r3, r2, r3
 8006950:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006960:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006964:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006968:	460b      	mov	r3, r1
 800696a:	18db      	adds	r3, r3, r3
 800696c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800696e:	4613      	mov	r3, r2
 8006970:	eb42 0303 	adc.w	r3, r2, r3
 8006974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800697a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800697e:	f7f9 fc9f 	bl	80002c0 <__aeabi_uldivmod>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4b0d      	ldr	r3, [pc, #52]	@ (80069bc <UART_SetConfig+0x2d4>)
 8006988:	fba3 1302 	umull	r1, r3, r3, r2
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	2164      	movs	r1, #100	@ 0x64
 8006990:	fb01 f303 	mul.w	r3, r1, r3
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	3332      	adds	r3, #50	@ 0x32
 800699a:	4a08      	ldr	r2, [pc, #32]	@ (80069bc <UART_SetConfig+0x2d4>)
 800699c:	fba2 2303 	umull	r2, r3, r2, r3
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	f003 0207 	and.w	r2, r3, #7
 80069a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4422      	add	r2, r4
 80069ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069b0:	e106      	b.n	8006bc0 <UART_SetConfig+0x4d8>
 80069b2:	bf00      	nop
 80069b4:	40011000 	.word	0x40011000
 80069b8:	40011400 	.word	0x40011400
 80069bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069c4:	2200      	movs	r2, #0
 80069c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80069ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80069ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80069d2:	4642      	mov	r2, r8
 80069d4:	464b      	mov	r3, r9
 80069d6:	1891      	adds	r1, r2, r2
 80069d8:	6239      	str	r1, [r7, #32]
 80069da:	415b      	adcs	r3, r3
 80069dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80069de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069e2:	4641      	mov	r1, r8
 80069e4:	1854      	adds	r4, r2, r1
 80069e6:	4649      	mov	r1, r9
 80069e8:	eb43 0501 	adc.w	r5, r3, r1
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	00eb      	lsls	r3, r5, #3
 80069f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069fa:	00e2      	lsls	r2, r4, #3
 80069fc:	4614      	mov	r4, r2
 80069fe:	461d      	mov	r5, r3
 8006a00:	4643      	mov	r3, r8
 8006a02:	18e3      	adds	r3, r4, r3
 8006a04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a08:	464b      	mov	r3, r9
 8006a0a:	eb45 0303 	adc.w	r3, r5, r3
 8006a0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006a2e:	4629      	mov	r1, r5
 8006a30:	008b      	lsls	r3, r1, #2
 8006a32:	4621      	mov	r1, r4
 8006a34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a38:	4621      	mov	r1, r4
 8006a3a:	008a      	lsls	r2, r1, #2
 8006a3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006a40:	f7f9 fc3e 	bl	80002c0 <__aeabi_uldivmod>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4b60      	ldr	r3, [pc, #384]	@ (8006bcc <UART_SetConfig+0x4e4>)
 8006a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	011c      	lsls	r4, r3, #4
 8006a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006a60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006a64:	4642      	mov	r2, r8
 8006a66:	464b      	mov	r3, r9
 8006a68:	1891      	adds	r1, r2, r2
 8006a6a:	61b9      	str	r1, [r7, #24]
 8006a6c:	415b      	adcs	r3, r3
 8006a6e:	61fb      	str	r3, [r7, #28]
 8006a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a74:	4641      	mov	r1, r8
 8006a76:	1851      	adds	r1, r2, r1
 8006a78:	6139      	str	r1, [r7, #16]
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	414b      	adcs	r3, r1
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	f04f 0200 	mov.w	r2, #0
 8006a84:	f04f 0300 	mov.w	r3, #0
 8006a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a8c:	4659      	mov	r1, fp
 8006a8e:	00cb      	lsls	r3, r1, #3
 8006a90:	4651      	mov	r1, sl
 8006a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a96:	4651      	mov	r1, sl
 8006a98:	00ca      	lsls	r2, r1, #3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	189b      	adds	r3, r3, r2
 8006aa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006aa8:	464b      	mov	r3, r9
 8006aaa:	460a      	mov	r2, r1
 8006aac:	eb42 0303 	adc.w	r3, r2, r3
 8006ab0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006abe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006acc:	4649      	mov	r1, r9
 8006ace:	008b      	lsls	r3, r1, #2
 8006ad0:	4641      	mov	r1, r8
 8006ad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ad6:	4641      	mov	r1, r8
 8006ad8:	008a      	lsls	r2, r1, #2
 8006ada:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ade:	f7f9 fbef 	bl	80002c0 <__aeabi_uldivmod>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	4b38      	ldr	r3, [pc, #224]	@ (8006bcc <UART_SetConfig+0x4e4>)
 8006aea:	fba3 2301 	umull	r2, r3, r3, r1
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	2264      	movs	r2, #100	@ 0x64
 8006af2:	fb02 f303 	mul.w	r3, r2, r3
 8006af6:	1acb      	subs	r3, r1, r3
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	3332      	adds	r3, #50	@ 0x32
 8006afc:	4a33      	ldr	r2, [pc, #204]	@ (8006bcc <UART_SetConfig+0x4e4>)
 8006afe:	fba2 2303 	umull	r2, r3, r2, r3
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b08:	441c      	add	r4, r3
 8006b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b0e:	2200      	movs	r2, #0
 8006b10:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b12:	677a      	str	r2, [r7, #116]	@ 0x74
 8006b14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006b18:	4642      	mov	r2, r8
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	1891      	adds	r1, r2, r2
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	415b      	adcs	r3, r3
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b28:	4641      	mov	r1, r8
 8006b2a:	1851      	adds	r1, r2, r1
 8006b2c:	6039      	str	r1, [r7, #0]
 8006b2e:	4649      	mov	r1, r9
 8006b30:	414b      	adcs	r3, r1
 8006b32:	607b      	str	r3, [r7, #4]
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	f04f 0300 	mov.w	r3, #0
 8006b3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b40:	4659      	mov	r1, fp
 8006b42:	00cb      	lsls	r3, r1, #3
 8006b44:	4651      	mov	r1, sl
 8006b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b4a:	4651      	mov	r1, sl
 8006b4c:	00ca      	lsls	r2, r1, #3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	4619      	mov	r1, r3
 8006b52:	4603      	mov	r3, r0
 8006b54:	4642      	mov	r2, r8
 8006b56:	189b      	adds	r3, r3, r2
 8006b58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b5a:	464b      	mov	r3, r9
 8006b5c:	460a      	mov	r2, r1
 8006b5e:	eb42 0303 	adc.w	r3, r2, r3
 8006b62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	f04f 0300 	mov.w	r3, #0
 8006b78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	008b      	lsls	r3, r1, #2
 8006b80:	4641      	mov	r1, r8
 8006b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b86:	4641      	mov	r1, r8
 8006b88:	008a      	lsls	r2, r1, #2
 8006b8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b8e:	f7f9 fb97 	bl	80002c0 <__aeabi_uldivmod>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4b0d      	ldr	r3, [pc, #52]	@ (8006bcc <UART_SetConfig+0x4e4>)
 8006b98:	fba3 1302 	umull	r1, r3, r3, r2
 8006b9c:	095b      	lsrs	r3, r3, #5
 8006b9e:	2164      	movs	r1, #100	@ 0x64
 8006ba0:	fb01 f303 	mul.w	r3, r1, r3
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	3332      	adds	r3, #50	@ 0x32
 8006baa:	4a08      	ldr	r2, [pc, #32]	@ (8006bcc <UART_SetConfig+0x4e4>)
 8006bac:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	f003 020f 	and.w	r2, r3, #15
 8006bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4422      	add	r2, r4
 8006bbe:	609a      	str	r2, [r3, #8]
}
 8006bc0:	bf00      	nop
 8006bc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bcc:	51eb851f 	.word	0x51eb851f

08006bd0 <srand>:
 8006bd0:	b538      	push	{r3, r4, r5, lr}
 8006bd2:	4b10      	ldr	r3, [pc, #64]	@ (8006c14 <srand+0x44>)
 8006bd4:	681d      	ldr	r5, [r3, #0]
 8006bd6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006bd8:	4604      	mov	r4, r0
 8006bda:	b9b3      	cbnz	r3, 8006c0a <srand+0x3a>
 8006bdc:	2018      	movs	r0, #24
 8006bde:	f000 fab3 	bl	8007148 <malloc>
 8006be2:	4602      	mov	r2, r0
 8006be4:	6328      	str	r0, [r5, #48]	@ 0x30
 8006be6:	b920      	cbnz	r0, 8006bf2 <srand+0x22>
 8006be8:	4b0b      	ldr	r3, [pc, #44]	@ (8006c18 <srand+0x48>)
 8006bea:	480c      	ldr	r0, [pc, #48]	@ (8006c1c <srand+0x4c>)
 8006bec:	2146      	movs	r1, #70	@ 0x46
 8006bee:	f000 fa43 	bl	8007078 <__assert_func>
 8006bf2:	490b      	ldr	r1, [pc, #44]	@ (8006c20 <srand+0x50>)
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c24 <srand+0x54>)
 8006bf6:	e9c0 1300 	strd	r1, r3, [r0]
 8006bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006c28 <srand+0x58>)
 8006bfc:	6083      	str	r3, [r0, #8]
 8006bfe:	230b      	movs	r3, #11
 8006c00:	8183      	strh	r3, [r0, #12]
 8006c02:	2100      	movs	r1, #0
 8006c04:	2001      	movs	r0, #1
 8006c06:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006c0a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	611c      	str	r4, [r3, #16]
 8006c10:	615a      	str	r2, [r3, #20]
 8006c12:	bd38      	pop	{r3, r4, r5, pc}
 8006c14:	20000030 	.word	0x20000030
 8006c18:	0800aa8c 	.word	0x0800aa8c
 8006c1c:	0800aaa3 	.word	0x0800aaa3
 8006c20:	abcd330e 	.word	0xabcd330e
 8006c24:	e66d1234 	.word	0xe66d1234
 8006c28:	0005deec 	.word	0x0005deec

08006c2c <rand>:
 8006c2c:	4b16      	ldr	r3, [pc, #88]	@ (8006c88 <rand+0x5c>)
 8006c2e:	b510      	push	{r4, lr}
 8006c30:	681c      	ldr	r4, [r3, #0]
 8006c32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006c34:	b9b3      	cbnz	r3, 8006c64 <rand+0x38>
 8006c36:	2018      	movs	r0, #24
 8006c38:	f000 fa86 	bl	8007148 <malloc>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	6320      	str	r0, [r4, #48]	@ 0x30
 8006c40:	b920      	cbnz	r0, 8006c4c <rand+0x20>
 8006c42:	4b12      	ldr	r3, [pc, #72]	@ (8006c8c <rand+0x60>)
 8006c44:	4812      	ldr	r0, [pc, #72]	@ (8006c90 <rand+0x64>)
 8006c46:	2152      	movs	r1, #82	@ 0x52
 8006c48:	f000 fa16 	bl	8007078 <__assert_func>
 8006c4c:	4911      	ldr	r1, [pc, #68]	@ (8006c94 <rand+0x68>)
 8006c4e:	4b12      	ldr	r3, [pc, #72]	@ (8006c98 <rand+0x6c>)
 8006c50:	e9c0 1300 	strd	r1, r3, [r0]
 8006c54:	4b11      	ldr	r3, [pc, #68]	@ (8006c9c <rand+0x70>)
 8006c56:	6083      	str	r3, [r0, #8]
 8006c58:	230b      	movs	r3, #11
 8006c5a:	8183      	strh	r3, [r0, #12]
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	2001      	movs	r0, #1
 8006c60:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006c64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006c66:	480e      	ldr	r0, [pc, #56]	@ (8006ca0 <rand+0x74>)
 8006c68:	690b      	ldr	r3, [r1, #16]
 8006c6a:	694c      	ldr	r4, [r1, #20]
 8006c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8006ca4 <rand+0x78>)
 8006c6e:	4358      	muls	r0, r3
 8006c70:	fb02 0004 	mla	r0, r2, r4, r0
 8006c74:	fba3 3202 	umull	r3, r2, r3, r2
 8006c78:	3301      	adds	r3, #1
 8006c7a:	eb40 0002 	adc.w	r0, r0, r2
 8006c7e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006c82:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006c86:	bd10      	pop	{r4, pc}
 8006c88:	20000030 	.word	0x20000030
 8006c8c:	0800aa8c 	.word	0x0800aa8c
 8006c90:	0800aaa3 	.word	0x0800aaa3
 8006c94:	abcd330e 	.word	0xabcd330e
 8006c98:	e66d1234 	.word	0xe66d1234
 8006c9c:	0005deec 	.word	0x0005deec
 8006ca0:	5851f42d 	.word	0x5851f42d
 8006ca4:	4c957f2d 	.word	0x4c957f2d

08006ca8 <std>:
 8006ca8:	2300      	movs	r3, #0
 8006caa:	b510      	push	{r4, lr}
 8006cac:	4604      	mov	r4, r0
 8006cae:	e9c0 3300 	strd	r3, r3, [r0]
 8006cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cb6:	6083      	str	r3, [r0, #8]
 8006cb8:	8181      	strh	r1, [r0, #12]
 8006cba:	6643      	str	r3, [r0, #100]	@ 0x64
 8006cbc:	81c2      	strh	r2, [r0, #14]
 8006cbe:	6183      	str	r3, [r0, #24]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	2208      	movs	r2, #8
 8006cc4:	305c      	adds	r0, #92	@ 0x5c
 8006cc6:	f000 f948 	bl	8006f5a <memset>
 8006cca:	4b0d      	ldr	r3, [pc, #52]	@ (8006d00 <std+0x58>)
 8006ccc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006cce:	4b0d      	ldr	r3, [pc, #52]	@ (8006d04 <std+0x5c>)
 8006cd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d08 <std+0x60>)
 8006cd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d0c <std+0x64>)
 8006cd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006cda:	4b0d      	ldr	r3, [pc, #52]	@ (8006d10 <std+0x68>)
 8006cdc:	6224      	str	r4, [r4, #32]
 8006cde:	429c      	cmp	r4, r3
 8006ce0:	d006      	beq.n	8006cf0 <std+0x48>
 8006ce2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ce6:	4294      	cmp	r4, r2
 8006ce8:	d002      	beq.n	8006cf0 <std+0x48>
 8006cea:	33d0      	adds	r3, #208	@ 0xd0
 8006cec:	429c      	cmp	r4, r3
 8006cee:	d105      	bne.n	8006cfc <std+0x54>
 8006cf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cf8:	f000 b9ba 	b.w	8007070 <__retarget_lock_init_recursive>
 8006cfc:	bd10      	pop	{r4, pc}
 8006cfe:	bf00      	nop
 8006d00:	08006ed5 	.word	0x08006ed5
 8006d04:	08006ef7 	.word	0x08006ef7
 8006d08:	08006f2f 	.word	0x08006f2f
 8006d0c:	08006f53 	.word	0x08006f53
 8006d10:	20000324 	.word	0x20000324

08006d14 <stdio_exit_handler>:
 8006d14:	4a02      	ldr	r2, [pc, #8]	@ (8006d20 <stdio_exit_handler+0xc>)
 8006d16:	4903      	ldr	r1, [pc, #12]	@ (8006d24 <stdio_exit_handler+0x10>)
 8006d18:	4803      	ldr	r0, [pc, #12]	@ (8006d28 <stdio_exit_handler+0x14>)
 8006d1a:	f000 b869 	b.w	8006df0 <_fwalk_sglue>
 8006d1e:	bf00      	nop
 8006d20:	20000024 	.word	0x20000024
 8006d24:	08007989 	.word	0x08007989
 8006d28:	20000034 	.word	0x20000034

08006d2c <cleanup_stdio>:
 8006d2c:	6841      	ldr	r1, [r0, #4]
 8006d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d60 <cleanup_stdio+0x34>)
 8006d30:	4299      	cmp	r1, r3
 8006d32:	b510      	push	{r4, lr}
 8006d34:	4604      	mov	r4, r0
 8006d36:	d001      	beq.n	8006d3c <cleanup_stdio+0x10>
 8006d38:	f000 fe26 	bl	8007988 <_fflush_r>
 8006d3c:	68a1      	ldr	r1, [r4, #8]
 8006d3e:	4b09      	ldr	r3, [pc, #36]	@ (8006d64 <cleanup_stdio+0x38>)
 8006d40:	4299      	cmp	r1, r3
 8006d42:	d002      	beq.n	8006d4a <cleanup_stdio+0x1e>
 8006d44:	4620      	mov	r0, r4
 8006d46:	f000 fe1f 	bl	8007988 <_fflush_r>
 8006d4a:	68e1      	ldr	r1, [r4, #12]
 8006d4c:	4b06      	ldr	r3, [pc, #24]	@ (8006d68 <cleanup_stdio+0x3c>)
 8006d4e:	4299      	cmp	r1, r3
 8006d50:	d004      	beq.n	8006d5c <cleanup_stdio+0x30>
 8006d52:	4620      	mov	r0, r4
 8006d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d58:	f000 be16 	b.w	8007988 <_fflush_r>
 8006d5c:	bd10      	pop	{r4, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000324 	.word	0x20000324
 8006d64:	2000038c 	.word	0x2000038c
 8006d68:	200003f4 	.word	0x200003f4

08006d6c <global_stdio_init.part.0>:
 8006d6c:	b510      	push	{r4, lr}
 8006d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d9c <global_stdio_init.part.0+0x30>)
 8006d70:	4c0b      	ldr	r4, [pc, #44]	@ (8006da0 <global_stdio_init.part.0+0x34>)
 8006d72:	4a0c      	ldr	r2, [pc, #48]	@ (8006da4 <global_stdio_init.part.0+0x38>)
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	4620      	mov	r0, r4
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2104      	movs	r1, #4
 8006d7c:	f7ff ff94 	bl	8006ca8 <std>
 8006d80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d84:	2201      	movs	r2, #1
 8006d86:	2109      	movs	r1, #9
 8006d88:	f7ff ff8e 	bl	8006ca8 <std>
 8006d8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d90:	2202      	movs	r2, #2
 8006d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d96:	2112      	movs	r1, #18
 8006d98:	f7ff bf86 	b.w	8006ca8 <std>
 8006d9c:	2000045c 	.word	0x2000045c
 8006da0:	20000324 	.word	0x20000324
 8006da4:	08006d15 	.word	0x08006d15

08006da8 <__sfp_lock_acquire>:
 8006da8:	4801      	ldr	r0, [pc, #4]	@ (8006db0 <__sfp_lock_acquire+0x8>)
 8006daa:	f000 b962 	b.w	8007072 <__retarget_lock_acquire_recursive>
 8006dae:	bf00      	nop
 8006db0:	20000465 	.word	0x20000465

08006db4 <__sfp_lock_release>:
 8006db4:	4801      	ldr	r0, [pc, #4]	@ (8006dbc <__sfp_lock_release+0x8>)
 8006db6:	f000 b95d 	b.w	8007074 <__retarget_lock_release_recursive>
 8006dba:	bf00      	nop
 8006dbc:	20000465 	.word	0x20000465

08006dc0 <__sinit>:
 8006dc0:	b510      	push	{r4, lr}
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	f7ff fff0 	bl	8006da8 <__sfp_lock_acquire>
 8006dc8:	6a23      	ldr	r3, [r4, #32]
 8006dca:	b11b      	cbz	r3, 8006dd4 <__sinit+0x14>
 8006dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd0:	f7ff bff0 	b.w	8006db4 <__sfp_lock_release>
 8006dd4:	4b04      	ldr	r3, [pc, #16]	@ (8006de8 <__sinit+0x28>)
 8006dd6:	6223      	str	r3, [r4, #32]
 8006dd8:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <__sinit+0x2c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1f5      	bne.n	8006dcc <__sinit+0xc>
 8006de0:	f7ff ffc4 	bl	8006d6c <global_stdio_init.part.0>
 8006de4:	e7f2      	b.n	8006dcc <__sinit+0xc>
 8006de6:	bf00      	nop
 8006de8:	08006d2d 	.word	0x08006d2d
 8006dec:	2000045c 	.word	0x2000045c

08006df0 <_fwalk_sglue>:
 8006df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006df4:	4607      	mov	r7, r0
 8006df6:	4688      	mov	r8, r1
 8006df8:	4614      	mov	r4, r2
 8006dfa:	2600      	movs	r6, #0
 8006dfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e00:	f1b9 0901 	subs.w	r9, r9, #1
 8006e04:	d505      	bpl.n	8006e12 <_fwalk_sglue+0x22>
 8006e06:	6824      	ldr	r4, [r4, #0]
 8006e08:	2c00      	cmp	r4, #0
 8006e0a:	d1f7      	bne.n	8006dfc <_fwalk_sglue+0xc>
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e12:	89ab      	ldrh	r3, [r5, #12]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d907      	bls.n	8006e28 <_fwalk_sglue+0x38>
 8006e18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	d003      	beq.n	8006e28 <_fwalk_sglue+0x38>
 8006e20:	4629      	mov	r1, r5
 8006e22:	4638      	mov	r0, r7
 8006e24:	47c0      	blx	r8
 8006e26:	4306      	orrs	r6, r0
 8006e28:	3568      	adds	r5, #104	@ 0x68
 8006e2a:	e7e9      	b.n	8006e00 <_fwalk_sglue+0x10>

08006e2c <sniprintf>:
 8006e2c:	b40c      	push	{r2, r3}
 8006e2e:	b530      	push	{r4, r5, lr}
 8006e30:	4b17      	ldr	r3, [pc, #92]	@ (8006e90 <sniprintf+0x64>)
 8006e32:	1e0c      	subs	r4, r1, #0
 8006e34:	681d      	ldr	r5, [r3, #0]
 8006e36:	b09d      	sub	sp, #116	@ 0x74
 8006e38:	da08      	bge.n	8006e4c <sniprintf+0x20>
 8006e3a:	238b      	movs	r3, #139	@ 0x8b
 8006e3c:	602b      	str	r3, [r5, #0]
 8006e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e42:	b01d      	add	sp, #116	@ 0x74
 8006e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e48:	b002      	add	sp, #8
 8006e4a:	4770      	bx	lr
 8006e4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006e50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e54:	bf14      	ite	ne
 8006e56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006e5a:	4623      	moveq	r3, r4
 8006e5c:	9304      	str	r3, [sp, #16]
 8006e5e:	9307      	str	r3, [sp, #28]
 8006e60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e64:	9002      	str	r0, [sp, #8]
 8006e66:	9006      	str	r0, [sp, #24]
 8006e68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006e6e:	ab21      	add	r3, sp, #132	@ 0x84
 8006e70:	a902      	add	r1, sp, #8
 8006e72:	4628      	mov	r0, r5
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	f000 fa79 	bl	800736c <_svfiprintf_r>
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	bfbc      	itt	lt
 8006e7e:	238b      	movlt	r3, #139	@ 0x8b
 8006e80:	602b      	strlt	r3, [r5, #0]
 8006e82:	2c00      	cmp	r4, #0
 8006e84:	d0dd      	beq.n	8006e42 <sniprintf+0x16>
 8006e86:	9b02      	ldr	r3, [sp, #8]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	701a      	strb	r2, [r3, #0]
 8006e8c:	e7d9      	b.n	8006e42 <sniprintf+0x16>
 8006e8e:	bf00      	nop
 8006e90:	20000030 	.word	0x20000030

08006e94 <siprintf>:
 8006e94:	b40e      	push	{r1, r2, r3}
 8006e96:	b500      	push	{lr}
 8006e98:	b09c      	sub	sp, #112	@ 0x70
 8006e9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e9c:	9002      	str	r0, [sp, #8]
 8006e9e:	9006      	str	r0, [sp, #24]
 8006ea0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ea4:	4809      	ldr	r0, [pc, #36]	@ (8006ecc <siprintf+0x38>)
 8006ea6:	9107      	str	r1, [sp, #28]
 8006ea8:	9104      	str	r1, [sp, #16]
 8006eaa:	4909      	ldr	r1, [pc, #36]	@ (8006ed0 <siprintf+0x3c>)
 8006eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb0:	9105      	str	r1, [sp, #20]
 8006eb2:	6800      	ldr	r0, [r0, #0]
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	a902      	add	r1, sp, #8
 8006eb8:	f000 fa58 	bl	800736c <_svfiprintf_r>
 8006ebc:	9b02      	ldr	r3, [sp, #8]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	b01c      	add	sp, #112	@ 0x70
 8006ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ec8:	b003      	add	sp, #12
 8006eca:	4770      	bx	lr
 8006ecc:	20000030 	.word	0x20000030
 8006ed0:	ffff0208 	.word	0xffff0208

08006ed4 <__sread>:
 8006ed4:	b510      	push	{r4, lr}
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006edc:	f000 f87a 	bl	8006fd4 <_read_r>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	bfab      	itete	ge
 8006ee4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ee6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ee8:	181b      	addge	r3, r3, r0
 8006eea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006eee:	bfac      	ite	ge
 8006ef0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ef2:	81a3      	strhlt	r3, [r4, #12]
 8006ef4:	bd10      	pop	{r4, pc}

08006ef6 <__swrite>:
 8006ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006efa:	461f      	mov	r7, r3
 8006efc:	898b      	ldrh	r3, [r1, #12]
 8006efe:	05db      	lsls	r3, r3, #23
 8006f00:	4605      	mov	r5, r0
 8006f02:	460c      	mov	r4, r1
 8006f04:	4616      	mov	r6, r2
 8006f06:	d505      	bpl.n	8006f14 <__swrite+0x1e>
 8006f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f000 f84e 	bl	8006fb0 <_lseek_r>
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f1e:	81a3      	strh	r3, [r4, #12]
 8006f20:	4632      	mov	r2, r6
 8006f22:	463b      	mov	r3, r7
 8006f24:	4628      	mov	r0, r5
 8006f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2a:	f000 b865 	b.w	8006ff8 <_write_r>

08006f2e <__sseek>:
 8006f2e:	b510      	push	{r4, lr}
 8006f30:	460c      	mov	r4, r1
 8006f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f36:	f000 f83b 	bl	8006fb0 <_lseek_r>
 8006f3a:	1c43      	adds	r3, r0, #1
 8006f3c:	89a3      	ldrh	r3, [r4, #12]
 8006f3e:	bf15      	itete	ne
 8006f40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f4a:	81a3      	strheq	r3, [r4, #12]
 8006f4c:	bf18      	it	ne
 8006f4e:	81a3      	strhne	r3, [r4, #12]
 8006f50:	bd10      	pop	{r4, pc}

08006f52 <__sclose>:
 8006f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f56:	f000 b81b 	b.w	8006f90 <_close_r>

08006f5a <memset>:
 8006f5a:	4402      	add	r2, r0
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d100      	bne.n	8006f64 <memset+0xa>
 8006f62:	4770      	bx	lr
 8006f64:	f803 1b01 	strb.w	r1, [r3], #1
 8006f68:	e7f9      	b.n	8006f5e <memset+0x4>

08006f6a <strncpy>:
 8006f6a:	b510      	push	{r4, lr}
 8006f6c:	3901      	subs	r1, #1
 8006f6e:	4603      	mov	r3, r0
 8006f70:	b132      	cbz	r2, 8006f80 <strncpy+0x16>
 8006f72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006f76:	f803 4b01 	strb.w	r4, [r3], #1
 8006f7a:	3a01      	subs	r2, #1
 8006f7c:	2c00      	cmp	r4, #0
 8006f7e:	d1f7      	bne.n	8006f70 <strncpy+0x6>
 8006f80:	441a      	add	r2, r3
 8006f82:	2100      	movs	r1, #0
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d100      	bne.n	8006f8a <strncpy+0x20>
 8006f88:	bd10      	pop	{r4, pc}
 8006f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f8e:	e7f9      	b.n	8006f84 <strncpy+0x1a>

08006f90 <_close_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4d06      	ldr	r5, [pc, #24]	@ (8006fac <_close_r+0x1c>)
 8006f94:	2300      	movs	r3, #0
 8006f96:	4604      	mov	r4, r0
 8006f98:	4608      	mov	r0, r1
 8006f9a:	602b      	str	r3, [r5, #0]
 8006f9c:	f7fb f9b2 	bl	8002304 <_close>
 8006fa0:	1c43      	adds	r3, r0, #1
 8006fa2:	d102      	bne.n	8006faa <_close_r+0x1a>
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	b103      	cbz	r3, 8006faa <_close_r+0x1a>
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	bd38      	pop	{r3, r4, r5, pc}
 8006fac:	20000460 	.word	0x20000460

08006fb0 <_lseek_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4d07      	ldr	r5, [pc, #28]	@ (8006fd0 <_lseek_r+0x20>)
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	4608      	mov	r0, r1
 8006fb8:	4611      	mov	r1, r2
 8006fba:	2200      	movs	r2, #0
 8006fbc:	602a      	str	r2, [r5, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f7fb f9c7 	bl	8002352 <_lseek>
 8006fc4:	1c43      	adds	r3, r0, #1
 8006fc6:	d102      	bne.n	8006fce <_lseek_r+0x1e>
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	b103      	cbz	r3, 8006fce <_lseek_r+0x1e>
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	bd38      	pop	{r3, r4, r5, pc}
 8006fd0:	20000460 	.word	0x20000460

08006fd4 <_read_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	4d07      	ldr	r5, [pc, #28]	@ (8006ff4 <_read_r+0x20>)
 8006fd8:	4604      	mov	r4, r0
 8006fda:	4608      	mov	r0, r1
 8006fdc:	4611      	mov	r1, r2
 8006fde:	2200      	movs	r2, #0
 8006fe0:	602a      	str	r2, [r5, #0]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f7fb f971 	bl	80022ca <_read>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_read_r+0x1e>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_read_r+0x1e>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	20000460 	.word	0x20000460

08006ff8 <_write_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4d07      	ldr	r5, [pc, #28]	@ (8007018 <_write_r+0x20>)
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	4608      	mov	r0, r1
 8007000:	4611      	mov	r1, r2
 8007002:	2200      	movs	r2, #0
 8007004:	602a      	str	r2, [r5, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	f7fb f804 	bl	8002014 <_write>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_write_r+0x1e>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_write_r+0x1e>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	20000460 	.word	0x20000460

0800701c <__errno>:
 800701c:	4b01      	ldr	r3, [pc, #4]	@ (8007024 <__errno+0x8>)
 800701e:	6818      	ldr	r0, [r3, #0]
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	20000030 	.word	0x20000030

08007028 <__libc_init_array>:
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	4d0d      	ldr	r5, [pc, #52]	@ (8007060 <__libc_init_array+0x38>)
 800702c:	4c0d      	ldr	r4, [pc, #52]	@ (8007064 <__libc_init_array+0x3c>)
 800702e:	1b64      	subs	r4, r4, r5
 8007030:	10a4      	asrs	r4, r4, #2
 8007032:	2600      	movs	r6, #0
 8007034:	42a6      	cmp	r6, r4
 8007036:	d109      	bne.n	800704c <__libc_init_array+0x24>
 8007038:	4d0b      	ldr	r5, [pc, #44]	@ (8007068 <__libc_init_array+0x40>)
 800703a:	4c0c      	ldr	r4, [pc, #48]	@ (800706c <__libc_init_array+0x44>)
 800703c:	f000 fff0 	bl	8008020 <_init>
 8007040:	1b64      	subs	r4, r4, r5
 8007042:	10a4      	asrs	r4, r4, #2
 8007044:	2600      	movs	r6, #0
 8007046:	42a6      	cmp	r6, r4
 8007048:	d105      	bne.n	8007056 <__libc_init_array+0x2e>
 800704a:	bd70      	pop	{r4, r5, r6, pc}
 800704c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007050:	4798      	blx	r3
 8007052:	3601      	adds	r6, #1
 8007054:	e7ee      	b.n	8007034 <__libc_init_array+0xc>
 8007056:	f855 3b04 	ldr.w	r3, [r5], #4
 800705a:	4798      	blx	r3
 800705c:	3601      	adds	r6, #1
 800705e:	e7f2      	b.n	8007046 <__libc_init_array+0x1e>
 8007060:	0800ab74 	.word	0x0800ab74
 8007064:	0800ab74 	.word	0x0800ab74
 8007068:	0800ab74 	.word	0x0800ab74
 800706c:	0800ab78 	.word	0x0800ab78

08007070 <__retarget_lock_init_recursive>:
 8007070:	4770      	bx	lr

08007072 <__retarget_lock_acquire_recursive>:
 8007072:	4770      	bx	lr

08007074 <__retarget_lock_release_recursive>:
 8007074:	4770      	bx	lr
	...

08007078 <__assert_func>:
 8007078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800707a:	4614      	mov	r4, r2
 800707c:	461a      	mov	r2, r3
 800707e:	4b09      	ldr	r3, [pc, #36]	@ (80070a4 <__assert_func+0x2c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4605      	mov	r5, r0
 8007084:	68d8      	ldr	r0, [r3, #12]
 8007086:	b954      	cbnz	r4, 800709e <__assert_func+0x26>
 8007088:	4b07      	ldr	r3, [pc, #28]	@ (80070a8 <__assert_func+0x30>)
 800708a:	461c      	mov	r4, r3
 800708c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007090:	9100      	str	r1, [sp, #0]
 8007092:	462b      	mov	r3, r5
 8007094:	4905      	ldr	r1, [pc, #20]	@ (80070ac <__assert_func+0x34>)
 8007096:	f000 fc9f 	bl	80079d8 <fiprintf>
 800709a:	f000 fce7 	bl	8007a6c <abort>
 800709e:	4b04      	ldr	r3, [pc, #16]	@ (80070b0 <__assert_func+0x38>)
 80070a0:	e7f4      	b.n	800708c <__assert_func+0x14>
 80070a2:	bf00      	nop
 80070a4:	20000030 	.word	0x20000030
 80070a8:	0800ab36 	.word	0x0800ab36
 80070ac:	0800ab08 	.word	0x0800ab08
 80070b0:	0800aafb 	.word	0x0800aafb

080070b4 <_free_r>:
 80070b4:	b538      	push	{r3, r4, r5, lr}
 80070b6:	4605      	mov	r5, r0
 80070b8:	2900      	cmp	r1, #0
 80070ba:	d041      	beq.n	8007140 <_free_r+0x8c>
 80070bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070c0:	1f0c      	subs	r4, r1, #4
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	bfb8      	it	lt
 80070c6:	18e4      	addlt	r4, r4, r3
 80070c8:	f000 f8e8 	bl	800729c <__malloc_lock>
 80070cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007144 <_free_r+0x90>)
 80070ce:	6813      	ldr	r3, [r2, #0]
 80070d0:	b933      	cbnz	r3, 80070e0 <_free_r+0x2c>
 80070d2:	6063      	str	r3, [r4, #4]
 80070d4:	6014      	str	r4, [r2, #0]
 80070d6:	4628      	mov	r0, r5
 80070d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070dc:	f000 b8e4 	b.w	80072a8 <__malloc_unlock>
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	d908      	bls.n	80070f6 <_free_r+0x42>
 80070e4:	6820      	ldr	r0, [r4, #0]
 80070e6:	1821      	adds	r1, r4, r0
 80070e8:	428b      	cmp	r3, r1
 80070ea:	bf01      	itttt	eq
 80070ec:	6819      	ldreq	r1, [r3, #0]
 80070ee:	685b      	ldreq	r3, [r3, #4]
 80070f0:	1809      	addeq	r1, r1, r0
 80070f2:	6021      	streq	r1, [r4, #0]
 80070f4:	e7ed      	b.n	80070d2 <_free_r+0x1e>
 80070f6:	461a      	mov	r2, r3
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	b10b      	cbz	r3, 8007100 <_free_r+0x4c>
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	d9fa      	bls.n	80070f6 <_free_r+0x42>
 8007100:	6811      	ldr	r1, [r2, #0]
 8007102:	1850      	adds	r0, r2, r1
 8007104:	42a0      	cmp	r0, r4
 8007106:	d10b      	bne.n	8007120 <_free_r+0x6c>
 8007108:	6820      	ldr	r0, [r4, #0]
 800710a:	4401      	add	r1, r0
 800710c:	1850      	adds	r0, r2, r1
 800710e:	4283      	cmp	r3, r0
 8007110:	6011      	str	r1, [r2, #0]
 8007112:	d1e0      	bne.n	80070d6 <_free_r+0x22>
 8007114:	6818      	ldr	r0, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	6053      	str	r3, [r2, #4]
 800711a:	4408      	add	r0, r1
 800711c:	6010      	str	r0, [r2, #0]
 800711e:	e7da      	b.n	80070d6 <_free_r+0x22>
 8007120:	d902      	bls.n	8007128 <_free_r+0x74>
 8007122:	230c      	movs	r3, #12
 8007124:	602b      	str	r3, [r5, #0]
 8007126:	e7d6      	b.n	80070d6 <_free_r+0x22>
 8007128:	6820      	ldr	r0, [r4, #0]
 800712a:	1821      	adds	r1, r4, r0
 800712c:	428b      	cmp	r3, r1
 800712e:	bf04      	itt	eq
 8007130:	6819      	ldreq	r1, [r3, #0]
 8007132:	685b      	ldreq	r3, [r3, #4]
 8007134:	6063      	str	r3, [r4, #4]
 8007136:	bf04      	itt	eq
 8007138:	1809      	addeq	r1, r1, r0
 800713a:	6021      	streq	r1, [r4, #0]
 800713c:	6054      	str	r4, [r2, #4]
 800713e:	e7ca      	b.n	80070d6 <_free_r+0x22>
 8007140:	bd38      	pop	{r3, r4, r5, pc}
 8007142:	bf00      	nop
 8007144:	2000046c 	.word	0x2000046c

08007148 <malloc>:
 8007148:	4b02      	ldr	r3, [pc, #8]	@ (8007154 <malloc+0xc>)
 800714a:	4601      	mov	r1, r0
 800714c:	6818      	ldr	r0, [r3, #0]
 800714e:	f000 b825 	b.w	800719c <_malloc_r>
 8007152:	bf00      	nop
 8007154:	20000030 	.word	0x20000030

08007158 <sbrk_aligned>:
 8007158:	b570      	push	{r4, r5, r6, lr}
 800715a:	4e0f      	ldr	r6, [pc, #60]	@ (8007198 <sbrk_aligned+0x40>)
 800715c:	460c      	mov	r4, r1
 800715e:	6831      	ldr	r1, [r6, #0]
 8007160:	4605      	mov	r5, r0
 8007162:	b911      	cbnz	r1, 800716a <sbrk_aligned+0x12>
 8007164:	f000 fc64 	bl	8007a30 <_sbrk_r>
 8007168:	6030      	str	r0, [r6, #0]
 800716a:	4621      	mov	r1, r4
 800716c:	4628      	mov	r0, r5
 800716e:	f000 fc5f 	bl	8007a30 <_sbrk_r>
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	d103      	bne.n	800717e <sbrk_aligned+0x26>
 8007176:	f04f 34ff 	mov.w	r4, #4294967295
 800717a:	4620      	mov	r0, r4
 800717c:	bd70      	pop	{r4, r5, r6, pc}
 800717e:	1cc4      	adds	r4, r0, #3
 8007180:	f024 0403 	bic.w	r4, r4, #3
 8007184:	42a0      	cmp	r0, r4
 8007186:	d0f8      	beq.n	800717a <sbrk_aligned+0x22>
 8007188:	1a21      	subs	r1, r4, r0
 800718a:	4628      	mov	r0, r5
 800718c:	f000 fc50 	bl	8007a30 <_sbrk_r>
 8007190:	3001      	adds	r0, #1
 8007192:	d1f2      	bne.n	800717a <sbrk_aligned+0x22>
 8007194:	e7ef      	b.n	8007176 <sbrk_aligned+0x1e>
 8007196:	bf00      	nop
 8007198:	20000468 	.word	0x20000468

0800719c <_malloc_r>:
 800719c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a0:	1ccd      	adds	r5, r1, #3
 80071a2:	f025 0503 	bic.w	r5, r5, #3
 80071a6:	3508      	adds	r5, #8
 80071a8:	2d0c      	cmp	r5, #12
 80071aa:	bf38      	it	cc
 80071ac:	250c      	movcc	r5, #12
 80071ae:	2d00      	cmp	r5, #0
 80071b0:	4606      	mov	r6, r0
 80071b2:	db01      	blt.n	80071b8 <_malloc_r+0x1c>
 80071b4:	42a9      	cmp	r1, r5
 80071b6:	d904      	bls.n	80071c2 <_malloc_r+0x26>
 80071b8:	230c      	movs	r3, #12
 80071ba:	6033      	str	r3, [r6, #0]
 80071bc:	2000      	movs	r0, #0
 80071be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007298 <_malloc_r+0xfc>
 80071c6:	f000 f869 	bl	800729c <__malloc_lock>
 80071ca:	f8d8 3000 	ldr.w	r3, [r8]
 80071ce:	461c      	mov	r4, r3
 80071d0:	bb44      	cbnz	r4, 8007224 <_malloc_r+0x88>
 80071d2:	4629      	mov	r1, r5
 80071d4:	4630      	mov	r0, r6
 80071d6:	f7ff ffbf 	bl	8007158 <sbrk_aligned>
 80071da:	1c43      	adds	r3, r0, #1
 80071dc:	4604      	mov	r4, r0
 80071de:	d158      	bne.n	8007292 <_malloc_r+0xf6>
 80071e0:	f8d8 4000 	ldr.w	r4, [r8]
 80071e4:	4627      	mov	r7, r4
 80071e6:	2f00      	cmp	r7, #0
 80071e8:	d143      	bne.n	8007272 <_malloc_r+0xd6>
 80071ea:	2c00      	cmp	r4, #0
 80071ec:	d04b      	beq.n	8007286 <_malloc_r+0xea>
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	4639      	mov	r1, r7
 80071f2:	4630      	mov	r0, r6
 80071f4:	eb04 0903 	add.w	r9, r4, r3
 80071f8:	f000 fc1a 	bl	8007a30 <_sbrk_r>
 80071fc:	4581      	cmp	r9, r0
 80071fe:	d142      	bne.n	8007286 <_malloc_r+0xea>
 8007200:	6821      	ldr	r1, [r4, #0]
 8007202:	1a6d      	subs	r5, r5, r1
 8007204:	4629      	mov	r1, r5
 8007206:	4630      	mov	r0, r6
 8007208:	f7ff ffa6 	bl	8007158 <sbrk_aligned>
 800720c:	3001      	adds	r0, #1
 800720e:	d03a      	beq.n	8007286 <_malloc_r+0xea>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	442b      	add	r3, r5
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	f8d8 3000 	ldr.w	r3, [r8]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	bb62      	cbnz	r2, 8007278 <_malloc_r+0xdc>
 800721e:	f8c8 7000 	str.w	r7, [r8]
 8007222:	e00f      	b.n	8007244 <_malloc_r+0xa8>
 8007224:	6822      	ldr	r2, [r4, #0]
 8007226:	1b52      	subs	r2, r2, r5
 8007228:	d420      	bmi.n	800726c <_malloc_r+0xd0>
 800722a:	2a0b      	cmp	r2, #11
 800722c:	d917      	bls.n	800725e <_malloc_r+0xc2>
 800722e:	1961      	adds	r1, r4, r5
 8007230:	42a3      	cmp	r3, r4
 8007232:	6025      	str	r5, [r4, #0]
 8007234:	bf18      	it	ne
 8007236:	6059      	strne	r1, [r3, #4]
 8007238:	6863      	ldr	r3, [r4, #4]
 800723a:	bf08      	it	eq
 800723c:	f8c8 1000 	streq.w	r1, [r8]
 8007240:	5162      	str	r2, [r4, r5]
 8007242:	604b      	str	r3, [r1, #4]
 8007244:	4630      	mov	r0, r6
 8007246:	f000 f82f 	bl	80072a8 <__malloc_unlock>
 800724a:	f104 000b 	add.w	r0, r4, #11
 800724e:	1d23      	adds	r3, r4, #4
 8007250:	f020 0007 	bic.w	r0, r0, #7
 8007254:	1ac2      	subs	r2, r0, r3
 8007256:	bf1c      	itt	ne
 8007258:	1a1b      	subne	r3, r3, r0
 800725a:	50a3      	strne	r3, [r4, r2]
 800725c:	e7af      	b.n	80071be <_malloc_r+0x22>
 800725e:	6862      	ldr	r2, [r4, #4]
 8007260:	42a3      	cmp	r3, r4
 8007262:	bf0c      	ite	eq
 8007264:	f8c8 2000 	streq.w	r2, [r8]
 8007268:	605a      	strne	r2, [r3, #4]
 800726a:	e7eb      	b.n	8007244 <_malloc_r+0xa8>
 800726c:	4623      	mov	r3, r4
 800726e:	6864      	ldr	r4, [r4, #4]
 8007270:	e7ae      	b.n	80071d0 <_malloc_r+0x34>
 8007272:	463c      	mov	r4, r7
 8007274:	687f      	ldr	r7, [r7, #4]
 8007276:	e7b6      	b.n	80071e6 <_malloc_r+0x4a>
 8007278:	461a      	mov	r2, r3
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	42a3      	cmp	r3, r4
 800727e:	d1fb      	bne.n	8007278 <_malloc_r+0xdc>
 8007280:	2300      	movs	r3, #0
 8007282:	6053      	str	r3, [r2, #4]
 8007284:	e7de      	b.n	8007244 <_malloc_r+0xa8>
 8007286:	230c      	movs	r3, #12
 8007288:	6033      	str	r3, [r6, #0]
 800728a:	4630      	mov	r0, r6
 800728c:	f000 f80c 	bl	80072a8 <__malloc_unlock>
 8007290:	e794      	b.n	80071bc <_malloc_r+0x20>
 8007292:	6005      	str	r5, [r0, #0]
 8007294:	e7d6      	b.n	8007244 <_malloc_r+0xa8>
 8007296:	bf00      	nop
 8007298:	2000046c 	.word	0x2000046c

0800729c <__malloc_lock>:
 800729c:	4801      	ldr	r0, [pc, #4]	@ (80072a4 <__malloc_lock+0x8>)
 800729e:	f7ff bee8 	b.w	8007072 <__retarget_lock_acquire_recursive>
 80072a2:	bf00      	nop
 80072a4:	20000464 	.word	0x20000464

080072a8 <__malloc_unlock>:
 80072a8:	4801      	ldr	r0, [pc, #4]	@ (80072b0 <__malloc_unlock+0x8>)
 80072aa:	f7ff bee3 	b.w	8007074 <__retarget_lock_release_recursive>
 80072ae:	bf00      	nop
 80072b0:	20000464 	.word	0x20000464

080072b4 <__ssputs_r>:
 80072b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b8:	688e      	ldr	r6, [r1, #8]
 80072ba:	461f      	mov	r7, r3
 80072bc:	42be      	cmp	r6, r7
 80072be:	680b      	ldr	r3, [r1, #0]
 80072c0:	4682      	mov	sl, r0
 80072c2:	460c      	mov	r4, r1
 80072c4:	4690      	mov	r8, r2
 80072c6:	d82d      	bhi.n	8007324 <__ssputs_r+0x70>
 80072c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80072d0:	d026      	beq.n	8007320 <__ssputs_r+0x6c>
 80072d2:	6965      	ldr	r5, [r4, #20]
 80072d4:	6909      	ldr	r1, [r1, #16]
 80072d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072da:	eba3 0901 	sub.w	r9, r3, r1
 80072de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072e2:	1c7b      	adds	r3, r7, #1
 80072e4:	444b      	add	r3, r9
 80072e6:	106d      	asrs	r5, r5, #1
 80072e8:	429d      	cmp	r5, r3
 80072ea:	bf38      	it	cc
 80072ec:	461d      	movcc	r5, r3
 80072ee:	0553      	lsls	r3, r2, #21
 80072f0:	d527      	bpl.n	8007342 <__ssputs_r+0x8e>
 80072f2:	4629      	mov	r1, r5
 80072f4:	f7ff ff52 	bl	800719c <_malloc_r>
 80072f8:	4606      	mov	r6, r0
 80072fa:	b360      	cbz	r0, 8007356 <__ssputs_r+0xa2>
 80072fc:	6921      	ldr	r1, [r4, #16]
 80072fe:	464a      	mov	r2, r9
 8007300:	f000 fba6 	bl	8007a50 <memcpy>
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800730a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800730e:	81a3      	strh	r3, [r4, #12]
 8007310:	6126      	str	r6, [r4, #16]
 8007312:	6165      	str	r5, [r4, #20]
 8007314:	444e      	add	r6, r9
 8007316:	eba5 0509 	sub.w	r5, r5, r9
 800731a:	6026      	str	r6, [r4, #0]
 800731c:	60a5      	str	r5, [r4, #8]
 800731e:	463e      	mov	r6, r7
 8007320:	42be      	cmp	r6, r7
 8007322:	d900      	bls.n	8007326 <__ssputs_r+0x72>
 8007324:	463e      	mov	r6, r7
 8007326:	6820      	ldr	r0, [r4, #0]
 8007328:	4632      	mov	r2, r6
 800732a:	4641      	mov	r1, r8
 800732c:	f000 fb66 	bl	80079fc <memmove>
 8007330:	68a3      	ldr	r3, [r4, #8]
 8007332:	1b9b      	subs	r3, r3, r6
 8007334:	60a3      	str	r3, [r4, #8]
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	4433      	add	r3, r6
 800733a:	6023      	str	r3, [r4, #0]
 800733c:	2000      	movs	r0, #0
 800733e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007342:	462a      	mov	r2, r5
 8007344:	f000 fb99 	bl	8007a7a <_realloc_r>
 8007348:	4606      	mov	r6, r0
 800734a:	2800      	cmp	r0, #0
 800734c:	d1e0      	bne.n	8007310 <__ssputs_r+0x5c>
 800734e:	6921      	ldr	r1, [r4, #16]
 8007350:	4650      	mov	r0, sl
 8007352:	f7ff feaf 	bl	80070b4 <_free_r>
 8007356:	230c      	movs	r3, #12
 8007358:	f8ca 3000 	str.w	r3, [sl]
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007362:	81a3      	strh	r3, [r4, #12]
 8007364:	f04f 30ff 	mov.w	r0, #4294967295
 8007368:	e7e9      	b.n	800733e <__ssputs_r+0x8a>
	...

0800736c <_svfiprintf_r>:
 800736c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007370:	4698      	mov	r8, r3
 8007372:	898b      	ldrh	r3, [r1, #12]
 8007374:	061b      	lsls	r3, r3, #24
 8007376:	b09d      	sub	sp, #116	@ 0x74
 8007378:	4607      	mov	r7, r0
 800737a:	460d      	mov	r5, r1
 800737c:	4614      	mov	r4, r2
 800737e:	d510      	bpl.n	80073a2 <_svfiprintf_r+0x36>
 8007380:	690b      	ldr	r3, [r1, #16]
 8007382:	b973      	cbnz	r3, 80073a2 <_svfiprintf_r+0x36>
 8007384:	2140      	movs	r1, #64	@ 0x40
 8007386:	f7ff ff09 	bl	800719c <_malloc_r>
 800738a:	6028      	str	r0, [r5, #0]
 800738c:	6128      	str	r0, [r5, #16]
 800738e:	b930      	cbnz	r0, 800739e <_svfiprintf_r+0x32>
 8007390:	230c      	movs	r3, #12
 8007392:	603b      	str	r3, [r7, #0]
 8007394:	f04f 30ff 	mov.w	r0, #4294967295
 8007398:	b01d      	add	sp, #116	@ 0x74
 800739a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739e:	2340      	movs	r3, #64	@ 0x40
 80073a0:	616b      	str	r3, [r5, #20]
 80073a2:	2300      	movs	r3, #0
 80073a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073a6:	2320      	movs	r3, #32
 80073a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80073b0:	2330      	movs	r3, #48	@ 0x30
 80073b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007550 <_svfiprintf_r+0x1e4>
 80073b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073ba:	f04f 0901 	mov.w	r9, #1
 80073be:	4623      	mov	r3, r4
 80073c0:	469a      	mov	sl, r3
 80073c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073c6:	b10a      	cbz	r2, 80073cc <_svfiprintf_r+0x60>
 80073c8:	2a25      	cmp	r2, #37	@ 0x25
 80073ca:	d1f9      	bne.n	80073c0 <_svfiprintf_r+0x54>
 80073cc:	ebba 0b04 	subs.w	fp, sl, r4
 80073d0:	d00b      	beq.n	80073ea <_svfiprintf_r+0x7e>
 80073d2:	465b      	mov	r3, fp
 80073d4:	4622      	mov	r2, r4
 80073d6:	4629      	mov	r1, r5
 80073d8:	4638      	mov	r0, r7
 80073da:	f7ff ff6b 	bl	80072b4 <__ssputs_r>
 80073de:	3001      	adds	r0, #1
 80073e0:	f000 80a7 	beq.w	8007532 <_svfiprintf_r+0x1c6>
 80073e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073e6:	445a      	add	r2, fp
 80073e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80073ea:	f89a 3000 	ldrb.w	r3, [sl]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 809f 	beq.w	8007532 <_svfiprintf_r+0x1c6>
 80073f4:	2300      	movs	r3, #0
 80073f6:	f04f 32ff 	mov.w	r2, #4294967295
 80073fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073fe:	f10a 0a01 	add.w	sl, sl, #1
 8007402:	9304      	str	r3, [sp, #16]
 8007404:	9307      	str	r3, [sp, #28]
 8007406:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800740a:	931a      	str	r3, [sp, #104]	@ 0x68
 800740c:	4654      	mov	r4, sl
 800740e:	2205      	movs	r2, #5
 8007410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007414:	484e      	ldr	r0, [pc, #312]	@ (8007550 <_svfiprintf_r+0x1e4>)
 8007416:	f7f8 ff03 	bl	8000220 <memchr>
 800741a:	9a04      	ldr	r2, [sp, #16]
 800741c:	b9d8      	cbnz	r0, 8007456 <_svfiprintf_r+0xea>
 800741e:	06d0      	lsls	r0, r2, #27
 8007420:	bf44      	itt	mi
 8007422:	2320      	movmi	r3, #32
 8007424:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007428:	0711      	lsls	r1, r2, #28
 800742a:	bf44      	itt	mi
 800742c:	232b      	movmi	r3, #43	@ 0x2b
 800742e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007432:	f89a 3000 	ldrb.w	r3, [sl]
 8007436:	2b2a      	cmp	r3, #42	@ 0x2a
 8007438:	d015      	beq.n	8007466 <_svfiprintf_r+0xfa>
 800743a:	9a07      	ldr	r2, [sp, #28]
 800743c:	4654      	mov	r4, sl
 800743e:	2000      	movs	r0, #0
 8007440:	f04f 0c0a 	mov.w	ip, #10
 8007444:	4621      	mov	r1, r4
 8007446:	f811 3b01 	ldrb.w	r3, [r1], #1
 800744a:	3b30      	subs	r3, #48	@ 0x30
 800744c:	2b09      	cmp	r3, #9
 800744e:	d94b      	bls.n	80074e8 <_svfiprintf_r+0x17c>
 8007450:	b1b0      	cbz	r0, 8007480 <_svfiprintf_r+0x114>
 8007452:	9207      	str	r2, [sp, #28]
 8007454:	e014      	b.n	8007480 <_svfiprintf_r+0x114>
 8007456:	eba0 0308 	sub.w	r3, r0, r8
 800745a:	fa09 f303 	lsl.w	r3, r9, r3
 800745e:	4313      	orrs	r3, r2
 8007460:	9304      	str	r3, [sp, #16]
 8007462:	46a2      	mov	sl, r4
 8007464:	e7d2      	b.n	800740c <_svfiprintf_r+0xa0>
 8007466:	9b03      	ldr	r3, [sp, #12]
 8007468:	1d19      	adds	r1, r3, #4
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	9103      	str	r1, [sp, #12]
 800746e:	2b00      	cmp	r3, #0
 8007470:	bfbb      	ittet	lt
 8007472:	425b      	neglt	r3, r3
 8007474:	f042 0202 	orrlt.w	r2, r2, #2
 8007478:	9307      	strge	r3, [sp, #28]
 800747a:	9307      	strlt	r3, [sp, #28]
 800747c:	bfb8      	it	lt
 800747e:	9204      	strlt	r2, [sp, #16]
 8007480:	7823      	ldrb	r3, [r4, #0]
 8007482:	2b2e      	cmp	r3, #46	@ 0x2e
 8007484:	d10a      	bne.n	800749c <_svfiprintf_r+0x130>
 8007486:	7863      	ldrb	r3, [r4, #1]
 8007488:	2b2a      	cmp	r3, #42	@ 0x2a
 800748a:	d132      	bne.n	80074f2 <_svfiprintf_r+0x186>
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	1d1a      	adds	r2, r3, #4
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	9203      	str	r2, [sp, #12]
 8007494:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007498:	3402      	adds	r4, #2
 800749a:	9305      	str	r3, [sp, #20]
 800749c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007560 <_svfiprintf_r+0x1f4>
 80074a0:	7821      	ldrb	r1, [r4, #0]
 80074a2:	2203      	movs	r2, #3
 80074a4:	4650      	mov	r0, sl
 80074a6:	f7f8 febb 	bl	8000220 <memchr>
 80074aa:	b138      	cbz	r0, 80074bc <_svfiprintf_r+0x150>
 80074ac:	9b04      	ldr	r3, [sp, #16]
 80074ae:	eba0 000a 	sub.w	r0, r0, sl
 80074b2:	2240      	movs	r2, #64	@ 0x40
 80074b4:	4082      	lsls	r2, r0
 80074b6:	4313      	orrs	r3, r2
 80074b8:	3401      	adds	r4, #1
 80074ba:	9304      	str	r3, [sp, #16]
 80074bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c0:	4824      	ldr	r0, [pc, #144]	@ (8007554 <_svfiprintf_r+0x1e8>)
 80074c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074c6:	2206      	movs	r2, #6
 80074c8:	f7f8 feaa 	bl	8000220 <memchr>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d036      	beq.n	800753e <_svfiprintf_r+0x1d2>
 80074d0:	4b21      	ldr	r3, [pc, #132]	@ (8007558 <_svfiprintf_r+0x1ec>)
 80074d2:	bb1b      	cbnz	r3, 800751c <_svfiprintf_r+0x1b0>
 80074d4:	9b03      	ldr	r3, [sp, #12]
 80074d6:	3307      	adds	r3, #7
 80074d8:	f023 0307 	bic.w	r3, r3, #7
 80074dc:	3308      	adds	r3, #8
 80074de:	9303      	str	r3, [sp, #12]
 80074e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074e2:	4433      	add	r3, r6
 80074e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074e6:	e76a      	b.n	80073be <_svfiprintf_r+0x52>
 80074e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80074ec:	460c      	mov	r4, r1
 80074ee:	2001      	movs	r0, #1
 80074f0:	e7a8      	b.n	8007444 <_svfiprintf_r+0xd8>
 80074f2:	2300      	movs	r3, #0
 80074f4:	3401      	adds	r4, #1
 80074f6:	9305      	str	r3, [sp, #20]
 80074f8:	4619      	mov	r1, r3
 80074fa:	f04f 0c0a 	mov.w	ip, #10
 80074fe:	4620      	mov	r0, r4
 8007500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007504:	3a30      	subs	r2, #48	@ 0x30
 8007506:	2a09      	cmp	r2, #9
 8007508:	d903      	bls.n	8007512 <_svfiprintf_r+0x1a6>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d0c6      	beq.n	800749c <_svfiprintf_r+0x130>
 800750e:	9105      	str	r1, [sp, #20]
 8007510:	e7c4      	b.n	800749c <_svfiprintf_r+0x130>
 8007512:	fb0c 2101 	mla	r1, ip, r1, r2
 8007516:	4604      	mov	r4, r0
 8007518:	2301      	movs	r3, #1
 800751a:	e7f0      	b.n	80074fe <_svfiprintf_r+0x192>
 800751c:	ab03      	add	r3, sp, #12
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	462a      	mov	r2, r5
 8007522:	4b0e      	ldr	r3, [pc, #56]	@ (800755c <_svfiprintf_r+0x1f0>)
 8007524:	a904      	add	r1, sp, #16
 8007526:	4638      	mov	r0, r7
 8007528:	f3af 8000 	nop.w
 800752c:	1c42      	adds	r2, r0, #1
 800752e:	4606      	mov	r6, r0
 8007530:	d1d6      	bne.n	80074e0 <_svfiprintf_r+0x174>
 8007532:	89ab      	ldrh	r3, [r5, #12]
 8007534:	065b      	lsls	r3, r3, #25
 8007536:	f53f af2d 	bmi.w	8007394 <_svfiprintf_r+0x28>
 800753a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800753c:	e72c      	b.n	8007398 <_svfiprintf_r+0x2c>
 800753e:	ab03      	add	r3, sp, #12
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	462a      	mov	r2, r5
 8007544:	4b05      	ldr	r3, [pc, #20]	@ (800755c <_svfiprintf_r+0x1f0>)
 8007546:	a904      	add	r1, sp, #16
 8007548:	4638      	mov	r0, r7
 800754a:	f000 f879 	bl	8007640 <_printf_i>
 800754e:	e7ed      	b.n	800752c <_svfiprintf_r+0x1c0>
 8007550:	0800ab37 	.word	0x0800ab37
 8007554:	0800ab41 	.word	0x0800ab41
 8007558:	00000000 	.word	0x00000000
 800755c:	080072b5 	.word	0x080072b5
 8007560:	0800ab3d 	.word	0x0800ab3d

08007564 <_printf_common>:
 8007564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007568:	4616      	mov	r6, r2
 800756a:	4698      	mov	r8, r3
 800756c:	688a      	ldr	r2, [r1, #8]
 800756e:	690b      	ldr	r3, [r1, #16]
 8007570:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007574:	4293      	cmp	r3, r2
 8007576:	bfb8      	it	lt
 8007578:	4613      	movlt	r3, r2
 800757a:	6033      	str	r3, [r6, #0]
 800757c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007580:	4607      	mov	r7, r0
 8007582:	460c      	mov	r4, r1
 8007584:	b10a      	cbz	r2, 800758a <_printf_common+0x26>
 8007586:	3301      	adds	r3, #1
 8007588:	6033      	str	r3, [r6, #0]
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	0699      	lsls	r1, r3, #26
 800758e:	bf42      	ittt	mi
 8007590:	6833      	ldrmi	r3, [r6, #0]
 8007592:	3302      	addmi	r3, #2
 8007594:	6033      	strmi	r3, [r6, #0]
 8007596:	6825      	ldr	r5, [r4, #0]
 8007598:	f015 0506 	ands.w	r5, r5, #6
 800759c:	d106      	bne.n	80075ac <_printf_common+0x48>
 800759e:	f104 0a19 	add.w	sl, r4, #25
 80075a2:	68e3      	ldr	r3, [r4, #12]
 80075a4:	6832      	ldr	r2, [r6, #0]
 80075a6:	1a9b      	subs	r3, r3, r2
 80075a8:	42ab      	cmp	r3, r5
 80075aa:	dc26      	bgt.n	80075fa <_printf_common+0x96>
 80075ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075b0:	6822      	ldr	r2, [r4, #0]
 80075b2:	3b00      	subs	r3, #0
 80075b4:	bf18      	it	ne
 80075b6:	2301      	movne	r3, #1
 80075b8:	0692      	lsls	r2, r2, #26
 80075ba:	d42b      	bmi.n	8007614 <_printf_common+0xb0>
 80075bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075c0:	4641      	mov	r1, r8
 80075c2:	4638      	mov	r0, r7
 80075c4:	47c8      	blx	r9
 80075c6:	3001      	adds	r0, #1
 80075c8:	d01e      	beq.n	8007608 <_printf_common+0xa4>
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	6922      	ldr	r2, [r4, #16]
 80075ce:	f003 0306 	and.w	r3, r3, #6
 80075d2:	2b04      	cmp	r3, #4
 80075d4:	bf02      	ittt	eq
 80075d6:	68e5      	ldreq	r5, [r4, #12]
 80075d8:	6833      	ldreq	r3, [r6, #0]
 80075da:	1aed      	subeq	r5, r5, r3
 80075dc:	68a3      	ldr	r3, [r4, #8]
 80075de:	bf0c      	ite	eq
 80075e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075e4:	2500      	movne	r5, #0
 80075e6:	4293      	cmp	r3, r2
 80075e8:	bfc4      	itt	gt
 80075ea:	1a9b      	subgt	r3, r3, r2
 80075ec:	18ed      	addgt	r5, r5, r3
 80075ee:	2600      	movs	r6, #0
 80075f0:	341a      	adds	r4, #26
 80075f2:	42b5      	cmp	r5, r6
 80075f4:	d11a      	bne.n	800762c <_printf_common+0xc8>
 80075f6:	2000      	movs	r0, #0
 80075f8:	e008      	b.n	800760c <_printf_common+0xa8>
 80075fa:	2301      	movs	r3, #1
 80075fc:	4652      	mov	r2, sl
 80075fe:	4641      	mov	r1, r8
 8007600:	4638      	mov	r0, r7
 8007602:	47c8      	blx	r9
 8007604:	3001      	adds	r0, #1
 8007606:	d103      	bne.n	8007610 <_printf_common+0xac>
 8007608:	f04f 30ff 	mov.w	r0, #4294967295
 800760c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007610:	3501      	adds	r5, #1
 8007612:	e7c6      	b.n	80075a2 <_printf_common+0x3e>
 8007614:	18e1      	adds	r1, r4, r3
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	2030      	movs	r0, #48	@ 0x30
 800761a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800761e:	4422      	add	r2, r4
 8007620:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007624:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007628:	3302      	adds	r3, #2
 800762a:	e7c7      	b.n	80075bc <_printf_common+0x58>
 800762c:	2301      	movs	r3, #1
 800762e:	4622      	mov	r2, r4
 8007630:	4641      	mov	r1, r8
 8007632:	4638      	mov	r0, r7
 8007634:	47c8      	blx	r9
 8007636:	3001      	adds	r0, #1
 8007638:	d0e6      	beq.n	8007608 <_printf_common+0xa4>
 800763a:	3601      	adds	r6, #1
 800763c:	e7d9      	b.n	80075f2 <_printf_common+0x8e>
	...

08007640 <_printf_i>:
 8007640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007644:	7e0f      	ldrb	r7, [r1, #24]
 8007646:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007648:	2f78      	cmp	r7, #120	@ 0x78
 800764a:	4691      	mov	r9, r2
 800764c:	4680      	mov	r8, r0
 800764e:	460c      	mov	r4, r1
 8007650:	469a      	mov	sl, r3
 8007652:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007656:	d807      	bhi.n	8007668 <_printf_i+0x28>
 8007658:	2f62      	cmp	r7, #98	@ 0x62
 800765a:	d80a      	bhi.n	8007672 <_printf_i+0x32>
 800765c:	2f00      	cmp	r7, #0
 800765e:	f000 80d2 	beq.w	8007806 <_printf_i+0x1c6>
 8007662:	2f58      	cmp	r7, #88	@ 0x58
 8007664:	f000 80b9 	beq.w	80077da <_printf_i+0x19a>
 8007668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800766c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007670:	e03a      	b.n	80076e8 <_printf_i+0xa8>
 8007672:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007676:	2b15      	cmp	r3, #21
 8007678:	d8f6      	bhi.n	8007668 <_printf_i+0x28>
 800767a:	a101      	add	r1, pc, #4	@ (adr r1, 8007680 <_printf_i+0x40>)
 800767c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007680:	080076d9 	.word	0x080076d9
 8007684:	080076ed 	.word	0x080076ed
 8007688:	08007669 	.word	0x08007669
 800768c:	08007669 	.word	0x08007669
 8007690:	08007669 	.word	0x08007669
 8007694:	08007669 	.word	0x08007669
 8007698:	080076ed 	.word	0x080076ed
 800769c:	08007669 	.word	0x08007669
 80076a0:	08007669 	.word	0x08007669
 80076a4:	08007669 	.word	0x08007669
 80076a8:	08007669 	.word	0x08007669
 80076ac:	080077ed 	.word	0x080077ed
 80076b0:	08007717 	.word	0x08007717
 80076b4:	080077a7 	.word	0x080077a7
 80076b8:	08007669 	.word	0x08007669
 80076bc:	08007669 	.word	0x08007669
 80076c0:	0800780f 	.word	0x0800780f
 80076c4:	08007669 	.word	0x08007669
 80076c8:	08007717 	.word	0x08007717
 80076cc:	08007669 	.word	0x08007669
 80076d0:	08007669 	.word	0x08007669
 80076d4:	080077af 	.word	0x080077af
 80076d8:	6833      	ldr	r3, [r6, #0]
 80076da:	1d1a      	adds	r2, r3, #4
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6032      	str	r2, [r6, #0]
 80076e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076e8:	2301      	movs	r3, #1
 80076ea:	e09d      	b.n	8007828 <_printf_i+0x1e8>
 80076ec:	6833      	ldr	r3, [r6, #0]
 80076ee:	6820      	ldr	r0, [r4, #0]
 80076f0:	1d19      	adds	r1, r3, #4
 80076f2:	6031      	str	r1, [r6, #0]
 80076f4:	0606      	lsls	r6, r0, #24
 80076f6:	d501      	bpl.n	80076fc <_printf_i+0xbc>
 80076f8:	681d      	ldr	r5, [r3, #0]
 80076fa:	e003      	b.n	8007704 <_printf_i+0xc4>
 80076fc:	0645      	lsls	r5, r0, #25
 80076fe:	d5fb      	bpl.n	80076f8 <_printf_i+0xb8>
 8007700:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007704:	2d00      	cmp	r5, #0
 8007706:	da03      	bge.n	8007710 <_printf_i+0xd0>
 8007708:	232d      	movs	r3, #45	@ 0x2d
 800770a:	426d      	negs	r5, r5
 800770c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007710:	4859      	ldr	r0, [pc, #356]	@ (8007878 <_printf_i+0x238>)
 8007712:	230a      	movs	r3, #10
 8007714:	e011      	b.n	800773a <_printf_i+0xfa>
 8007716:	6821      	ldr	r1, [r4, #0]
 8007718:	6833      	ldr	r3, [r6, #0]
 800771a:	0608      	lsls	r0, r1, #24
 800771c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007720:	d402      	bmi.n	8007728 <_printf_i+0xe8>
 8007722:	0649      	lsls	r1, r1, #25
 8007724:	bf48      	it	mi
 8007726:	b2ad      	uxthmi	r5, r5
 8007728:	2f6f      	cmp	r7, #111	@ 0x6f
 800772a:	4853      	ldr	r0, [pc, #332]	@ (8007878 <_printf_i+0x238>)
 800772c:	6033      	str	r3, [r6, #0]
 800772e:	bf14      	ite	ne
 8007730:	230a      	movne	r3, #10
 8007732:	2308      	moveq	r3, #8
 8007734:	2100      	movs	r1, #0
 8007736:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800773a:	6866      	ldr	r6, [r4, #4]
 800773c:	60a6      	str	r6, [r4, #8]
 800773e:	2e00      	cmp	r6, #0
 8007740:	bfa2      	ittt	ge
 8007742:	6821      	ldrge	r1, [r4, #0]
 8007744:	f021 0104 	bicge.w	r1, r1, #4
 8007748:	6021      	strge	r1, [r4, #0]
 800774a:	b90d      	cbnz	r5, 8007750 <_printf_i+0x110>
 800774c:	2e00      	cmp	r6, #0
 800774e:	d04b      	beq.n	80077e8 <_printf_i+0x1a8>
 8007750:	4616      	mov	r6, r2
 8007752:	fbb5 f1f3 	udiv	r1, r5, r3
 8007756:	fb03 5711 	mls	r7, r3, r1, r5
 800775a:	5dc7      	ldrb	r7, [r0, r7]
 800775c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007760:	462f      	mov	r7, r5
 8007762:	42bb      	cmp	r3, r7
 8007764:	460d      	mov	r5, r1
 8007766:	d9f4      	bls.n	8007752 <_printf_i+0x112>
 8007768:	2b08      	cmp	r3, #8
 800776a:	d10b      	bne.n	8007784 <_printf_i+0x144>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	07df      	lsls	r7, r3, #31
 8007770:	d508      	bpl.n	8007784 <_printf_i+0x144>
 8007772:	6923      	ldr	r3, [r4, #16]
 8007774:	6861      	ldr	r1, [r4, #4]
 8007776:	4299      	cmp	r1, r3
 8007778:	bfde      	ittt	le
 800777a:	2330      	movle	r3, #48	@ 0x30
 800777c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007780:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007784:	1b92      	subs	r2, r2, r6
 8007786:	6122      	str	r2, [r4, #16]
 8007788:	f8cd a000 	str.w	sl, [sp]
 800778c:	464b      	mov	r3, r9
 800778e:	aa03      	add	r2, sp, #12
 8007790:	4621      	mov	r1, r4
 8007792:	4640      	mov	r0, r8
 8007794:	f7ff fee6 	bl	8007564 <_printf_common>
 8007798:	3001      	adds	r0, #1
 800779a:	d14a      	bne.n	8007832 <_printf_i+0x1f2>
 800779c:	f04f 30ff 	mov.w	r0, #4294967295
 80077a0:	b004      	add	sp, #16
 80077a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	f043 0320 	orr.w	r3, r3, #32
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	4833      	ldr	r0, [pc, #204]	@ (800787c <_printf_i+0x23c>)
 80077b0:	2778      	movs	r7, #120	@ 0x78
 80077b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	6831      	ldr	r1, [r6, #0]
 80077ba:	061f      	lsls	r7, r3, #24
 80077bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80077c0:	d402      	bmi.n	80077c8 <_printf_i+0x188>
 80077c2:	065f      	lsls	r7, r3, #25
 80077c4:	bf48      	it	mi
 80077c6:	b2ad      	uxthmi	r5, r5
 80077c8:	6031      	str	r1, [r6, #0]
 80077ca:	07d9      	lsls	r1, r3, #31
 80077cc:	bf44      	itt	mi
 80077ce:	f043 0320 	orrmi.w	r3, r3, #32
 80077d2:	6023      	strmi	r3, [r4, #0]
 80077d4:	b11d      	cbz	r5, 80077de <_printf_i+0x19e>
 80077d6:	2310      	movs	r3, #16
 80077d8:	e7ac      	b.n	8007734 <_printf_i+0xf4>
 80077da:	4827      	ldr	r0, [pc, #156]	@ (8007878 <_printf_i+0x238>)
 80077dc:	e7e9      	b.n	80077b2 <_printf_i+0x172>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	f023 0320 	bic.w	r3, r3, #32
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	e7f6      	b.n	80077d6 <_printf_i+0x196>
 80077e8:	4616      	mov	r6, r2
 80077ea:	e7bd      	b.n	8007768 <_printf_i+0x128>
 80077ec:	6833      	ldr	r3, [r6, #0]
 80077ee:	6825      	ldr	r5, [r4, #0]
 80077f0:	6961      	ldr	r1, [r4, #20]
 80077f2:	1d18      	adds	r0, r3, #4
 80077f4:	6030      	str	r0, [r6, #0]
 80077f6:	062e      	lsls	r6, r5, #24
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	d501      	bpl.n	8007800 <_printf_i+0x1c0>
 80077fc:	6019      	str	r1, [r3, #0]
 80077fe:	e002      	b.n	8007806 <_printf_i+0x1c6>
 8007800:	0668      	lsls	r0, r5, #25
 8007802:	d5fb      	bpl.n	80077fc <_printf_i+0x1bc>
 8007804:	8019      	strh	r1, [r3, #0]
 8007806:	2300      	movs	r3, #0
 8007808:	6123      	str	r3, [r4, #16]
 800780a:	4616      	mov	r6, r2
 800780c:	e7bc      	b.n	8007788 <_printf_i+0x148>
 800780e:	6833      	ldr	r3, [r6, #0]
 8007810:	1d1a      	adds	r2, r3, #4
 8007812:	6032      	str	r2, [r6, #0]
 8007814:	681e      	ldr	r6, [r3, #0]
 8007816:	6862      	ldr	r2, [r4, #4]
 8007818:	2100      	movs	r1, #0
 800781a:	4630      	mov	r0, r6
 800781c:	f7f8 fd00 	bl	8000220 <memchr>
 8007820:	b108      	cbz	r0, 8007826 <_printf_i+0x1e6>
 8007822:	1b80      	subs	r0, r0, r6
 8007824:	6060      	str	r0, [r4, #4]
 8007826:	6863      	ldr	r3, [r4, #4]
 8007828:	6123      	str	r3, [r4, #16]
 800782a:	2300      	movs	r3, #0
 800782c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007830:	e7aa      	b.n	8007788 <_printf_i+0x148>
 8007832:	6923      	ldr	r3, [r4, #16]
 8007834:	4632      	mov	r2, r6
 8007836:	4649      	mov	r1, r9
 8007838:	4640      	mov	r0, r8
 800783a:	47d0      	blx	sl
 800783c:	3001      	adds	r0, #1
 800783e:	d0ad      	beq.n	800779c <_printf_i+0x15c>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	079b      	lsls	r3, r3, #30
 8007844:	d413      	bmi.n	800786e <_printf_i+0x22e>
 8007846:	68e0      	ldr	r0, [r4, #12]
 8007848:	9b03      	ldr	r3, [sp, #12]
 800784a:	4298      	cmp	r0, r3
 800784c:	bfb8      	it	lt
 800784e:	4618      	movlt	r0, r3
 8007850:	e7a6      	b.n	80077a0 <_printf_i+0x160>
 8007852:	2301      	movs	r3, #1
 8007854:	4632      	mov	r2, r6
 8007856:	4649      	mov	r1, r9
 8007858:	4640      	mov	r0, r8
 800785a:	47d0      	blx	sl
 800785c:	3001      	adds	r0, #1
 800785e:	d09d      	beq.n	800779c <_printf_i+0x15c>
 8007860:	3501      	adds	r5, #1
 8007862:	68e3      	ldr	r3, [r4, #12]
 8007864:	9903      	ldr	r1, [sp, #12]
 8007866:	1a5b      	subs	r3, r3, r1
 8007868:	42ab      	cmp	r3, r5
 800786a:	dcf2      	bgt.n	8007852 <_printf_i+0x212>
 800786c:	e7eb      	b.n	8007846 <_printf_i+0x206>
 800786e:	2500      	movs	r5, #0
 8007870:	f104 0619 	add.w	r6, r4, #25
 8007874:	e7f5      	b.n	8007862 <_printf_i+0x222>
 8007876:	bf00      	nop
 8007878:	0800ab48 	.word	0x0800ab48
 800787c:	0800ab59 	.word	0x0800ab59

08007880 <__sflush_r>:
 8007880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007888:	0716      	lsls	r6, r2, #28
 800788a:	4605      	mov	r5, r0
 800788c:	460c      	mov	r4, r1
 800788e:	d454      	bmi.n	800793a <__sflush_r+0xba>
 8007890:	684b      	ldr	r3, [r1, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	dc02      	bgt.n	800789c <__sflush_r+0x1c>
 8007896:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007898:	2b00      	cmp	r3, #0
 800789a:	dd48      	ble.n	800792e <__sflush_r+0xae>
 800789c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800789e:	2e00      	cmp	r6, #0
 80078a0:	d045      	beq.n	800792e <__sflush_r+0xae>
 80078a2:	2300      	movs	r3, #0
 80078a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078a8:	682f      	ldr	r7, [r5, #0]
 80078aa:	6a21      	ldr	r1, [r4, #32]
 80078ac:	602b      	str	r3, [r5, #0]
 80078ae:	d030      	beq.n	8007912 <__sflush_r+0x92>
 80078b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	0759      	lsls	r1, r3, #29
 80078b6:	d505      	bpl.n	80078c4 <__sflush_r+0x44>
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	1ad2      	subs	r2, r2, r3
 80078bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80078be:	b10b      	cbz	r3, 80078c4 <__sflush_r+0x44>
 80078c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80078c2:	1ad2      	subs	r2, r2, r3
 80078c4:	2300      	movs	r3, #0
 80078c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078c8:	6a21      	ldr	r1, [r4, #32]
 80078ca:	4628      	mov	r0, r5
 80078cc:	47b0      	blx	r6
 80078ce:	1c43      	adds	r3, r0, #1
 80078d0:	89a3      	ldrh	r3, [r4, #12]
 80078d2:	d106      	bne.n	80078e2 <__sflush_r+0x62>
 80078d4:	6829      	ldr	r1, [r5, #0]
 80078d6:	291d      	cmp	r1, #29
 80078d8:	d82b      	bhi.n	8007932 <__sflush_r+0xb2>
 80078da:	4a2a      	ldr	r2, [pc, #168]	@ (8007984 <__sflush_r+0x104>)
 80078dc:	410a      	asrs	r2, r1
 80078de:	07d6      	lsls	r6, r2, #31
 80078e0:	d427      	bmi.n	8007932 <__sflush_r+0xb2>
 80078e2:	2200      	movs	r2, #0
 80078e4:	6062      	str	r2, [r4, #4]
 80078e6:	04d9      	lsls	r1, r3, #19
 80078e8:	6922      	ldr	r2, [r4, #16]
 80078ea:	6022      	str	r2, [r4, #0]
 80078ec:	d504      	bpl.n	80078f8 <__sflush_r+0x78>
 80078ee:	1c42      	adds	r2, r0, #1
 80078f0:	d101      	bne.n	80078f6 <__sflush_r+0x76>
 80078f2:	682b      	ldr	r3, [r5, #0]
 80078f4:	b903      	cbnz	r3, 80078f8 <__sflush_r+0x78>
 80078f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80078f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078fa:	602f      	str	r7, [r5, #0]
 80078fc:	b1b9      	cbz	r1, 800792e <__sflush_r+0xae>
 80078fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007902:	4299      	cmp	r1, r3
 8007904:	d002      	beq.n	800790c <__sflush_r+0x8c>
 8007906:	4628      	mov	r0, r5
 8007908:	f7ff fbd4 	bl	80070b4 <_free_r>
 800790c:	2300      	movs	r3, #0
 800790e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007910:	e00d      	b.n	800792e <__sflush_r+0xae>
 8007912:	2301      	movs	r3, #1
 8007914:	4628      	mov	r0, r5
 8007916:	47b0      	blx	r6
 8007918:	4602      	mov	r2, r0
 800791a:	1c50      	adds	r0, r2, #1
 800791c:	d1c9      	bne.n	80078b2 <__sflush_r+0x32>
 800791e:	682b      	ldr	r3, [r5, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d0c6      	beq.n	80078b2 <__sflush_r+0x32>
 8007924:	2b1d      	cmp	r3, #29
 8007926:	d001      	beq.n	800792c <__sflush_r+0xac>
 8007928:	2b16      	cmp	r3, #22
 800792a:	d11e      	bne.n	800796a <__sflush_r+0xea>
 800792c:	602f      	str	r7, [r5, #0]
 800792e:	2000      	movs	r0, #0
 8007930:	e022      	b.n	8007978 <__sflush_r+0xf8>
 8007932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007936:	b21b      	sxth	r3, r3
 8007938:	e01b      	b.n	8007972 <__sflush_r+0xf2>
 800793a:	690f      	ldr	r7, [r1, #16]
 800793c:	2f00      	cmp	r7, #0
 800793e:	d0f6      	beq.n	800792e <__sflush_r+0xae>
 8007940:	0793      	lsls	r3, r2, #30
 8007942:	680e      	ldr	r6, [r1, #0]
 8007944:	bf08      	it	eq
 8007946:	694b      	ldreq	r3, [r1, #20]
 8007948:	600f      	str	r7, [r1, #0]
 800794a:	bf18      	it	ne
 800794c:	2300      	movne	r3, #0
 800794e:	eba6 0807 	sub.w	r8, r6, r7
 8007952:	608b      	str	r3, [r1, #8]
 8007954:	f1b8 0f00 	cmp.w	r8, #0
 8007958:	dde9      	ble.n	800792e <__sflush_r+0xae>
 800795a:	6a21      	ldr	r1, [r4, #32]
 800795c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800795e:	4643      	mov	r3, r8
 8007960:	463a      	mov	r2, r7
 8007962:	4628      	mov	r0, r5
 8007964:	47b0      	blx	r6
 8007966:	2800      	cmp	r0, #0
 8007968:	dc08      	bgt.n	800797c <__sflush_r+0xfc>
 800796a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800796e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800797c:	4407      	add	r7, r0
 800797e:	eba8 0800 	sub.w	r8, r8, r0
 8007982:	e7e7      	b.n	8007954 <__sflush_r+0xd4>
 8007984:	dfbffffe 	.word	0xdfbffffe

08007988 <_fflush_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	690b      	ldr	r3, [r1, #16]
 800798c:	4605      	mov	r5, r0
 800798e:	460c      	mov	r4, r1
 8007990:	b913      	cbnz	r3, 8007998 <_fflush_r+0x10>
 8007992:	2500      	movs	r5, #0
 8007994:	4628      	mov	r0, r5
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	b118      	cbz	r0, 80079a2 <_fflush_r+0x1a>
 800799a:	6a03      	ldr	r3, [r0, #32]
 800799c:	b90b      	cbnz	r3, 80079a2 <_fflush_r+0x1a>
 800799e:	f7ff fa0f 	bl	8006dc0 <__sinit>
 80079a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d0f3      	beq.n	8007992 <_fflush_r+0xa>
 80079aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079ac:	07d0      	lsls	r0, r2, #31
 80079ae:	d404      	bmi.n	80079ba <_fflush_r+0x32>
 80079b0:	0599      	lsls	r1, r3, #22
 80079b2:	d402      	bmi.n	80079ba <_fflush_r+0x32>
 80079b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079b6:	f7ff fb5c 	bl	8007072 <__retarget_lock_acquire_recursive>
 80079ba:	4628      	mov	r0, r5
 80079bc:	4621      	mov	r1, r4
 80079be:	f7ff ff5f 	bl	8007880 <__sflush_r>
 80079c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079c4:	07da      	lsls	r2, r3, #31
 80079c6:	4605      	mov	r5, r0
 80079c8:	d4e4      	bmi.n	8007994 <_fflush_r+0xc>
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	059b      	lsls	r3, r3, #22
 80079ce:	d4e1      	bmi.n	8007994 <_fflush_r+0xc>
 80079d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079d2:	f7ff fb4f 	bl	8007074 <__retarget_lock_release_recursive>
 80079d6:	e7dd      	b.n	8007994 <_fflush_r+0xc>

080079d8 <fiprintf>:
 80079d8:	b40e      	push	{r1, r2, r3}
 80079da:	b503      	push	{r0, r1, lr}
 80079dc:	4601      	mov	r1, r0
 80079de:	ab03      	add	r3, sp, #12
 80079e0:	4805      	ldr	r0, [pc, #20]	@ (80079f8 <fiprintf+0x20>)
 80079e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80079e6:	6800      	ldr	r0, [r0, #0]
 80079e8:	9301      	str	r3, [sp, #4]
 80079ea:	f000 f89d 	bl	8007b28 <_vfiprintf_r>
 80079ee:	b002      	add	sp, #8
 80079f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079f4:	b003      	add	sp, #12
 80079f6:	4770      	bx	lr
 80079f8:	20000030 	.word	0x20000030

080079fc <memmove>:
 80079fc:	4288      	cmp	r0, r1
 80079fe:	b510      	push	{r4, lr}
 8007a00:	eb01 0402 	add.w	r4, r1, r2
 8007a04:	d902      	bls.n	8007a0c <memmove+0x10>
 8007a06:	4284      	cmp	r4, r0
 8007a08:	4623      	mov	r3, r4
 8007a0a:	d807      	bhi.n	8007a1c <memmove+0x20>
 8007a0c:	1e43      	subs	r3, r0, #1
 8007a0e:	42a1      	cmp	r1, r4
 8007a10:	d008      	beq.n	8007a24 <memmove+0x28>
 8007a12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a1a:	e7f8      	b.n	8007a0e <memmove+0x12>
 8007a1c:	4402      	add	r2, r0
 8007a1e:	4601      	mov	r1, r0
 8007a20:	428a      	cmp	r2, r1
 8007a22:	d100      	bne.n	8007a26 <memmove+0x2a>
 8007a24:	bd10      	pop	{r4, pc}
 8007a26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a2e:	e7f7      	b.n	8007a20 <memmove+0x24>

08007a30 <_sbrk_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4d06      	ldr	r5, [pc, #24]	@ (8007a4c <_sbrk_r+0x1c>)
 8007a34:	2300      	movs	r3, #0
 8007a36:	4604      	mov	r4, r0
 8007a38:	4608      	mov	r0, r1
 8007a3a:	602b      	str	r3, [r5, #0]
 8007a3c:	f7fa fc96 	bl	800236c <_sbrk>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d102      	bne.n	8007a4a <_sbrk_r+0x1a>
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	b103      	cbz	r3, 8007a4a <_sbrk_r+0x1a>
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	bd38      	pop	{r3, r4, r5, pc}
 8007a4c:	20000460 	.word	0x20000460

08007a50 <memcpy>:
 8007a50:	440a      	add	r2, r1
 8007a52:	4291      	cmp	r1, r2
 8007a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a58:	d100      	bne.n	8007a5c <memcpy+0xc>
 8007a5a:	4770      	bx	lr
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a66:	4291      	cmp	r1, r2
 8007a68:	d1f9      	bne.n	8007a5e <memcpy+0xe>
 8007a6a:	bd10      	pop	{r4, pc}

08007a6c <abort>:
 8007a6c:	b508      	push	{r3, lr}
 8007a6e:	2006      	movs	r0, #6
 8007a70:	f000 fa2e 	bl	8007ed0 <raise>
 8007a74:	2001      	movs	r0, #1
 8007a76:	f7fa fc1d 	bl	80022b4 <_exit>

08007a7a <_realloc_r>:
 8007a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7e:	4680      	mov	r8, r0
 8007a80:	4615      	mov	r5, r2
 8007a82:	460c      	mov	r4, r1
 8007a84:	b921      	cbnz	r1, 8007a90 <_realloc_r+0x16>
 8007a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	f7ff bb86 	b.w	800719c <_malloc_r>
 8007a90:	b92a      	cbnz	r2, 8007a9e <_realloc_r+0x24>
 8007a92:	f7ff fb0f 	bl	80070b4 <_free_r>
 8007a96:	2400      	movs	r4, #0
 8007a98:	4620      	mov	r0, r4
 8007a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a9e:	f000 fa33 	bl	8007f08 <_malloc_usable_size_r>
 8007aa2:	4285      	cmp	r5, r0
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	d802      	bhi.n	8007aae <_realloc_r+0x34>
 8007aa8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007aac:	d8f4      	bhi.n	8007a98 <_realloc_r+0x1e>
 8007aae:	4629      	mov	r1, r5
 8007ab0:	4640      	mov	r0, r8
 8007ab2:	f7ff fb73 	bl	800719c <_malloc_r>
 8007ab6:	4607      	mov	r7, r0
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d0ec      	beq.n	8007a96 <_realloc_r+0x1c>
 8007abc:	42b5      	cmp	r5, r6
 8007abe:	462a      	mov	r2, r5
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	bf28      	it	cs
 8007ac4:	4632      	movcs	r2, r6
 8007ac6:	f7ff ffc3 	bl	8007a50 <memcpy>
 8007aca:	4621      	mov	r1, r4
 8007acc:	4640      	mov	r0, r8
 8007ace:	f7ff faf1 	bl	80070b4 <_free_r>
 8007ad2:	463c      	mov	r4, r7
 8007ad4:	e7e0      	b.n	8007a98 <_realloc_r+0x1e>

08007ad6 <__sfputc_r>:
 8007ad6:	6893      	ldr	r3, [r2, #8]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	b410      	push	{r4}
 8007ade:	6093      	str	r3, [r2, #8]
 8007ae0:	da08      	bge.n	8007af4 <__sfputc_r+0x1e>
 8007ae2:	6994      	ldr	r4, [r2, #24]
 8007ae4:	42a3      	cmp	r3, r4
 8007ae6:	db01      	blt.n	8007aec <__sfputc_r+0x16>
 8007ae8:	290a      	cmp	r1, #10
 8007aea:	d103      	bne.n	8007af4 <__sfputc_r+0x1e>
 8007aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007af0:	f000 b932 	b.w	8007d58 <__swbuf_r>
 8007af4:	6813      	ldr	r3, [r2, #0]
 8007af6:	1c58      	adds	r0, r3, #1
 8007af8:	6010      	str	r0, [r2, #0]
 8007afa:	7019      	strb	r1, [r3, #0]
 8007afc:	4608      	mov	r0, r1
 8007afe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <__sfputs_r>:
 8007b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b06:	4606      	mov	r6, r0
 8007b08:	460f      	mov	r7, r1
 8007b0a:	4614      	mov	r4, r2
 8007b0c:	18d5      	adds	r5, r2, r3
 8007b0e:	42ac      	cmp	r4, r5
 8007b10:	d101      	bne.n	8007b16 <__sfputs_r+0x12>
 8007b12:	2000      	movs	r0, #0
 8007b14:	e007      	b.n	8007b26 <__sfputs_r+0x22>
 8007b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b1a:	463a      	mov	r2, r7
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f7ff ffda 	bl	8007ad6 <__sfputc_r>
 8007b22:	1c43      	adds	r3, r0, #1
 8007b24:	d1f3      	bne.n	8007b0e <__sfputs_r+0xa>
 8007b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b28 <_vfiprintf_r>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	460d      	mov	r5, r1
 8007b2e:	b09d      	sub	sp, #116	@ 0x74
 8007b30:	4614      	mov	r4, r2
 8007b32:	4698      	mov	r8, r3
 8007b34:	4606      	mov	r6, r0
 8007b36:	b118      	cbz	r0, 8007b40 <_vfiprintf_r+0x18>
 8007b38:	6a03      	ldr	r3, [r0, #32]
 8007b3a:	b90b      	cbnz	r3, 8007b40 <_vfiprintf_r+0x18>
 8007b3c:	f7ff f940 	bl	8006dc0 <__sinit>
 8007b40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b42:	07d9      	lsls	r1, r3, #31
 8007b44:	d405      	bmi.n	8007b52 <_vfiprintf_r+0x2a>
 8007b46:	89ab      	ldrh	r3, [r5, #12]
 8007b48:	059a      	lsls	r2, r3, #22
 8007b4a:	d402      	bmi.n	8007b52 <_vfiprintf_r+0x2a>
 8007b4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b4e:	f7ff fa90 	bl	8007072 <__retarget_lock_acquire_recursive>
 8007b52:	89ab      	ldrh	r3, [r5, #12]
 8007b54:	071b      	lsls	r3, r3, #28
 8007b56:	d501      	bpl.n	8007b5c <_vfiprintf_r+0x34>
 8007b58:	692b      	ldr	r3, [r5, #16]
 8007b5a:	b99b      	cbnz	r3, 8007b84 <_vfiprintf_r+0x5c>
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f000 f938 	bl	8007dd4 <__swsetup_r>
 8007b64:	b170      	cbz	r0, 8007b84 <_vfiprintf_r+0x5c>
 8007b66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b68:	07dc      	lsls	r4, r3, #31
 8007b6a:	d504      	bpl.n	8007b76 <_vfiprintf_r+0x4e>
 8007b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b70:	b01d      	add	sp, #116	@ 0x74
 8007b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b76:	89ab      	ldrh	r3, [r5, #12]
 8007b78:	0598      	lsls	r0, r3, #22
 8007b7a:	d4f7      	bmi.n	8007b6c <_vfiprintf_r+0x44>
 8007b7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b7e:	f7ff fa79 	bl	8007074 <__retarget_lock_release_recursive>
 8007b82:	e7f3      	b.n	8007b6c <_vfiprintf_r+0x44>
 8007b84:	2300      	movs	r3, #0
 8007b86:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b88:	2320      	movs	r3, #32
 8007b8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b92:	2330      	movs	r3, #48	@ 0x30
 8007b94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007d44 <_vfiprintf_r+0x21c>
 8007b98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b9c:	f04f 0901 	mov.w	r9, #1
 8007ba0:	4623      	mov	r3, r4
 8007ba2:	469a      	mov	sl, r3
 8007ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ba8:	b10a      	cbz	r2, 8007bae <_vfiprintf_r+0x86>
 8007baa:	2a25      	cmp	r2, #37	@ 0x25
 8007bac:	d1f9      	bne.n	8007ba2 <_vfiprintf_r+0x7a>
 8007bae:	ebba 0b04 	subs.w	fp, sl, r4
 8007bb2:	d00b      	beq.n	8007bcc <_vfiprintf_r+0xa4>
 8007bb4:	465b      	mov	r3, fp
 8007bb6:	4622      	mov	r2, r4
 8007bb8:	4629      	mov	r1, r5
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f7ff ffa2 	bl	8007b04 <__sfputs_r>
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	f000 80a7 	beq.w	8007d14 <_vfiprintf_r+0x1ec>
 8007bc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bc8:	445a      	add	r2, fp
 8007bca:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 809f 	beq.w	8007d14 <_vfiprintf_r+0x1ec>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007be0:	f10a 0a01 	add.w	sl, sl, #1
 8007be4:	9304      	str	r3, [sp, #16]
 8007be6:	9307      	str	r3, [sp, #28]
 8007be8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bec:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bee:	4654      	mov	r4, sl
 8007bf0:	2205      	movs	r2, #5
 8007bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf6:	4853      	ldr	r0, [pc, #332]	@ (8007d44 <_vfiprintf_r+0x21c>)
 8007bf8:	f7f8 fb12 	bl	8000220 <memchr>
 8007bfc:	9a04      	ldr	r2, [sp, #16]
 8007bfe:	b9d8      	cbnz	r0, 8007c38 <_vfiprintf_r+0x110>
 8007c00:	06d1      	lsls	r1, r2, #27
 8007c02:	bf44      	itt	mi
 8007c04:	2320      	movmi	r3, #32
 8007c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c0a:	0713      	lsls	r3, r2, #28
 8007c0c:	bf44      	itt	mi
 8007c0e:	232b      	movmi	r3, #43	@ 0x2b
 8007c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c14:	f89a 3000 	ldrb.w	r3, [sl]
 8007c18:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c1a:	d015      	beq.n	8007c48 <_vfiprintf_r+0x120>
 8007c1c:	9a07      	ldr	r2, [sp, #28]
 8007c1e:	4654      	mov	r4, sl
 8007c20:	2000      	movs	r0, #0
 8007c22:	f04f 0c0a 	mov.w	ip, #10
 8007c26:	4621      	mov	r1, r4
 8007c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c2c:	3b30      	subs	r3, #48	@ 0x30
 8007c2e:	2b09      	cmp	r3, #9
 8007c30:	d94b      	bls.n	8007cca <_vfiprintf_r+0x1a2>
 8007c32:	b1b0      	cbz	r0, 8007c62 <_vfiprintf_r+0x13a>
 8007c34:	9207      	str	r2, [sp, #28]
 8007c36:	e014      	b.n	8007c62 <_vfiprintf_r+0x13a>
 8007c38:	eba0 0308 	sub.w	r3, r0, r8
 8007c3c:	fa09 f303 	lsl.w	r3, r9, r3
 8007c40:	4313      	orrs	r3, r2
 8007c42:	9304      	str	r3, [sp, #16]
 8007c44:	46a2      	mov	sl, r4
 8007c46:	e7d2      	b.n	8007bee <_vfiprintf_r+0xc6>
 8007c48:	9b03      	ldr	r3, [sp, #12]
 8007c4a:	1d19      	adds	r1, r3, #4
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	9103      	str	r1, [sp, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	bfbb      	ittet	lt
 8007c54:	425b      	neglt	r3, r3
 8007c56:	f042 0202 	orrlt.w	r2, r2, #2
 8007c5a:	9307      	strge	r3, [sp, #28]
 8007c5c:	9307      	strlt	r3, [sp, #28]
 8007c5e:	bfb8      	it	lt
 8007c60:	9204      	strlt	r2, [sp, #16]
 8007c62:	7823      	ldrb	r3, [r4, #0]
 8007c64:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c66:	d10a      	bne.n	8007c7e <_vfiprintf_r+0x156>
 8007c68:	7863      	ldrb	r3, [r4, #1]
 8007c6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c6c:	d132      	bne.n	8007cd4 <_vfiprintf_r+0x1ac>
 8007c6e:	9b03      	ldr	r3, [sp, #12]
 8007c70:	1d1a      	adds	r2, r3, #4
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	9203      	str	r2, [sp, #12]
 8007c76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c7a:	3402      	adds	r4, #2
 8007c7c:	9305      	str	r3, [sp, #20]
 8007c7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007d54 <_vfiprintf_r+0x22c>
 8007c82:	7821      	ldrb	r1, [r4, #0]
 8007c84:	2203      	movs	r2, #3
 8007c86:	4650      	mov	r0, sl
 8007c88:	f7f8 faca 	bl	8000220 <memchr>
 8007c8c:	b138      	cbz	r0, 8007c9e <_vfiprintf_r+0x176>
 8007c8e:	9b04      	ldr	r3, [sp, #16]
 8007c90:	eba0 000a 	sub.w	r0, r0, sl
 8007c94:	2240      	movs	r2, #64	@ 0x40
 8007c96:	4082      	lsls	r2, r0
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	3401      	adds	r4, #1
 8007c9c:	9304      	str	r3, [sp, #16]
 8007c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca2:	4829      	ldr	r0, [pc, #164]	@ (8007d48 <_vfiprintf_r+0x220>)
 8007ca4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ca8:	2206      	movs	r2, #6
 8007caa:	f7f8 fab9 	bl	8000220 <memchr>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d03f      	beq.n	8007d32 <_vfiprintf_r+0x20a>
 8007cb2:	4b26      	ldr	r3, [pc, #152]	@ (8007d4c <_vfiprintf_r+0x224>)
 8007cb4:	bb1b      	cbnz	r3, 8007cfe <_vfiprintf_r+0x1d6>
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	3307      	adds	r3, #7
 8007cba:	f023 0307 	bic.w	r3, r3, #7
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	9303      	str	r3, [sp, #12]
 8007cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc4:	443b      	add	r3, r7
 8007cc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cc8:	e76a      	b.n	8007ba0 <_vfiprintf_r+0x78>
 8007cca:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cce:	460c      	mov	r4, r1
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	e7a8      	b.n	8007c26 <_vfiprintf_r+0xfe>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	3401      	adds	r4, #1
 8007cd8:	9305      	str	r3, [sp, #20]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	f04f 0c0a 	mov.w	ip, #10
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ce6:	3a30      	subs	r2, #48	@ 0x30
 8007ce8:	2a09      	cmp	r2, #9
 8007cea:	d903      	bls.n	8007cf4 <_vfiprintf_r+0x1cc>
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d0c6      	beq.n	8007c7e <_vfiprintf_r+0x156>
 8007cf0:	9105      	str	r1, [sp, #20]
 8007cf2:	e7c4      	b.n	8007c7e <_vfiprintf_r+0x156>
 8007cf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e7f0      	b.n	8007ce0 <_vfiprintf_r+0x1b8>
 8007cfe:	ab03      	add	r3, sp, #12
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	462a      	mov	r2, r5
 8007d04:	4b12      	ldr	r3, [pc, #72]	@ (8007d50 <_vfiprintf_r+0x228>)
 8007d06:	a904      	add	r1, sp, #16
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f3af 8000 	nop.w
 8007d0e:	4607      	mov	r7, r0
 8007d10:	1c78      	adds	r0, r7, #1
 8007d12:	d1d6      	bne.n	8007cc2 <_vfiprintf_r+0x19a>
 8007d14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d16:	07d9      	lsls	r1, r3, #31
 8007d18:	d405      	bmi.n	8007d26 <_vfiprintf_r+0x1fe>
 8007d1a:	89ab      	ldrh	r3, [r5, #12]
 8007d1c:	059a      	lsls	r2, r3, #22
 8007d1e:	d402      	bmi.n	8007d26 <_vfiprintf_r+0x1fe>
 8007d20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d22:	f7ff f9a7 	bl	8007074 <__retarget_lock_release_recursive>
 8007d26:	89ab      	ldrh	r3, [r5, #12]
 8007d28:	065b      	lsls	r3, r3, #25
 8007d2a:	f53f af1f 	bmi.w	8007b6c <_vfiprintf_r+0x44>
 8007d2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d30:	e71e      	b.n	8007b70 <_vfiprintf_r+0x48>
 8007d32:	ab03      	add	r3, sp, #12
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	462a      	mov	r2, r5
 8007d38:	4b05      	ldr	r3, [pc, #20]	@ (8007d50 <_vfiprintf_r+0x228>)
 8007d3a:	a904      	add	r1, sp, #16
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	f7ff fc7f 	bl	8007640 <_printf_i>
 8007d42:	e7e4      	b.n	8007d0e <_vfiprintf_r+0x1e6>
 8007d44:	0800ab37 	.word	0x0800ab37
 8007d48:	0800ab41 	.word	0x0800ab41
 8007d4c:	00000000 	.word	0x00000000
 8007d50:	08007b05 	.word	0x08007b05
 8007d54:	0800ab3d 	.word	0x0800ab3d

08007d58 <__swbuf_r>:
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5a:	460e      	mov	r6, r1
 8007d5c:	4614      	mov	r4, r2
 8007d5e:	4605      	mov	r5, r0
 8007d60:	b118      	cbz	r0, 8007d6a <__swbuf_r+0x12>
 8007d62:	6a03      	ldr	r3, [r0, #32]
 8007d64:	b90b      	cbnz	r3, 8007d6a <__swbuf_r+0x12>
 8007d66:	f7ff f82b 	bl	8006dc0 <__sinit>
 8007d6a:	69a3      	ldr	r3, [r4, #24]
 8007d6c:	60a3      	str	r3, [r4, #8]
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	071a      	lsls	r2, r3, #28
 8007d72:	d501      	bpl.n	8007d78 <__swbuf_r+0x20>
 8007d74:	6923      	ldr	r3, [r4, #16]
 8007d76:	b943      	cbnz	r3, 8007d8a <__swbuf_r+0x32>
 8007d78:	4621      	mov	r1, r4
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	f000 f82a 	bl	8007dd4 <__swsetup_r>
 8007d80:	b118      	cbz	r0, 8007d8a <__swbuf_r+0x32>
 8007d82:	f04f 37ff 	mov.w	r7, #4294967295
 8007d86:	4638      	mov	r0, r7
 8007d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	6922      	ldr	r2, [r4, #16]
 8007d8e:	1a98      	subs	r0, r3, r2
 8007d90:	6963      	ldr	r3, [r4, #20]
 8007d92:	b2f6      	uxtb	r6, r6
 8007d94:	4283      	cmp	r3, r0
 8007d96:	4637      	mov	r7, r6
 8007d98:	dc05      	bgt.n	8007da6 <__swbuf_r+0x4e>
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	f7ff fdf3 	bl	8007988 <_fflush_r>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d1ed      	bne.n	8007d82 <__swbuf_r+0x2a>
 8007da6:	68a3      	ldr	r3, [r4, #8]
 8007da8:	3b01      	subs	r3, #1
 8007daa:	60a3      	str	r3, [r4, #8]
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	6022      	str	r2, [r4, #0]
 8007db2:	701e      	strb	r6, [r3, #0]
 8007db4:	6962      	ldr	r2, [r4, #20]
 8007db6:	1c43      	adds	r3, r0, #1
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d004      	beq.n	8007dc6 <__swbuf_r+0x6e>
 8007dbc:	89a3      	ldrh	r3, [r4, #12]
 8007dbe:	07db      	lsls	r3, r3, #31
 8007dc0:	d5e1      	bpl.n	8007d86 <__swbuf_r+0x2e>
 8007dc2:	2e0a      	cmp	r6, #10
 8007dc4:	d1df      	bne.n	8007d86 <__swbuf_r+0x2e>
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	4628      	mov	r0, r5
 8007dca:	f7ff fddd 	bl	8007988 <_fflush_r>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d0d9      	beq.n	8007d86 <__swbuf_r+0x2e>
 8007dd2:	e7d6      	b.n	8007d82 <__swbuf_r+0x2a>

08007dd4 <__swsetup_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4b29      	ldr	r3, [pc, #164]	@ (8007e7c <__swsetup_r+0xa8>)
 8007dd8:	4605      	mov	r5, r0
 8007dda:	6818      	ldr	r0, [r3, #0]
 8007ddc:	460c      	mov	r4, r1
 8007dde:	b118      	cbz	r0, 8007de8 <__swsetup_r+0x14>
 8007de0:	6a03      	ldr	r3, [r0, #32]
 8007de2:	b90b      	cbnz	r3, 8007de8 <__swsetup_r+0x14>
 8007de4:	f7fe ffec 	bl	8006dc0 <__sinit>
 8007de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dec:	0719      	lsls	r1, r3, #28
 8007dee:	d422      	bmi.n	8007e36 <__swsetup_r+0x62>
 8007df0:	06da      	lsls	r2, r3, #27
 8007df2:	d407      	bmi.n	8007e04 <__swsetup_r+0x30>
 8007df4:	2209      	movs	r2, #9
 8007df6:	602a      	str	r2, [r5, #0]
 8007df8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dfc:	81a3      	strh	r3, [r4, #12]
 8007dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007e02:	e033      	b.n	8007e6c <__swsetup_r+0x98>
 8007e04:	0758      	lsls	r0, r3, #29
 8007e06:	d512      	bpl.n	8007e2e <__swsetup_r+0x5a>
 8007e08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e0a:	b141      	cbz	r1, 8007e1e <__swsetup_r+0x4a>
 8007e0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e10:	4299      	cmp	r1, r3
 8007e12:	d002      	beq.n	8007e1a <__swsetup_r+0x46>
 8007e14:	4628      	mov	r0, r5
 8007e16:	f7ff f94d 	bl	80070b4 <_free_r>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007e24:	81a3      	strh	r3, [r4, #12]
 8007e26:	2300      	movs	r3, #0
 8007e28:	6063      	str	r3, [r4, #4]
 8007e2a:	6923      	ldr	r3, [r4, #16]
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	f043 0308 	orr.w	r3, r3, #8
 8007e34:	81a3      	strh	r3, [r4, #12]
 8007e36:	6923      	ldr	r3, [r4, #16]
 8007e38:	b94b      	cbnz	r3, 8007e4e <__swsetup_r+0x7a>
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007e40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e44:	d003      	beq.n	8007e4e <__swsetup_r+0x7a>
 8007e46:	4621      	mov	r1, r4
 8007e48:	4628      	mov	r0, r5
 8007e4a:	f000 f88b 	bl	8007f64 <__smakebuf_r>
 8007e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e52:	f013 0201 	ands.w	r2, r3, #1
 8007e56:	d00a      	beq.n	8007e6e <__swsetup_r+0x9a>
 8007e58:	2200      	movs	r2, #0
 8007e5a:	60a2      	str	r2, [r4, #8]
 8007e5c:	6962      	ldr	r2, [r4, #20]
 8007e5e:	4252      	negs	r2, r2
 8007e60:	61a2      	str	r2, [r4, #24]
 8007e62:	6922      	ldr	r2, [r4, #16]
 8007e64:	b942      	cbnz	r2, 8007e78 <__swsetup_r+0xa4>
 8007e66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e6a:	d1c5      	bne.n	8007df8 <__swsetup_r+0x24>
 8007e6c:	bd38      	pop	{r3, r4, r5, pc}
 8007e6e:	0799      	lsls	r1, r3, #30
 8007e70:	bf58      	it	pl
 8007e72:	6962      	ldrpl	r2, [r4, #20]
 8007e74:	60a2      	str	r2, [r4, #8]
 8007e76:	e7f4      	b.n	8007e62 <__swsetup_r+0x8e>
 8007e78:	2000      	movs	r0, #0
 8007e7a:	e7f7      	b.n	8007e6c <__swsetup_r+0x98>
 8007e7c:	20000030 	.word	0x20000030

08007e80 <_raise_r>:
 8007e80:	291f      	cmp	r1, #31
 8007e82:	b538      	push	{r3, r4, r5, lr}
 8007e84:	4605      	mov	r5, r0
 8007e86:	460c      	mov	r4, r1
 8007e88:	d904      	bls.n	8007e94 <_raise_r+0x14>
 8007e8a:	2316      	movs	r3, #22
 8007e8c:	6003      	str	r3, [r0, #0]
 8007e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007e96:	b112      	cbz	r2, 8007e9e <_raise_r+0x1e>
 8007e98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e9c:	b94b      	cbnz	r3, 8007eb2 <_raise_r+0x32>
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f000 f830 	bl	8007f04 <_getpid_r>
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	4601      	mov	r1, r0
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eae:	f000 b817 	b.w	8007ee0 <_kill_r>
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d00a      	beq.n	8007ecc <_raise_r+0x4c>
 8007eb6:	1c59      	adds	r1, r3, #1
 8007eb8:	d103      	bne.n	8007ec2 <_raise_r+0x42>
 8007eba:	2316      	movs	r3, #22
 8007ebc:	6003      	str	r3, [r0, #0]
 8007ebe:	2001      	movs	r0, #1
 8007ec0:	e7e7      	b.n	8007e92 <_raise_r+0x12>
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007ec8:	4620      	mov	r0, r4
 8007eca:	4798      	blx	r3
 8007ecc:	2000      	movs	r0, #0
 8007ece:	e7e0      	b.n	8007e92 <_raise_r+0x12>

08007ed0 <raise>:
 8007ed0:	4b02      	ldr	r3, [pc, #8]	@ (8007edc <raise+0xc>)
 8007ed2:	4601      	mov	r1, r0
 8007ed4:	6818      	ldr	r0, [r3, #0]
 8007ed6:	f7ff bfd3 	b.w	8007e80 <_raise_r>
 8007eda:	bf00      	nop
 8007edc:	20000030 	.word	0x20000030

08007ee0 <_kill_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4d07      	ldr	r5, [pc, #28]	@ (8007f00 <_kill_r+0x20>)
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	4608      	mov	r0, r1
 8007eea:	4611      	mov	r1, r2
 8007eec:	602b      	str	r3, [r5, #0]
 8007eee:	f7fa f9d1 	bl	8002294 <_kill>
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	d102      	bne.n	8007efc <_kill_r+0x1c>
 8007ef6:	682b      	ldr	r3, [r5, #0]
 8007ef8:	b103      	cbz	r3, 8007efc <_kill_r+0x1c>
 8007efa:	6023      	str	r3, [r4, #0]
 8007efc:	bd38      	pop	{r3, r4, r5, pc}
 8007efe:	bf00      	nop
 8007f00:	20000460 	.word	0x20000460

08007f04 <_getpid_r>:
 8007f04:	f7fa b9be 	b.w	8002284 <_getpid>

08007f08 <_malloc_usable_size_r>:
 8007f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f0c:	1f18      	subs	r0, r3, #4
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	bfbc      	itt	lt
 8007f12:	580b      	ldrlt	r3, [r1, r0]
 8007f14:	18c0      	addlt	r0, r0, r3
 8007f16:	4770      	bx	lr

08007f18 <__swhatbuf_r>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f20:	2900      	cmp	r1, #0
 8007f22:	b096      	sub	sp, #88	@ 0x58
 8007f24:	4615      	mov	r5, r2
 8007f26:	461e      	mov	r6, r3
 8007f28:	da0d      	bge.n	8007f46 <__swhatbuf_r+0x2e>
 8007f2a:	89a3      	ldrh	r3, [r4, #12]
 8007f2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f30:	f04f 0100 	mov.w	r1, #0
 8007f34:	bf14      	ite	ne
 8007f36:	2340      	movne	r3, #64	@ 0x40
 8007f38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	6031      	str	r1, [r6, #0]
 8007f40:	602b      	str	r3, [r5, #0]
 8007f42:	b016      	add	sp, #88	@ 0x58
 8007f44:	bd70      	pop	{r4, r5, r6, pc}
 8007f46:	466a      	mov	r2, sp
 8007f48:	f000 f848 	bl	8007fdc <_fstat_r>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	dbec      	blt.n	8007f2a <__swhatbuf_r+0x12>
 8007f50:	9901      	ldr	r1, [sp, #4]
 8007f52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f5a:	4259      	negs	r1, r3
 8007f5c:	4159      	adcs	r1, r3
 8007f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f62:	e7eb      	b.n	8007f3c <__swhatbuf_r+0x24>

08007f64 <__smakebuf_r>:
 8007f64:	898b      	ldrh	r3, [r1, #12]
 8007f66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f68:	079d      	lsls	r5, r3, #30
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	d507      	bpl.n	8007f80 <__smakebuf_r+0x1c>
 8007f70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	6123      	str	r3, [r4, #16]
 8007f78:	2301      	movs	r3, #1
 8007f7a:	6163      	str	r3, [r4, #20]
 8007f7c:	b003      	add	sp, #12
 8007f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f80:	ab01      	add	r3, sp, #4
 8007f82:	466a      	mov	r2, sp
 8007f84:	f7ff ffc8 	bl	8007f18 <__swhatbuf_r>
 8007f88:	9f00      	ldr	r7, [sp, #0]
 8007f8a:	4605      	mov	r5, r0
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f7ff f904 	bl	800719c <_malloc_r>
 8007f94:	b948      	cbnz	r0, 8007faa <__smakebuf_r+0x46>
 8007f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f9a:	059a      	lsls	r2, r3, #22
 8007f9c:	d4ee      	bmi.n	8007f7c <__smakebuf_r+0x18>
 8007f9e:	f023 0303 	bic.w	r3, r3, #3
 8007fa2:	f043 0302 	orr.w	r3, r3, #2
 8007fa6:	81a3      	strh	r3, [r4, #12]
 8007fa8:	e7e2      	b.n	8007f70 <__smakebuf_r+0xc>
 8007faa:	89a3      	ldrh	r3, [r4, #12]
 8007fac:	6020      	str	r0, [r4, #0]
 8007fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fb2:	81a3      	strh	r3, [r4, #12]
 8007fb4:	9b01      	ldr	r3, [sp, #4]
 8007fb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007fba:	b15b      	cbz	r3, 8007fd4 <__smakebuf_r+0x70>
 8007fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f000 f81d 	bl	8008000 <_isatty_r>
 8007fc6:	b128      	cbz	r0, 8007fd4 <__smakebuf_r+0x70>
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	f023 0303 	bic.w	r3, r3, #3
 8007fce:	f043 0301 	orr.w	r3, r3, #1
 8007fd2:	81a3      	strh	r3, [r4, #12]
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	431d      	orrs	r5, r3
 8007fd8:	81a5      	strh	r5, [r4, #12]
 8007fda:	e7cf      	b.n	8007f7c <__smakebuf_r+0x18>

08007fdc <_fstat_r>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	4d07      	ldr	r5, [pc, #28]	@ (8007ffc <_fstat_r+0x20>)
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	4608      	mov	r0, r1
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	602b      	str	r3, [r5, #0]
 8007fea:	f7fa f997 	bl	800231c <_fstat>
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	d102      	bne.n	8007ff8 <_fstat_r+0x1c>
 8007ff2:	682b      	ldr	r3, [r5, #0]
 8007ff4:	b103      	cbz	r3, 8007ff8 <_fstat_r+0x1c>
 8007ff6:	6023      	str	r3, [r4, #0]
 8007ff8:	bd38      	pop	{r3, r4, r5, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20000460 	.word	0x20000460

08008000 <_isatty_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	4d06      	ldr	r5, [pc, #24]	@ (800801c <_isatty_r+0x1c>)
 8008004:	2300      	movs	r3, #0
 8008006:	4604      	mov	r4, r0
 8008008:	4608      	mov	r0, r1
 800800a:	602b      	str	r3, [r5, #0]
 800800c:	f7fa f996 	bl	800233c <_isatty>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_isatty_r+0x1a>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_isatty_r+0x1a>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	20000460 	.word	0x20000460

08008020 <_init>:
 8008020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008022:	bf00      	nop
 8008024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008026:	bc08      	pop	{r3}
 8008028:	469e      	mov	lr, r3
 800802a:	4770      	bx	lr

0800802c <_fini>:
 800802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802e:	bf00      	nop
 8008030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008032:	bc08      	pop	{r3}
 8008034:	469e      	mov	lr, r3
 8008036:	4770      	bx	lr
